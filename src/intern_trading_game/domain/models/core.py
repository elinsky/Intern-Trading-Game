"""Core data models for the Intern Trading Game.

This module defines the fundamental data structures used throughout
the game simulation, including market data distribution, game
configuration, and timing controls.
"""

from dataclasses import dataclass, field
from datetime import datetime, time
from typing import Dict, List

from ..exchange.order_book import OrderBook


@dataclass
class MarketData:
    """Public market information distributed to all strategies.

    Contains price and order book information that all participants
    receive in real-time during continuous trading. This ensures
    fair access to market information.

    Parameters
    ----------
    timestamp : datetime
        Real-world timestamp of market data
    spx_price : float
        S&P 500 index price
    spy_price : float
        SPDR S&P 500 ETF price
    order_book_snapshots : Dict[str, OrderBook]
        Current state of order books by instrument symbol

    Notes
    -----
    The SPX/SPY correlation is maintained at approximately 0.98 with
    tracking error modeled as:

    $SPY_t = \\frac{SPX_t}{10} + \\epsilon_t$

    where $\\epsilon_t \\sim N(0, \\sigma_{tracking}^2)$

    TradingContext
    --------------
    Market Assumptions
        - Prices stream continuously during market hours
        - Order book updates are real-time
        - All strategies receive identical market data

    Trading Rules
        - Market data streams continuously during open hours
        - Order books show 5 levels of depth
        - No hidden orders or reserve quantities

    Examples
    --------
    >>> data = MarketData(
    ...     timestamp=datetime(2024, 3, 21, 10, 30, 0),
    ...     spx_price=5234.50,
    ...     spy_price=523.15,
    ...     order_book_snapshots={}
    ... )
    >>> print(f"SPX={data.spx_price} at {data.timestamp}")
    SPX=5234.5 at 2024-03-21 10:30:00
    """

    timestamp: datetime
    spx_price: float
    spy_price: float
    order_book_snapshots: Dict[str, OrderBook]


@dataclass
class Signal:
    """Role-specific advance information for eligible strategies.

    Represents predictive signals distributed by the Event System
    to specific trading roles. Signal accuracy and timing vary by
    role type as configured in game parameters.

    Parameters
    ----------
    signal_type : str
        Type of signal ("volatility" or "tracking_error")
    horizon_minutes : int
        Number of minutes in advance (5-25 for volatility)
    data : Dict[str, float]
        Signal-specific data payload
    accuracy : float
        Configured accuracy rate for this signal type

    Notes
    -----
    Volatility signals contain transition probabilities:
    - P(Low), P(Medium), P(High) summing to 1.0

    Tracking error signals contain:
    - Expected deviation magnitude and direction

    TradingContext
    --------------
    Market Assumptions
        - Signals represent probabilistic forecasts
        - Accuracy reflects long-run hit rate
        - No guarantee on individual predictions

    Trading Rules
        - Hedge funds receive volatility signals
        - Arbitrage desks receive tracking signals
        - Market makers receive no advance signals

    Examples
    --------
    >>> vol_signal = Signal(
    ...     signal_type="volatility",
    ...     horizon_minutes=15,
    ...     data={"low": 0.2, "medium": 0.5, "high": 0.3},
    ...     accuracy=0.66
    ... )
    >>> print(f"Volatility forecast: {vol_signal.data}")
    Volatility forecast: {'low': 0.2, 'medium': 0.5, 'high': 0.3}
    """

    signal_type: str
    horizon_minutes: int
    data: Dict[str, float]
    accuracy: float


@dataclass
class NewsEvent:
    """Market news event affecting prices or volatility.

    Represents significant market events generated by the Event
    System via Poisson process. Events may move prices, change
    volatility regimes, or be false signals.

    Parameters
    ----------
    event_id : str
        Unique identifier for this event
    event_type : str
        Category: "regime_shift", "price_jump", "false_signal"
    description : str
        Human-readable event description
    impact_magnitude : float
        Size of potential market impact
    timestamp_announced : datetime
        When event becomes public

    Notes
    -----
    Event generation follows Poisson process with configurable
    rate (typically Î»=1 per 1-4 hours). Event type probabilities
    are configurable in game parameters.

    TradingContext
    --------------
    Market Assumptions
        - News reflects real market conditions
        - Impact varies with current volatility
        - Market digests news over time

    Trading Rules
        - All players see news simultaneously
        - Some roles get advance warning via signals
        - News may or may not move markets

    Examples
    --------
    >>> event = NewsEvent(
    ...     event_id="NEWS-001",
    ...     event_type="regime_shift",
    ...     description="Fed announces rate decision",
    ...     impact_magnitude=0.02,
    ...     timestamp_announced=datetime(2024, 3, 21, 14, 0, 0)
    ... )
    >>> print(f"Breaking: {event.description}")
    Breaking: Fed announces rate decision
    """

    event_id: str
    event_type: str
    description: str
    impact_magnitude: float
    timestamp_announced: datetime


@dataclass
class GameConfig:
    """Configuration parameters for a trading game session.

    Defines the operational parameters that control game timing,
    trading schedule, and session behavior in the continuous
    trading environment.

    Parameters
    ----------
    session_name : str
        Unique identifier for this game session
    trading_days : List[str], default=["Tuesday", "Thursday"]
        Days of week when trading occurs
    market_open : time, default=time(9, 30)
        Market opening time in CT (Central Time)
    market_close : time, default=time(15, 0)
        Market closing time in CT
    enable_volatility_events : bool, default=True
        Whether to generate volatility regime changes
    enable_news_events : bool, default=True
        Whether to generate market news events
    bot_timeout_seconds : float, default=10.0
        Maximum time allowed for bot response

    Notes
    -----
    Standard market hours (9:30 AM - 3:00 PM CT) provide 5.5 hours
    of regular trading time. The system operates continuously
    during market hours with real-time order matching.

    Bot timeout ensures system responsiveness - strategies that exceed
    the timeout may have orders rejected.

    TradingContext
    --------------
    Market Assumptions
        - Continuous trading during market hours
        - All strategies operate under same schedule
        - Market hours reflect equity market standards

    Trading Rules
        - No trading outside defined market hours
        - Real-time order matching when market is open
        - Bots must respond within timeout

    Examples
    --------
    >>> config = GameConfig(
    ...     session_name="training_session_1",
    ...     bot_timeout_seconds=5.0  # Faster for testing
    ... )
    >>> print(f"Session: {config.session_name}")
    Session: training_session_1
    """

    session_name: str
    trading_days: List[str] = field(
        default_factory=lambda: ["Tuesday", "Thursday"]
    )
    market_open: time = time(9, 30)
    market_close: time = time(15, 0)
    enable_volatility_events: bool = True
    enable_news_events: bool = True
    bot_timeout_seconds: float = 10.0


__all__ = [
    "MarketData",
    "Signal",
    "NewsEvent",
    "GameConfig",
]
