{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intern Trading Game","text":"<p>Welcome to the Intern Trading Game documentation! This is a role-based options trading simulation where intern teams compete by building trading bots.</p>"},{"location":"#game-overview","title":"Game Overview","text":"<ul> <li>Products: European options on simulated SPX and SPY underlyings</li> <li>Tick Frequency: Every 5 minutes (configurable)</li> <li>Submission: Intern bots submit orders</li> <li>Execution: Matching engine runs per tick, fills orders, updates P&amp;L</li> <li>Evaluation: Role-specific KPIs and strategy quality</li> </ul>"},{"location":"#roles","title":"Roles","text":"<p>Each intern team plays one of the following:</p> Role Objective Tools / Signals Market Maker Quote fairly and manage inventory risk Product-specific, delta hedging allowed Hedge Fund Exploit vol regime shifts &amp; implied/realized edge Advance vol signal with transition matrix, full product access Arbitrage Desk Trade mispriced spreads between SPX/SPY Tracking signal, fast execution Retail Trader (Employees only) Add flow and realism No signal, limited trade size"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#for-game-participants","title":"For Game Participants","text":"<ol> <li>Game Overview - High-level introduction</li> <li>Core Concepts - Key terminology and ideas</li> <li>Your Role - Choose and understand your trading role</li> <li>Trading Constraints - Understand your role's limitations</li> </ol>"},{"location":"#for-bot-developers","title":"For Bot Developers","text":"<ol> <li>Market Maker Tutorial - Step-by-step guide</li> <li>How to Submit Orders - Order submission guide</li> <li>REST API - API endpoints reference</li> <li>WebSocket API - Real-time data streams</li> </ol>"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#game-documentation","title":"Game Documentation","text":"<ul> <li>Fundamentals - Core concepts, mechanics, and market structure</li> <li>Trading Rules - Order types, constraints, and execution</li> <li>Roles - Detailed role descriptions and strategies</li> <li>Simulation - Price models, volatility, and events</li> <li>Scoring - Performance metrics and evaluation</li> <li>Configuration - Game parameters and settings</li> <li>Appendix - Glossary, formulas, and probability tables</li> </ul>"},{"location":"#technical-documentation","title":"Technical Documentation","text":""},{"location":"#architecture-design","title":"Architecture &amp; Design","text":"<ul> <li>Architecture Overview - System component overview</li> <li>Build Order - Implementation roadmap</li> <li>Implementation Guide - Technical setup details</li> </ul>"},{"location":"#tutorials-guides","title":"Tutorials &amp; Guides","text":"<ul> <li>Market Maker Tutorial - Complete bot example</li> <li>How to Submit Orders - Order submission guide</li> <li>Use REST API - REST API usage</li> <li>Use WebSockets - WebSocket connection guide</li> <li>WebSocket Integration - Advanced WebSocket patterns</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>API Overview - API architecture</li> <li>Exchange API - Core exchange interface</li> <li>REST API - HTTP endpoints</li> <li>WebSocket API - Real-time streams</li> <li>Validation API - Order validation rules</li> <li>Math Examples - Mathematical formulas</li> </ul>"},{"location":"#explanations","title":"Explanations","text":"<ul> <li>Order Matching - Matching engine logic</li> <li>Batch Matching - Batch processing</li> <li>Trading Phases - Tick lifecycle</li> <li>Order Validator Design - Validation patterns</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>Math in Docstrings - Documentation standards</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>For Participants: Start with Game Overview and Core Concepts</li> <li>For Developers: Jump to Market Maker Tutorial or REST API</li> <li>For Reference: See Glossary and Formulas</li> </ul> <p>Good luck, and may the best trading strategy win!</p>"},{"location":"game/","title":"Intern Trading Game Documentation","text":"<p>Welcome to the Intern Trading Game documentation. This guide contains all business and game-related information for participants.</p>"},{"location":"game/#quick-start","title":"Quick Start","text":"<ol> <li>Read the Game Overview for a high-level understanding</li> <li>Review Core Concepts for key terminology</li> <li>Choose your role in Roles Overview</li> <li>Understand Trading Constraints for your role</li> <li>Learn about Scoring Metrics</li> </ol>"},{"location":"game/#documentation-structure","title":"Documentation Structure","text":""},{"location":"game/#fundamentals","title":"Fundamentals","text":"<ul> <li>Core Concepts - Key terminology and concepts</li> <li>Market Structure - SPX/SPY instruments and options</li> <li>Game Mechanics - Tick structure and order flow</li> </ul>"},{"location":"game/#simulation","title":"Simulation","text":"<ul> <li>Price Generation - How underlying prices move</li> <li>Volatility Regimes - Low/medium/high volatility states</li> <li>News Events - Event types and impacts</li> <li>Correlation Model - SPX-SPY relationship</li> </ul>"},{"location":"game/#roles","title":"Roles","text":"<ul> <li>Overview - Compare all roles</li> <li>Market Maker - Continuous quoting requirements</li> <li>Hedge Fund - Gamma trading with delta neutrality</li> <li>Arbitrage Desk - Cross-asset opportunities</li> <li>Retail Flow - Automated retail simulation</li> </ul>"},{"location":"game/#trading","title":"Trading","text":"<ul> <li>Order Types - Limit, market, and quote orders</li> <li>Constraints - Role-specific limitations</li> <li>Signal Access - Information availability by role</li> <li>Execution Rules - Matching and priority</li> </ul>"},{"location":"game/#scoring","title":"Scoring","text":"<ul> <li>Overview - Scoring philosophy</li> </ul>"},{"location":"game/#configuration","title":"Configuration","text":"<ul> <li>Game Parameters - Configurable settings</li> <li>Example Config - Sample configuration</li> </ul>"},{"location":"game/#appendix","title":"Appendix","text":"<ul> <li>Probability Tables - News event probabilities</li> <li>Formulas - Mathematical formulas</li> <li>Glossary - Trading terms definitions</li> </ul>"},{"location":"game/overview/","title":"Intern Trading Game: Overview","text":""},{"location":"game/overview/#game-objective","title":"Game Objective","text":"<p>Create a realistic, role-based market simulation where each intern team acts as a trading desk. Teams develop automated trading strategies, compete on role-specific performance metrics, and gain hands-on experience in quantitative trading.</p>"},{"location":"game/overview/#what-youll-build","title":"What You'll Build","text":"<p>Each team develops a trading bot that:</p> <ul> <li>Connects to the market simulation</li> <li>Analyzes real-time market data and signals</li> <li>Executes trades based on your strategy</li> <li>Manages risk within role constraints</li> </ul>"},{"location":"game/overview/#market-structure","title":"Market Structure","text":"<p>The game simulates two correlated underlyings with options:</p> Instrument Description Key Features SPX S&amp;P 500 Index High-dollar value, moderate volatility SPY S&amp;P 500 ETF Tracks SPX with noise and lag Options European calls/puts ~5 strikes, 2-3 expirations per underlying"},{"location":"game/overview/#how-it-works","title":"How It Works","text":"<p>Every 5 minutes, a new market tick occurs with precise timing:</p> <ol> <li>T+0:00 - Price Generation: New underlying prices calculated</li> <li>T+0:30 to T+3:00 - Order Window: Bots submit orders (2.5 minute window)</li> <li>T+3:00 - Order Cutoff: No new orders accepted after this point</li> <li>T+3:30 - Trade Matching: All orders processed and trades executed</li> <li>T+4:00 - Results Published: Positions, P&amp;L, and market data updated</li> </ol>"},{"location":"game/overview/#choose-your-role","title":"Choose Your Role","text":"<p>Each team is assigned one trading role with unique advantages and constraints:</p> Role Strategy Focus Key Advantage Main Challenge Market Maker Provide liquidity +$0.02 maker rebates Must quote 80% uptime Hedge Fund Gamma trading Advance vol signals \u00b150 delta neutrality Arbitrage Desk SPX-SPY convergence Tracking error signals Maintain paired trades"},{"location":"game/overview/#evaluation","title":"Evaluation","text":"<p>Teams are scored on:</p> <ul> <li>Quantitative Performance: Role-specific metrics (P&amp;L, Sharpe, spread capture)</li> <li>Strategy Development: Code quality, innovation, and adaptation</li> <li>Research &amp; Analysis: Backtesting, signal validation, risk management</li> <li>Final Presentation: Insights, learnings, and recommendations</li> </ul>"},{"location":"game/overview/#getting-started","title":"Getting Started","text":"<ol> <li>Understand Your Role: Read your specific role documentation</li> <li>Learn the Mechanics: Review game fundamentals</li> <li>Build Your Bot: Follow the technical documentation</li> <li>Test Strategies: Use historical data for backtesting</li> <li>Iterate &amp; Improve: Analyze results and refine your approach</li> </ol>"},{"location":"game/overview/#timeline","title":"Timeline","text":"<ul> <li>Week 1-2: Learn mechanics, build initial bot</li> <li>Week 3-6: Live trading, strategy refinement</li> <li>Week 7-8: Final optimization and presentations</li> </ul> <p>Trading Schedule: Tuesdays &amp; Thursdays only, 9:30 AM - 3:00 PM CT Non-Trading Days: Monday (prep), Wednesday (analysis), Friday (retrospective)</p> <p>Ready to start? Proceed to Core Concepts</p>"},{"location":"game/appendix/formulas/","title":"Mathematical Formulas","text":""},{"location":"game/appendix/formulas/#price-generation","title":"Price Generation","text":""},{"location":"game/appendix/formulas/#geometric-brownian-motion","title":"Geometric Brownian Motion","text":"<p>The underlying price evolution follows:</p> <pre><code>S(t+\u0394t) = S(t) \u00d7 exp((\u03bc - \u03c3\u00b2/2)\u0394t + \u03c3\u221a\u0394t \u00d7 Z)\n</code></pre> <p>Where:</p> <ul> <li><code>S(t)</code> = Price at time t</li> <li><code>\u03bc</code> = Drift (typically 0 for intraday)</li> <li><code>\u03c3</code> = Volatility (depends on regime)</li> <li><code>\u0394t</code> = Time increment (5 minutes = 5/(252\u00d7390) years)</li> <li><code>Z</code> = Standard normal random variable</li> </ul>"},{"location":"game/appendix/formulas/#spy-tracking-formula","title":"SPY Tracking Formula","text":"<pre><code>SPY(t) = (SPX(t) / 10) \u00d7 (1 + \u03b5(t)) + \u03b7(t)\n</code></pre> <p>Where:</p> <ul> <li><code>\u03b5(t)</code> = Tracking error (~N(0, 0.0015\u00b2) daily)</li> <li><code>\u03b7(t)</code> = Additional noise (~N(0, 0.0005\u00b2) per tick)</li> </ul>"},{"location":"game/appendix/formulas/#option-pricing","title":"Option Pricing","text":""},{"location":"game/appendix/formulas/#black-scholes-formula","title":"Black-Scholes Formula","text":"<p>For European options:</p> <p>Call Option: <pre><code>C = S\u2080 \u00d7 N(d\u2081) - K \u00d7 e^(-rT) \u00d7 N(d\u2082)\n</code></pre></p> <p>Put Option: <pre><code>P = K \u00d7 e^(-rT) \u00d7 N(-d\u2082) - S\u2080 \u00d7 N(-d\u2081)\n</code></pre></p> <p>Where: <pre><code>d\u2081 = [ln(S\u2080/K) + (r + \u03c3\u00b2/2)T] / (\u03c3\u221aT)\nd\u2082 = d\u2081 - \u03c3\u221aT\n</code></pre></p> <p>Parameters:</p> <ul> <li><code>S\u2080</code> = Current underlying price</li> <li><code>K</code> = Strike price</li> <li><code>r</code> = Risk-free rate (assume 0 for simplicity)</li> <li><code>T</code> = Time to expiration</li> <li><code>\u03c3</code> = Implied volatility</li> <li><code>N(x)</code> = Cumulative normal distribution</li> </ul>"},{"location":"game/appendix/formulas/#greeks-calculations","title":"Greeks Calculations","text":""},{"location":"game/appendix/formulas/#delta","title":"Delta (\u0394)","text":"<p>Rate of change of option price with respect to underlying:</p> <p>Call Delta: <pre><code>\u0394_call = N(d\u2081)\n</code></pre></p> <p>Put Delta: <pre><code>\u0394_put = N(d\u2081) - 1\n</code></pre></p>"},{"location":"game/appendix/formulas/#gamma","title":"Gamma (\u0393)","text":"<p>Rate of change of delta:</p> <pre><code>\u0393 = \u03c6(d\u2081) / (S\u2080 \u00d7 \u03c3 \u00d7 \u221aT)\n</code></pre> <p>Where \u03c6(x) is the standard normal PDF.</p>"},{"location":"game/appendix/formulas/#vega","title":"Vega (\u03bd)","text":"<p>Sensitivity to volatility:</p> <pre><code>\u03bd = S\u2080 \u00d7 \u03c6(d\u2081) \u00d7 \u221aT\n</code></pre>"},{"location":"game/appendix/formulas/#theta","title":"Theta (\u0398)","text":"<p>Time decay:</p> <p>Call Theta: <pre><code>\u0398_call = -(S\u2080 \u00d7 \u03c6(d\u2081) \u00d7 \u03c3) / (2\u221aT) - rK \u00d7 e^(-rT) \u00d7 N(d\u2082)\n</code></pre></p>"},{"location":"game/appendix/formulas/#performance-metrics","title":"Performance Metrics","text":""},{"location":"game/appendix/formulas/#sharpe-ratio","title":"Sharpe Ratio","text":"<pre><code>Sharpe = (R_p - R_f) / \u03c3_p\n</code></pre> <p>Where:</p> <ul> <li><code>R_p</code> = Portfolio return</li> <li><code>R_f</code> = Risk-free rate (typically 0 for intraday)</li> <li><code>\u03c3_p</code> = Standard deviation of returns</li> </ul> <p>Annualized Sharpe: <pre><code>Sharpe_annual = Sharpe_daily \u00d7 \u221a252\n</code></pre></p>"},{"location":"game/appendix/formulas/#maximum-drawdown","title":"Maximum Drawdown","text":"<pre><code>MDD = max_t\u2208[0,T] [max_s\u2208[0,t] P(s) - P(t)] / max_s\u2208[0,t] P(s)\n</code></pre> <p>Where P(t) is portfolio value at time t.</p>"},{"location":"game/appendix/formulas/#information-ratio","title":"Information Ratio","text":"<p>For signal-based strategies:</p> <pre><code>IR = (R_strategy - R_benchmark) / \u03c3_tracking_error\n</code></pre>"},{"location":"game/appendix/formulas/#position-sizing","title":"Position Sizing","text":""},{"location":"game/appendix/formulas/#kelly-criterion","title":"Kelly Criterion","text":"<p>Optimal position size:</p> <pre><code>f* = (p \u00d7 b - q) / b\n</code></pre> <p>Where:</p> <ul> <li><code>f*</code> = Fraction of capital to bet</li> <li><code>p</code> = Probability of win</li> <li><code>q</code> = Probability of loss (1-p)</li> <li><code>b</code> = Odds (win/loss ratio)</li> </ul> <p>Practical Kelly (with safety factor): <pre><code>f_practical = f* \u00d7 safety_factor\n</code></pre> Where safety_factor \u2208 [0.25, 0.5]</p>"},{"location":"game/appendix/formulas/#position-limits-check","title":"Position Limits Check","text":"<pre><code>Available = min(\n    Role_Limit - |Current_Position|,\n    Total_Limit - \u03a3|All_Positions|\n)\n</code></pre>"},{"location":"game/appendix/formulas/#fee-calculations","title":"Fee Calculations","text":""},{"location":"game/appendix/formulas/#net-trading-cost","title":"Net Trading Cost","text":"<pre><code>Net_Cost = (Taker_Volume \u00d7 Taker_Fee) - (Maker_Volume \u00d7 Maker_Rebate)\n</code></pre>"},{"location":"game/appendix/formulas/#break-even-spread-market-maker","title":"Break-Even Spread (Market Maker)","text":"<pre><code>BE_Spread = 2 \u00d7 (Taker_Fee / (1 + Hit_Rate))\n</code></pre> <p>Where Hit_Rate is the fraction of quotes that get filled.</p>"},{"location":"game/appendix/formulas/#arbitrage-metrics","title":"Arbitrage Metrics","text":""},{"location":"game/appendix/formulas/#tracking-error","title":"Tracking Error","text":"<pre><code>Tracking_Error = (SPY_Actual - SPY_Theoretical) / SPY_Theoretical \u00d7 100%\n</code></pre> <p>Where: <pre><code>SPY_Theoretical = SPX / 10\n</code></pre></p>"},{"location":"game/appendix/formulas/#z-score-for-mean-reversion","title":"Z-Score for Mean Reversion","text":"<pre><code>Z = (Current_Spread - Mean_Spread) / Std_Spread\n</code></pre> <p>Trade when |Z| &gt; threshold (typically 2).</p>"},{"location":"game/appendix/formulas/#convergence-probability","title":"Convergence Probability","text":"<p>Using Ornstein-Uhlenbeck process:</p> <pre><code>P(converge by time T) = 1 - exp(-2\u03b8T)\n</code></pre> <p>Where \u03b8 is the mean reversion speed.</p>"},{"location":"game/appendix/formulas/#risk-metrics","title":"Risk Metrics","text":""},{"location":"game/appendix/formulas/#value-at-risk-var","title":"Value at Risk (VaR)","text":"<p>Parametric VaR (95% confidence): <pre><code>VaR_95 = Portfolio_Value \u00d7 1.645 \u00d7 \u03c3_daily\n</code></pre></p>"},{"location":"game/appendix/formulas/#beta-calculation","title":"Beta Calculation","text":"<pre><code>\u03b2 = Cov(R_portfolio, R_market) / Var(R_market)\n</code></pre> <p>For arbitrage desks, \u03b2 should be close to 0.</p>"},{"location":"game/appendix/formulas/#correlation","title":"Correlation","text":"<pre><code>\u03c1_XY = Cov(X,Y) / (\u03c3_X \u00d7 \u03c3_Y)\n</code></pre> <p>SPX-SPY correlation typically ~0.98.</p>"},{"location":"game/appendix/formulas/#execution-metrics","title":"Execution Metrics","text":""},{"location":"game/appendix/formulas/#implementation-shortfall","title":"Implementation Shortfall","text":"<pre><code>IS = (Execution_Price - Decision_Price) / Decision_Price \u00d7 Direction\n</code></pre>"},{"location":"game/appendix/formulas/#effective-spread","title":"Effective Spread","text":"<pre><code>Effective_Spread = 2 \u00d7 |Execution_Price - Mid_Price|\n</code></pre>"},{"location":"game/appendix/formulas/#price-impact","title":"Price Impact","text":"<pre><code>Impact = |Post_Trade_Mid - Pre_Trade_Mid| / Pre_Trade_Mid\n</code></pre>"},{"location":"game/appendix/formulas/#signal-processing","title":"Signal Processing","text":""},{"location":"game/appendix/formulas/#signal-to-noise-ratio","title":"Signal-to-Noise Ratio","text":"<pre><code>SNR = E[Signal\u00b2] / E[Noise\u00b2]\n</code></pre>"},{"location":"game/appendix/formulas/#exponential-moving-average","title":"Exponential Moving Average","text":"<p>For adaptive parameters:</p> <pre><code>EMA_t = \u03b1 \u00d7 Value_t + (1 - \u03b1) \u00d7 EMA_t-1\n</code></pre> <p>Where \u03b1 = 2/(N+1) for N-period EMA.</p>"},{"location":"game/appendix/formulas/#market-maker-specific","title":"Market Maker Specific","text":""},{"location":"game/appendix/formulas/#optimal-quote-width","title":"Optimal Quote Width","text":"<pre><code>Spread* = 2/\u03b3 \u00d7 ln(1 + \u03b3/k)\n</code></pre> <p>Where:</p> <ul> <li><code>\u03b3</code> = Risk aversion parameter</li> <li><code>k</code> = Order arrival rate</li> </ul>"},{"location":"game/appendix/formulas/#inventory-penalty","title":"Inventory Penalty","text":"<pre><code>Penalty = \u03bb \u00d7 (Current_Inventory / Max_Inventory)\u00b2\n</code></pre> <p>Skew quotes by Penalty \u00d7 Base_Spread.</p>"},{"location":"game/appendix/formulas/#quick-reference","title":"Quick Reference","text":""},{"location":"game/appendix/formulas/#common-values","title":"Common Values","text":"Parameter Value Usage Trading minutes/day 330 5.5 hours (9:30 AM - 3:00 PM CT) Trading days/week 2 Tuesday and Thursday Trading weeks 8 Full internship duration Ticks/day 66 5-minute ticks Total ticks 1,056 66 ticks \u00d7 2 days \u00d7 8 weeks"},{"location":"game/appendix/formulas/#volatility-conversions","title":"Volatility Conversions","text":"<pre><code>\u03c3_5min = \u03c3_annual / \u221a(252 \u00d7 78)\n\u03c3_daily = \u03c3_annual / \u221a252\n\u03c3_tick = \u03c3_daily / \u221a78\n</code></pre>"},{"location":"game/appendix/formulas/#position-scaling","title":"Position Scaling","text":"<p>For SPX/SPY pairs: <pre><code>SPY_Contracts = SPX_Contracts \u00d7 10 \u00d7 (SPX_Price / SPY_Price)\n</code></pre></p> <p>Target ratio: 10:1 by value.</p>"},{"location":"game/appendix/glossary/","title":"Glossary of Terms","text":""},{"location":"game/appendix/glossary/#a","title":"A","text":"<p>Alpha: Excess return above a benchmark or risk-free rate. In this game, refers to trading edge from signals or strategy.</p> <p>Arbitrage: Simultaneous purchase and sale of related instruments to profit from price discrepancies. The Arbitrage Desk role specializes in SPX-SPY convergence trades.</p> <p>Ask: The price at which a seller is willing to sell. Also called the \"offer.\"</p> <p>At-the-money (ATM): An option whose strike price equals the current underlying price.</p>"},{"location":"game/appendix/glossary/#b","title":"B","text":"<p>Backtesting: Testing a trading strategy on historical data to evaluate its performance.</p> <p>Beta: Measure of systematic risk relative to the market. Arbitrage desks target beta-neutral positions.</p> <p>Bid: The price at which a buyer is willing to buy.</p> <p>Bid-Ask Spread: The difference between the bid and ask prices. Market makers profit from this spread.</p> <p>Black-Scholes: Mathematical model for pricing European options, used in the simulation.</p>"},{"location":"game/appendix/glossary/#c","title":"C","text":"<p>Call Option: Contract giving the right to buy the underlying at the strike price at expiration.</p> <p>Circuit Breaker: Maximum price movement allowed per tick (5% in this game).</p> <p>Convergence Trade: Arbitrage strategy betting that prices will converge to fair value.</p> <p>Correlation: Statistical relationship between two assets. SPX-SPY correlation is ~0.98.</p>"},{"location":"game/appendix/glossary/#d","title":"D","text":"<p>Delta: Rate of change of option price with respect to underlying price movement.</p> <p>Delta Neutrality: Maintaining portfolio delta close to zero to isolate other risks (Hedge Fund requirement: \u00b150 deltas).</p> <p>Drawdown: Peak-to-trough decline in portfolio value.</p>"},{"location":"game/appendix/glossary/#e","title":"E","text":"<p>European Option: Option that can only be exercised at expiration (used in this game).</p> <p>Execution Risk: Risk that trades won't execute at expected prices.</p> <p>Expected Value: Probability-weighted average of possible outcomes.</p>"},{"location":"game/appendix/glossary/#f","title":"F","text":"<p>Fill: Successful execution of an order.</p> <p>Fill Rate: Percentage of orders that execute successfully.</p>"},{"location":"game/appendix/glossary/#g","title":"G","text":"<p>Gamma: Rate of change of delta with respect to underlying price.</p> <p>Gamma Scalping: Trading strategy that profits from rehedging a delta-neutral position as the underlying moves (Hedge Fund core strategy).</p> <p>Gamma Trading: Managing options positions to profit from gamma through dynamic hedging.</p> <p>Geometric Brownian Motion (GBM): Mathematical model for price evolution used in the simulation.</p> <p>Greeks: Sensitivity measures for options (Delta, Gamma, Vega, Theta).</p>"},{"location":"game/appendix/glossary/#h","title":"H","text":"<p>Hedge: Position taken to reduce risk in another position.</p> <p>Hit Rate: Percentage of profitable trades or signals.</p>"},{"location":"game/appendix/glossary/#i","title":"I","text":"<p>Implementation Shortfall: Difference between decision price and execution price.</p> <p>Implied Volatility (IV): Market's expectation of future volatility embedded in option prices.</p> <p>Inventory Risk: Risk from holding positions (critical for market makers).</p> <p>In-the-money (ITM): Call with strike below spot, or put with strike above spot.</p>"},{"location":"game/appendix/glossary/#k","title":"K","text":"<p>Kelly Criterion: Formula for optimal position sizing based on edge and odds.</p> <p>KPI (Key Performance Indicator): Primary metrics used for scoring each role.</p>"},{"location":"game/appendix/glossary/#l","title":"L","text":"<p>Leg: One side of a paired trade (e.g., SPX leg and SPY leg).</p> <p>Limit Order: Order to buy/sell at a specific price or better.</p> <p>Liquidity: Ease of trading without moving the price. Market makers provide liquidity.</p>"},{"location":"game/appendix/glossary/#m","title":"M","text":"<p>Maker: Order that adds liquidity to the order book (earns rebate).</p> <p>Market Order: Order to buy/sell immediately at best available price.</p> <p>Mark-to-Market: Valuing positions at current market prices.</p> <p>Mean Reversion: Tendency for prices to return to average levels.</p> <p>Microstructure: Study of how markets operate at the order and trade level.</p> <p>Moneyness: Relationship between option strike and underlying price.</p>"},{"location":"game/appendix/glossary/#n","title":"N","text":"<p>Net Position: Long positions minus short positions.</p> <p>Noise: Random price movements without information content.</p>"},{"location":"game/appendix/glossary/#o","title":"O","text":"<p>Order Book: List of all resting buy and sell orders.</p> <p>Out-of-the-money (OTM): Call with strike above spot, or put with strike below spot.</p>"},{"location":"game/appendix/glossary/#p","title":"P","text":"<p>P&amp;L (Profit and Loss): Financial performance measure.</p> <p>Paired Trade: Simultaneous positions in related instruments (Arbitrage Desk requirement).</p> <p>Position Limit: Maximum allowed position size per instrument or portfolio.</p> <p>Price-Time Priority: Order matching rule giving preference to better prices, then earlier orders.</p> <p>Put Option: Contract giving the right to sell the underlying at the strike price.</p>"},{"location":"game/appendix/glossary/#q","title":"Q","text":"<p>Quote: Two-sided market showing both bid and ask (Market Maker requirement).</p> <p>Quote Stuffing: Prohibited practice of submitting excessive orders to slow the system.</p>"},{"location":"game/appendix/glossary/#r","title":"R","text":"<p>Realized Volatility (RV): Actual price volatility that occurs.</p> <p>Rebate: Payment for providing liquidity (making).</p> <p>Regime: Market state (low/medium/high volatility in this game).</p> <p>Risk-Adjusted Return: Return accounting for risk taken (e.g., Sharpe ratio).</p>"},{"location":"game/appendix/glossary/#s","title":"S","text":"<p>Sharpe Ratio: Risk-adjusted return measure (return per unit of volatility).</p> <p>Signal: Information advantage provided to specific roles.</p> <p>Slippage: Difference between expected and actual execution price.</p> <p>Spread: Difference between bid and ask prices.</p> <p>Strike Price: Price at which option can be exercised.</p>"},{"location":"game/appendix/glossary/#t","title":"T","text":"<p>Taker: Order that removes liquidity from the book (pays fee).</p> <p>Theta: Time decay of option value.</p> <p>Tick: 5-minute interval when prices update and trades occur.</p> <p>Tracking Error: Deviation of SPY from theoretical SPX/10 value.</p> <p>Two-Sided Quote: Simultaneous bid and ask prices (Market Maker only).</p>"},{"location":"game/appendix/glossary/#u","title":"U","text":"<p>Underlying: The asset on which derivatives are based (SPX and SPY).</p> <p>Uptime: Percentage of time actively quoting (Market Maker requirement: 80%).</p>"},{"location":"game/appendix/glossary/#v","title":"V","text":"<p>Vega: Sensitivity of option price to volatility changes.</p> <p>Volatility: Standard deviation of returns, measuring price variability.</p> <p>Volatility Arbitrage: Trading implied vs realized volatility differences.</p> <p>Volatility Regime: Market state of low/medium/high volatility.</p> <p>Volatility Smile/Skew: Pattern of implied volatilities across strikes.</p> <p>Volume: Number of contracts traded.</p>"},{"location":"game/appendix/glossary/#w","title":"W","text":"<p>Working Order: Order resting in the book waiting to fill.</p>"},{"location":"game/appendix/glossary/#z","title":"Z","text":"<p>Z-Score: Number of standard deviations from mean, used for mean reversion signals.</p>"},{"location":"game/appendix/glossary/#common-abbreviations","title":"Common Abbreviations","text":"<ul> <li>API: Application Programming Interface</li> <li>ATM: At-the-money</li> <li>GBM: Geometric Brownian Motion</li> <li>HF: Hedge Fund</li> <li>ITM: In-the-money</li> <li>IV: Implied Volatility</li> <li>MM: Market Maker</li> <li>OTM: Out-of-the-money</li> <li>RV: Realized Volatility</li> <li>SPX: S&amp;P 500 Index</li> <li>SPY: S&amp;P 500 ETF</li> </ul>"},{"location":"game/appendix/glossary/#role-specific-terms","title":"Role-Specific Terms","text":""},{"location":"game/appendix/glossary/#market-maker-terms","title":"Market Maker Terms","text":"<ul> <li>Inventory Management: Controlling position size to stay within limits</li> <li>Quote Coverage: Percentage of instruments actively quoted</li> <li>Spread Capture: Profit from bid-ask spread</li> <li>Enhanced Rebate: +$0.02 maker rebate (2x normal)</li> </ul>"},{"location":"game/appendix/glossary/#hedge-fund-terms","title":"Hedge Fund Terms","text":"<ul> <li>Directional Bias: Taking long or short positions</li> <li>Signal Trading: Using volatility forecasts to trade</li> <li>Volatility Edge: Profit from IV vs RV differences</li> <li>Position Concentration: Large positions in fewer instruments</li> </ul>"},{"location":"game/appendix/glossary/#arbitrage-desk-terms","title":"Arbitrage Desk Terms","text":"<ul> <li>Convergence Trade: Betting on price relationships normalizing</li> <li>Paired Position: Balanced SPX and SPY trades</li> <li>Tracking Signal: Alert when SPY diverges from SPX</li> <li>Market Neutral: No directional exposure</li> </ul>"},{"location":"game/appendix/glossary/#trading-mechanics-terms","title":"Trading Mechanics Terms","text":"<ul> <li>Batch Processing: All orders processed simultaneously per tick</li> <li>Order Window: 2-3 minute period to submit orders</li> <li>Price Discovery: Process of finding equilibrium prices</li> <li>Tick Processing: 5-minute cycle of price generation and trading</li> </ul>"},{"location":"game/appendix/probability-tables/","title":"Probability Tables","text":""},{"location":"game/appendix/probability-tables/#news-event-probabilities","title":"News Event Probabilities","text":"<p>All participants have access to these probability tables, which indicate the likelihood of various outcomes when news events occur.</p>"},{"location":"game/appendix/probability-tables/#major-market-events","title":"Major Market Events","text":"<p>These events have the highest impact potential and occur less frequently.</p> News Headline Regime Shift Price Jump Direction Magnitude Fed announces emergency meeting 85% 60% Negative 1-3% Geopolitical tensions escalate 70% 30% Negative 0.5-2% Major bank reports losses 65% 45% Negative 1-2% Surprise rate decision 75% 50% Either 1-2.5% Tech giant acquisition announced 40% 50% Positive 0.5-1.5%"},{"location":"game/appendix/probability-tables/#economic-data-releases","title":"Economic Data Releases","text":"<p>Regular economic announcements with moderate impact.</p> News Headline Regime Shift Price Jump Direction Magnitude Fed hints at tightening 60% 20% Negative 0.3-1% Strong jobs report 40% 10% Positive 0.2-0.5% Inflation data surprises 55% 35% Either 0.5-1% GDP beats expectations 35% 25% Positive 0.3-0.8% Manufacturing data weak 45% 15% Negative 0.2-0.6%"},{"location":"game/appendix/probability-tables/#market-commentary","title":"Market Commentary","text":"<p>Analyst opinions and market color with lower impact.</p> News Headline Regime Shift Price Jump Direction Magnitude Analysts upgrade sector 15% 10% Positive 0.1-0.3% Technical breakout observed 30% 25% Either 0.3-0.7% Options flow unusual 25% 5% None 0% Earnings season begins 20% 10% Either 0.2-0.4% Year-end rebalancing 10% 5% Either 0.1-0.2%"},{"location":"game/appendix/probability-tables/#neutral-events","title":"Neutral Events","text":"<p>Low-impact or non-events for calibration.</p> News Headline Regime Shift Price Jump Direction Magnitude Markets quiet ahead of data 5% 0% None 0% Trading range-bound 5% 5% Either 0.1% Light volume expected 0% 0% None 0% No major news today 0% 0% None 0%"},{"location":"game/appendix/probability-tables/#volatility-regime-transition-probabilities","title":"Volatility Regime Transition Probabilities","text":""},{"location":"game/appendix/probability-tables/#natural-transition-matrix","title":"Natural Transition Matrix","text":"<p>When no news events occur, regimes evolve according to:</p> <pre><code>From/To           Low Vol   Med Vol   High Vol\nLow Volatility    95%       4%        1%\nMedium Volatility 2%        94%       4%\nHigh Volatility   1%        9%        90%\n</code></pre>"},{"location":"game/appendix/probability-tables/#event-triggered-transitions","title":"Event-Triggered Transitions","text":"<p>When regime shift events occur (based on tables above):</p> <pre><code>From/To           Low Vol   Med Vol   High Vol\nLow Volatility    0%        70%       30%\nMedium Volatility 10%       0%        90%\nHigh Volatility   5%        85%       10%\n</code></pre>"},{"location":"game/appendix/probability-tables/#signal-accuracy-tables","title":"Signal Accuracy Tables","text":""},{"location":"game/appendix/probability-tables/#hedge-fund-volatility-signal","title":"Hedge Fund Volatility Signal","text":"Actual Outcome Signal Predicts Probability Regime shifts Regime shifts 66% Regime shifts No shift 34% No shift No shift 66% No shift Regime shifts 34% <p>Confusion Matrix: <pre><code>                 Predicted Shift  Predicted Stable\nActual Shift     66%             34%\nActual Stable    34%             66%\n</code></pre></p>"},{"location":"game/appendix/probability-tables/#arbitrage-desk-tracking-signal","title":"Arbitrage Desk Tracking Signal","text":"Tracking Error Size Signal Accuracy False Positive Rate &lt;0.10% 60% 40% 0.10-0.20% 75% 25% 0.20-0.50% 80% 20% &gt;0.50% 85% 15%"},{"location":"game/appendix/probability-tables/#event-frequency-distributions","title":"Event Frequency Distributions","text":""},{"location":"game/appendix/probability-tables/#news-event-timing","title":"News Event Timing","text":"<p>Poisson Distribution Parameters:</p> <ul> <li>Average interval: 2.5 hours</li> <li>Minimum gap: 30 minutes</li> <li>Maximum gap: 6 hours</li> </ul> <p>Daily Pattern: | Time Period  | Relative Frequency | | ------------ | ------------------ | | 9 AM - 12 PM | 1.5x               | | 12 PM - 2 PM | 0.8x               | | 2 PM - 4 PM  | 1.2x               | | After 4 PM   | 0.5x               |</p>"},{"location":"game/appendix/probability-tables/#volatility-regime-durations","title":"Volatility Regime Durations","text":"Regime Average Duration Std Dev Min Max Low 100 ticks 40 ticks 50 200 Medium 65 ticks 25 ticks 30 100 High 30 ticks 15 ticks 10 50"},{"location":"game/appendix/probability-tables/#price-impact-calculations","title":"Price Impact Calculations","text":""},{"location":"game/appendix/probability-tables/#jump-magnitudes-by-event-type","title":"Jump Magnitudes by Event Type","text":"<p>Distribution: Log-normal <pre><code>Jump Size = Sign \u00d7 exp(\u03bc + \u03c3 \u00d7 Z)\nWhere:\n\n- \u03bc = log(expected_magnitude)\n- \u03c3 = 0.3 (volatility of jump size)\n- Z = standard normal random\n</code></pre></p>"},{"location":"game/appendix/probability-tables/#spy-tracking-error-distribution","title":"SPY Tracking Error Distribution","text":"<p>Normal Distribution:</p> <ul> <li>Mean: 0%</li> <li>Daily Std Dev: 0.15%</li> <li>Intraday Autocorrelation: 0.85</li> <li>Mean Reversion Half-life: 7 ticks</li> </ul>"},{"location":"game/appendix/probability-tables/#using-probability-tables","title":"Using Probability Tables","text":""},{"location":"game/appendix/probability-tables/#for-hedge-funds","title":"For Hedge Funds","text":"<ol> <li>Pre-position when high-probability events approach</li> <li>Size trades based on regime shift probability</li> <li>Combine with volatility signal for confirmation</li> </ol>"},{"location":"game/appendix/probability-tables/#for-market-makers","title":"For Market Makers","text":"<ol> <li>Widen spreads before high-impact events</li> <li>Reduce size proportional to total probability</li> <li>Skew quotes based on likely direction</li> </ol>"},{"location":"game/appendix/probability-tables/#for-arbitrage-desks","title":"For Arbitrage Desks","text":"<ol> <li>Expect divergence during regime shifts</li> <li>Size larger when volatility increases</li> <li>Quick entry after event confirmation</li> </ol>"},{"location":"game/appendix/probability-tables/#important-notes","title":"Important Notes","text":"<ol> <li>Probabilities are known - All participants see these tables</li> <li>Outcomes are random - Actual results follow these distributions</li> <li>Signals add edge - Some roles know outcomes in advance</li> <li>History doesn't repeat - Each event is independent</li> </ol>"},{"location":"game/appendix/probability-tables/#quick-reference-card","title":"Quick Reference Card","text":""},{"location":"game/appendix/probability-tables/#high-impact-events-50-total-probability","title":"High Impact Events (&gt;50% total probability)","text":"<ul> <li>Fed emergency meeting: 85% + 60% = 145% combined</li> <li>Surprise rate decision: 75% + 50% = 125% combined</li> <li>Geopolitical tensions: 70% + 30% = 100% combined</li> </ul>"},{"location":"game/appendix/probability-tables/#medium-impact-events-25-50-total-probability","title":"Medium Impact Events (25-50% total probability)","text":"<ul> <li>Fed hints at tightening: 60% + 20% = 80% combined</li> <li>Inflation surprises: 55% + 35% = 90% combined</li> <li>Technical breakout: 30% + 25% = 55% combined</li> </ul>"},{"location":"game/appendix/probability-tables/#low-impact-events-25-total-probability","title":"Low Impact Events (&lt;25% total probability)","text":"<ul> <li>Analyst upgrades: 15% + 10% = 25% combined</li> <li>Markets quiet: 5% + 0% = 5% combined</li> <li>No news: 0% + 0% = 0% combined</li> </ul> <p>Remember: These probabilities are your map to navigate market events. Study them, plan around them, and use them to manage risk effectively.</p>"},{"location":"game/configuration/game-parameters/","title":"Game Parameters","text":""},{"location":"game/configuration/game-parameters/#overview","title":"Overview","text":"<p>The Intern Trading Game simulation has numerous configurable parameters that control market behavior, constraints, and scoring. This document outlines the key parameters and their typical values.</p>"},{"location":"game/configuration/game-parameters/#market-structure-parameters","title":"Market Structure Parameters","text":""},{"location":"game/configuration/game-parameters/#tick-configuration","title":"Tick Configuration","text":"Parameter Default Value Range Description tick_duration 5 minutes 1-60 min Time between market updates order_window 3 minutes 1-4 min Time to submit orders each tick batch_processing true - Orders processed simultaneously"},{"location":"game/configuration/game-parameters/#instrument-configuration","title":"Instrument Configuration","text":"Parameter Default Value Description underlyings [\"SPX\", \"SPY\"] Available spot instruments strikes_per_underlying 5 Number of option strikes expiration_count 3 Number of expiration dates expiration_range 1-8 weeks Time to expiration range"},{"location":"game/configuration/game-parameters/#price-parameters","title":"Price Parameters","text":"Parameter Default Value Description spx_initial_price 4400 Starting SPX price spy_ratio 10 SPX/SPY price ratio min_tick_size 0.01 Minimum price increment max_tick_move 5% Circuit breaker limit"},{"location":"game/configuration/game-parameters/#volatility-regime-parameters","title":"Volatility Regime Parameters","text":""},{"location":"game/configuration/game-parameters/#regime-definitions","title":"Regime Definitions","text":"Regime Annual Vol 5-min Std Dev Persistence Low 10% 0.04% 50-200 ticks Medium 20% 0.09% 30-100 ticks High 50% 0.22% 10-50 ticks"},{"location":"game/configuration/game-parameters/#transition-matrix","title":"Transition Matrix","text":"<pre><code>         To Low  To Med  To High\nFrom Low   0.95    0.04    0.01\nFrom Med   0.02    0.94    0.04\nFrom High  0.01    0.09    0.90\n</code></pre>"},{"location":"game/configuration/game-parameters/#role-specific-parameters","title":"Role-Specific Parameters","text":""},{"location":"game/configuration/game-parameters/#market-maker","title":"Market Maker","text":"Parameter Value Description quote_uptime_requirement 80% Minimum quote presence maker_rebate +$0.02 Per contract rebate taker_fee -$0.01 Per contract fee position_limit \u00b150 Per option limit total_position_limit \u00b1200 Portfolio limit max_spread_width 10% Maximum quote spread"},{"location":"game/configuration/game-parameters/#hedge-fund","title":"Hedge Fund","text":"Parameter Value Description maker_rebate +$0.01 Per contract rebate taker_fee -$0.02 Per contract fee position_limit 150 Per option limit total_position_limit 500 Portfolio limit signal_accuracy 66% Volatility signal accuracy signal_lead_time 1-5 ticks Advance warning"},{"location":"game/configuration/game-parameters/#arbitrage-desk","title":"Arbitrage Desk","text":"Parameter Value Description maker_rebate +$0.01 Per contract rebate taker_fee -$0.02 Per contract fee position_limit 100 Per option limit total_position_limit 300 Portfolio limit signal_accuracy 80% Tracking error accuracy target_ratio 10:1 SPX:SPY value ratio"},{"location":"game/configuration/game-parameters/#retail-flow-simulation","title":"Retail Flow Simulation","text":"Parameter Value Description orders_per_tick Poisson(\u03bb=3) Random order generation order_size Exponential(\u03bc=5) Size distribution max_position 50 Total position limit call_probability 60% Bullish bias otm_preference 70% Prefer cheap options market_order_rate 40% Takes liquidity"},{"location":"game/configuration/game-parameters/#retail-behavioral-patterns","title":"Retail Behavioral Patterns","text":"Pattern Probability Trigger Effect Momentum Chasing 30% 3-tick trend 2x size Panic Selling 20% 5% drawdown 3x size sells FOMO Buying 25% Vol spike Buy OTM calls Profit Taking 15% 20% gain Sell 50%"},{"location":"game/configuration/game-parameters/#signal-parameters","title":"Signal Parameters","text":""},{"location":"game/configuration/game-parameters/#news-event-configuration","title":"News Event Configuration","text":"Parameter Default Description event_frequency 1-4 hours Poisson distribution regime_shift_events 40% Percentage causing shifts price_jump_events 30% Percentage causing jumps false_positive_events 30% No effect events"},{"location":"game/configuration/game-parameters/#tracking-error-parameters","title":"Tracking Error Parameters","text":"Parameter Default Description base_correlation 0.98 SPX-SPY correlation tracking_error_std 0.15% Daily tracking error mean_reversion_speed 5-10 ticks Convergence half-life signal_threshold 0.15% Minimum to signal"},{"location":"game/configuration/game-parameters/#order-management-parameters","title":"Order Management Parameters","text":""},{"location":"game/configuration/game-parameters/#order-limits","title":"Order Limits","text":"Role Orders/Tick Min Size Max Size Market Maker 100 1 1000 Hedge Fund 50 1 500 Arbitrage 75 1 500 Retail Flow Poisson(3) 1 50"},{"location":"game/configuration/game-parameters/#execution-parameters","title":"Execution Parameters","text":"Parameter Value Description matching_algorithm Price-Time Order priority partial_fills Enabled Allow partial execution order_expiration End of tick All orders expire self_trade Allowed Can trade with yourself"},{"location":"game/configuration/game-parameters/#scoring-parameters","title":"Scoring Parameters","text":""},{"location":"game/configuration/game-parameters/#weight-distribution","title":"Weight Distribution","text":"Component Weight Description Quantitative Performance 70% P&amp;L, risk metrics Qualitative Factors 30% Code, research, teamwork"},{"location":"game/configuration/game-parameters/#penalty-thresholds","title":"Penalty Thresholds","text":"Violation Threshold Penalty Minor Position Breach &lt;10% over -5% score Major Position Breach 10-25% over -15% score Severe Position Breach &gt;25% over -30% score Quote Uptime Failure &lt;80% Graduated penalties"},{"location":"game/configuration/game-parameters/#adjustable-parameters","title":"Adjustable Parameters","text":""},{"location":"game/configuration/game-parameters/#dynamic-adjustments","title":"Dynamic Adjustments","text":"<p>Some parameters may be adjusted during the game:</p> <ul> <li>Volatility regime probabilities</li> <li>Event frequencies</li> <li>Signal accuracies</li> <li>Fee structures</li> </ul>"},{"location":"game/configuration/game-parameters/#fixed-parameters","title":"Fixed Parameters","text":"<p>These remain constant throughout:</p> <ul> <li>Position limits</li> <li>Role constraints</li> <li>Tick duration</li> <li>Scoring weights</li> </ul>"},{"location":"game/configuration/game-parameters/#configuration-file-format","title":"Configuration File Format","text":"<p>See Example Configuration for a complete configuration file showing all parameters and their relationships.</p>"},{"location":"game/fundamentals/core-concepts/","title":"Core Concepts","text":"<p>Understanding these fundamental concepts is essential for success in the Intern Trading Game.</p>"},{"location":"game/fundamentals/core-concepts/#market-participants","title":"Market Participants","text":""},{"location":"game/fundamentals/core-concepts/#trading-desks","title":"Trading Desks","text":"<p>Each intern team operates as one of three specialized trading desks:</p> <ul> <li>Market Makers: Provide liquidity by continuously quoting bid/ask prices</li> <li>Hedge Funds: Take directional or volatility positions using signals</li> <li>Arbitrage Desks: Exploit price discrepancies between SPX and SPY</li> </ul>"},{"location":"game/fundamentals/core-concepts/#retail-flow","title":"Retail Flow","text":"<p>Automated simulation adds realistic retail trading patterns, market noise, and liquidity.</p>"},{"location":"game/fundamentals/core-concepts/#key-trading-terms","title":"Key Trading Terms","text":""},{"location":"game/fundamentals/core-concepts/#order-types","title":"Order Types","text":"<ul> <li>Limit Order: Buy/sell at a specific price or better</li> <li>Market Order: Buy/sell immediately at best available price</li> <li>Quote: Simultaneous bid and ask (market makers only)</li> </ul>"},{"location":"game/fundamentals/core-concepts/#market-mechanics","title":"Market Mechanics","text":"<ul> <li>Bid: Price at which someone is willing to buy</li> <li>Ask: Price at which someone is willing to sell</li> <li>Spread: Difference between bid and ask prices</li> <li>Tick: 5-minute interval when new prices are generated</li> </ul>"},{"location":"game/fundamentals/core-concepts/#options-terminology","title":"Options Terminology","text":"<ul> <li>Strike Price: Price at which option can be exercised</li> <li>Expiration: Date when option expires</li> <li>European Style: Can only be exercised at expiration</li> <li>Call Option: Right to buy at strike price</li> <li>Put Option: Right to sell at strike price</li> </ul>"},{"location":"game/fundamentals/core-concepts/#information-flow","title":"Information Flow","text":""},{"location":"game/fundamentals/core-concepts/#market-data","title":"Market Data","text":"<p>All participants receive:</p> <ul> <li>Current bid/ask prices for all instruments</li> <li>Last trade prices and volumes</li> <li>Order book depth (top 5 levels)</li> <li>Historical tick data</li> </ul>"},{"location":"game/fundamentals/core-concepts/#news-events","title":"News Events","text":"<p>Published every 1-4 hours with known probability impacts:</p> <ul> <li>May trigger volatility regime changes</li> <li>May cause price jumps</li> <li>Create trading opportunities</li> </ul>"},{"location":"game/fundamentals/core-concepts/#alpha-signals","title":"Alpha Signals","text":"<p>Role-specific information advantages:</p> <ul> <li>Hedge Funds: Advance volatility regime warnings</li> <li>Arbitrage Desks: SPX-SPY tracking error signals</li> <li>Market Makers: Must infer from price action</li> </ul>"},{"location":"game/fundamentals/core-concepts/#risk-management","title":"Risk Management","text":""},{"location":"game/fundamentals/core-concepts/#position-limits","title":"Position Limits","text":"<p>Each role has specific constraints:</p> <ul> <li>Maximum positions per instrument</li> <li>Total portfolio limits</li> <li>Inventory management requirements</li> </ul>"},{"location":"game/fundamentals/core-concepts/#performance-metrics","title":"Performance Metrics","text":"<ul> <li>P&amp;L</li> <li>Role-specific KPIs</li> <li>Strategy effectiveness</li> </ul>"},{"location":"game/fundamentals/core-concepts/#next-steps","title":"Next Steps","text":"<p>With these concepts understood, explore:</p> <ul> <li>Market Structure - Detailed instrument specifications</li> <li>Game Mechanics - How the simulation operates</li> <li>Your specific role documentation</li> </ul>"},{"location":"game/fundamentals/game-mechanics/","title":"Game Mechanics","text":""},{"location":"game/fundamentals/game-mechanics/#tick-based-simulation","title":"Tick-Based Simulation","text":"<p>The game operates on a tick-based system where market state updates every 5 minutes.</p>"},{"location":"game/fundamentals/game-mechanics/#tick-lifecycle","title":"Tick Lifecycle","text":"<pre><code>T+0:00    Price Generation &amp; News Publication\nT+0:30    Order Window Opens (HARD START)\nT+3:00    Order Window Closes (HARD CUTOFF)\nT+3:30    Matching &amp; Execution\nT+4:00    Results Published\nT+5:00    Next Tick Begins\n</code></pre> <p>Critical Timing:</p> <ul> <li>Orders submitted before T+0:30 are rejected</li> <li>Orders submitted after T+3:00 are rejected</li> <li>No modifications allowed after submission</li> <li>All timestamps are server-side (no client clock issues)</li> </ul>"},{"location":"game/fundamentals/game-mechanics/#what-happens-each-tick","title":"What Happens Each Tick","text":"<p>1. Price Generation</p> <ul> <li>New underlying prices calculated using geometric Brownian motion</li> <li>Volatility regime determines price movement magnitude</li> <li>SPY price derived from SPX with noise and lag</li> </ul> <p>2. News &amp; Events</p> <ul> <li>News headlines published (if any)</li> <li>May trigger volatility regime changes</li> <li>Some participants receive advance signals</li> </ul> <p>3. Order Collection</p> <ul> <li>Bots read market data and signals</li> <li>Submit orders based on strategy</li> <li>All orders timestamped and queued</li> </ul> <p>4. Order Matching</p> <ul> <li>Price-time priority matching</li> <li>Crossed orders execute immediately</li> <li>Partial fills allowed</li> </ul> <p>5. Settlement</p> <ul> <li>Trades confirmed and booked</li> <li>Positions updated</li> <li>P&amp;L calculated</li> <li>Fees applied</li> </ul>"},{"location":"game/fundamentals/game-mechanics/#order-processing","title":"Order Processing","text":""},{"location":"game/fundamentals/game-mechanics/#matching-algorithm","title":"Matching Algorithm","text":"<p>Orders are matched using price-time priority:</p> <ol> <li>Best Price First: Orders offering better prices execute first</li> <li>Time Priority: Among same-priced orders, earlier orders execute first</li> <li>Pro-Rata: Large orders may be partially filled</li> </ol>"},{"location":"game/fundamentals/game-mechanics/#execution-rules","title":"Execution Rules","text":"<ul> <li>Market orders execute against best available liquidity</li> <li>Limit orders rest in book if not immediately executable</li> <li>Quotes create two-sided markets (market makers only)</li> <li>All orders expire at tick end if not filled</li> </ul>"},{"location":"game/fundamentals/game-mechanics/#trade-settlement","title":"Trade Settlement","text":"<ul> <li>Trades settle immediately (T+0)</li> <li>Positions updated in real-time</li> <li>No settlement risk or failures</li> </ul>"},{"location":"game/fundamentals/game-mechanics/#information-dissemination","title":"Information Dissemination","text":""},{"location":"game/fundamentals/game-mechanics/#public-information","title":"Public Information","text":"<p>Available to all participants:</p> <ul> <li>Current market prices</li> <li>Order book (top 5 levels)</li> <li>Trade prints</li> <li>News headlines</li> </ul>"},{"location":"game/fundamentals/game-mechanics/#private-information","title":"Private Information","text":"<p>Role-specific signals:</p> <ul> <li>Hedge Fund: Volatility regime predictions</li> <li>Arbitrage Desk: Tracking error measurements</li> <li>Market Maker: Order flow (from their own trades)</li> </ul>"},{"location":"game/fundamentals/game-mechanics/#timing-of-information","title":"Timing of Information","text":"Information Type When Published Who Sees Underlying prices Start of tick Everyone News headlines T+10 seconds Everyone Volatility signals T-60 seconds (next tick) Hedge Fund Tracking signals Start of tick Arb Desk Trade results After matching Everyone"},{"location":"game/fundamentals/game-mechanics/#bot-interaction","title":"Bot Interaction","text":""},{"location":"game/fundamentals/game-mechanics/#connection-protocol","title":"Connection Protocol","text":"<ol> <li>Authenticate with credentials</li> <li>Subscribe to market data feeds</li> <li>Receive tick notifications</li> <li>Submit orders within window</li> <li>Receive execution reports</li> </ol>"},{"location":"game/fundamentals/game-mechanics/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid orders rejected with reason</li> </ul>"},{"location":"game/fundamentals/game-mechanics/#next-steps","title":"Next Steps","text":"<ul> <li>Review Simulation Details</li> <li>Understand Trading Rules</li> <li>Begin Strategy Development</li> </ul>"},{"location":"game/fundamentals/market-structure/","title":"Market Structure","text":""},{"location":"game/fundamentals/market-structure/#tradable-instruments","title":"Tradable Instruments","text":""},{"location":"game/fundamentals/market-structure/#underlyings","title":"Underlyings","text":"<p>The game features two correlated equity indices:</p> Instrument Type Typical Price Volatility Key Features SPX Index ~4,400 Moderate S&amp;P 500 Index, high dollar value SPY ETF ~440 Moderate Tracks SPX/10 with noise and lag"},{"location":"game/fundamentals/market-structure/#correlation-model","title":"Correlation Model","text":"<p>SPY is designed to track SPX with imperfections:</p> <ul> <li>Base correlation: ~0.98</li> <li>Tracking error: 0.1-0.3% daily</li> <li>Lag: 1-2 ticks</li> <li>Additional noise component</li> </ul> <p>This creates arbitrage opportunities between the two products.</p>"},{"location":"game/fundamentals/market-structure/#options","title":"Options","text":"<p>Each underlying has listed options with:</p> <p>Strike Selection</p> <ul> <li>Sufficient strikes to cover \u00b130% moves</li> <li>Ensures all delta ranges (0.05 to 0.95) are tradeable</li> <li> <p>Typical setup for SPX at 4400:</p> </li> <li> <p>Downside: 3080, 3300, 3520, 3740, 3960, 4180</p> </li> <li>ATM area: 4290, 4400, 4510</li> <li>Upside: 4620, 4840, 5060, 5280, 5500, 5720</li> <li>Similar proportional coverage for SPY</li> </ul> <p>Expirations</p> <ul> <li>Weekly expirations only</li> <li>Typically 4-6 weeks available at any time</li> <li>Rolling weekly cycle</li> </ul> <p>Option Style</p> <ul> <li>European exercise only</li> <li>Cash settlement at expiration</li> <li>Standard multiplier (100 for SPY, 100 for SPX)</li> </ul>"},{"location":"game/fundamentals/market-structure/#order-book-structure","title":"Order Book Structure","text":""},{"location":"game/fundamentals/market-structure/#price-levels","title":"Price Levels","text":"<ul> <li>Top 5 bid/ask levels visible</li> <li>Price-time priority matching</li> <li>Minimum tick size: $0.01</li> </ul>"},{"location":"game/fundamentals/market-structure/#order-types-supported","title":"Order Types Supported","text":"Order Type Description Available To Limit Order Specify exact price All roles Market Order Execute at best price All roles Quote Simultaneous bid/ask Market Makers only"},{"location":"game/fundamentals/market-structure/#fee-structure","title":"Fee Structure","text":"<p>Fees vary by role and order type:</p> Role Maker Fee Taker Fee Market Maker +$0.02 -$0.01 Hedge Fund +$0.01 -$0.02 Arbitrage Desk +$0.01 -$0.02 Retail -$0.01 -$0.03"},{"location":"game/fundamentals/market-structure/#trading-sessions","title":"Trading Sessions","text":""},{"location":"game/fundamentals/market-structure/#trading-schedule","title":"Trading Schedule","text":"<ul> <li>Trading Days: Tuesday and Thursday only</li> <li>Trading Hours: 9:30 AM - 3:00 PM Central Time</li> <li>Ticks: Every 5 minutes during trading hours (66 per day)</li> <li>Non-Trading Days: Monday (prep), Wednesday (analysis), Friday (retrospective)</li> </ul>"},{"location":"game/fundamentals/market-structure/#order-submission-window","title":"Order Submission Window","text":"<ul> <li>2-3 minutes per tick</li> <li>All orders collected simultaneously</li> <li>Batch processing at tick close</li> </ul>"},{"location":"game/fundamentals/market-structure/#market-data-feed","title":"Market Data Feed","text":""},{"location":"game/fundamentals/market-structure/#real-time-data","title":"Real-Time Data","text":"<p>Each tick provides:</p> <ul> <li>Current bid/ask for all instruments</li> <li>Last trade price and size</li> <li>Order book depth (5 levels)</li> </ul>"},{"location":"game/fundamentals/market-structure/#historical-data","title":"Historical Data","text":"<ul> <li>All previous tick snapshots</li> <li>Complete trade history</li> <li>Position tracking</li> </ul>"},{"location":"game/fundamentals/market-structure/#next-steps","title":"Next Steps","text":"<ul> <li>Understand Game Mechanics</li> <li>Review Trading Constraints</li> <li>Study your Role Requirements</li> </ul>"},{"location":"game/roles/","title":"Trading Roles","text":"<p>Choose your role to see detailed documentation:</p> <ul> <li>Market Maker - Quote continuously, earn enhanced rebates</li> <li>Hedge Fund - Trade volatility with advance regime signals</li> <li>Arbitrage Desk - Capture SPX-SPY convergence with tracking signals</li> </ul> <p>For a detailed comparison, see the roles overview.</p>"},{"location":"game/roles/arbitrage-desk/","title":"Role: Arbitrage Desk","text":""},{"location":"game/roles/arbitrage-desk/#one-line-mission","title":"One-Line Mission","text":"<p>Spot pricing mismatches between SPX and SPY, capturing small, consistent profits as prices converge.</p>"},{"location":"game/roles/arbitrage-desk/#1-role-details","title":"1. Role Details","text":"<ul> <li>Signal Access: Instant SPX\u2013SPY tracking-error signal with 80% accuracy (e.g., \"SPY overpriced vs SPX by 0.15\").</li> <li> <p>Fees/Incentives:</p> </li> <li> <p>Standard Maker Rebate: +$0.01 per filled side.</p> </li> <li>Standard Taker Fee: -$0.02 per executed contract.</li> <li>Extra Points: Scoring bonus for successful round-trip trades that net out risk.</li> <li> <p>Constraints:</p> </li> <li> <p>SPX and SPY positions must be roughly balanced (within 2:1 ratio).</p> </li> <li>Position limits: Maximum 100 contracts per leg of paired trades.</li> <li> <p>Scoring Focus:</p> </li> <li> <p>Signal P&amp;L: Profit/loss when trading on tracking error signals</p> </li> <li>Balance Ratio: Penalty if SPX/SPY positions exceed 2:1 ratio</li> <li>Signal Response Time: Bonus for acting within 1 tick of signal</li> </ul>"},{"location":"game/roles/arbitrage-desk/#2-advantages","title":"2. Advantages","text":"<ul> <li>Signal Edge: Instantaneous tracking-error data provides early entry advantage.</li> <li>Execution Choice: Can quote passively for rebates or take aggressively when opportunity is large.</li> <li>Immediate Signals: Tracking error signal arrives instantly.</li> <li>Balanced Exposure: Paired trades limit directional risk\u2014stable, low-risk edge.</li> </ul>"},{"location":"game/roles/arbitrage-desk/#3-disadvantages","title":"3. Disadvantages","text":"<ul> <li>Balance Requirement: Must maintain balanced SPX/SPY positions within 2:1 ratio.</li> <li>Small Margins: Reliant on thin mispricings; profits per trade are minimal.</li> </ul>"},{"location":"game/roles/arbitrage-desk/#4-how-to-make-money","title":"4. How to Make Money","text":"<ol> <li> <p>Understand the Tracking-Error Signal</p> </li> <li> <p>Signal shows realized volatility divergence between SPX and SPY</p> </li> <li>E.g., \"SPY tracking error +0.15\" means SPY is moving more than expected vs SPX</li> <li> <p>In efficient markets, this realized vol difference should impact option prices</p> </li> <li> <p>Identify Option Mispricings</p> </li> <li> <p>Higher realized vol in SPY -&gt; SPY options should be priced higher</p> </li> <li>If options don't reflect this difference, arbitrage opportunity exists</li> <li> <p>Compare same-strike options between SPX and SPY</p> </li> <li> <p>Execute the Arbitrage</p> </li> <li> <p>If SPY showing excess realized vol but options equally priced:</p> <ul> <li>Buy SPY options (underpriced given higher realized vol)</li> <li>Sell SPX options (overpriced given lower realized vol)</li> <li>Maintain position balance within 2:1 ratio</li> </ul> </li> <li> <p>Capture the Convergence</p> </li> <li> <p>As market recognizes the vol difference, option prices adjust</p> </li> <li>Close both legs when pricing normalizes</li> <li>Profit from the option repricing, not underlying convergence</li> </ol>"},{"location":"game/roles/arbitrage-desk/#5-suggested-strategies","title":"5. Suggested Strategies","text":"<ul> <li>React to Signal Immediately: With 80% accuracy and instant delivery, act fast when tracking error appears</li> <li>Trade the Vol Difference: If SPY shows higher realized vol, buy SPY options and sell SPX options at same strikes</li> <li>Size Based on Signal Strength: Larger tracking errors should drive larger positions (within 2:1 limits)</li> <li>Monitor for Convergence: Close positions when either tracking error normalizes OR option prices adjust</li> <li>Use Multiple Strikes: Spread trades across different strikes to capture the full volatility surface adjustment</li> </ul>"},{"location":"game/roles/hedge-fund/","title":"Role: Hedge Fund","text":""},{"location":"game/roles/hedge-fund/#one-line-mission","title":"One-Line Mission","text":"<p>Keep implied volatility aligned with realized volatility by trading gamma before regime changes.</p>"},{"location":"game/roles/hedge-fund/#1-role-details","title":"1. Role Details","text":"<ul> <li> <p>Signal Access:</p> </li> <li> <p>Receives advance warning a configurable number of ticks before news events</p> </li> <li> <p>Signal includes:</p> <ul> <li>Regime Change Prediction: Whether the news event will trigger a volatility regime change</li> <li>Probability Transition Matrix: Shows transition probabilities from current state to next state</li> <li>Three Volatility States: Low vol, medium vol, and high vol (all configurable)</li> <li>Signal Accuracy: Configurable (e.g., 66% accuracy means signal is correct 66% of the time)</li> <li>Signal timing is configurable (e.g., arrives 2 ticks before the actual news event)</li> <li>Fees/Incentives:</li> </ul> </li> <li> <p>Standard Maker Rebate: +$0.01 per filled side (on single-sided limit orders).</p> </li> <li>Standard Taker Fee: -$0.02 per executed contract.</li> <li>Position Limits: Maximum 150 contracts per option, 500 total across all options.</li> <li>Fee Structure: Standard fees (no enhanced rebates like Market Makers).</li> <li> <p>Constraints:</p> </li> <li> <p>No Market Making: Cannot quote two-sided markets (no simultaneous bid and ask).</p> </li> <li>Can only place single-sided limit orders or market orders.</li> <li>Position limits: 150 per option, 500 total options, 200 underlying contracts.</li> <li>Delta Neutrality: Must maintain portfolio delta within \u00b150 deltas at each tick.</li> <li>Rehedging Required: Must adjust underlying position when delta exceeds limits.</li> <li> <p>Scoring Focus:</p> </li> <li> <p>Window P&amp;L: Total profit/loss from event to event (complete regime cycles)</p> </li> <li>Rehedging Profits: P&amp;L specifically from delta hedging trades</li> <li>Delta Penalty: Deduction for exceeding \u00b150 delta limit per tick</li> </ul>"},{"location":"game/roles/hedge-fund/#2-advantages","title":"2. Advantages","text":"<ul> <li>Execution Flexibility: Can use limit orders for better fills or market orders for immediacy.</li> <li> <p>Signal Edge: Gets advance warning before news events with:</p> </li> <li> <p>Regime change predictions</p> </li> <li>Full probability transition matrix between volatility states</li> <li>Configurable lead time to position before the market reacts</li> <li>No Quoting Obligation: Unlike Market Makers, free to trade opportunistically without coverage requirements.</li> <li>Strategy Flexibility: Can run directional bets, volatility trades (straddles/strangles), or cross-product spreads (using single-sided orders).</li> <li>Alpha Potential: High upside if signal accuracy is leveraged correctly; signal accuracy is tunable for game balance.</li> </ul>"},{"location":"game/roles/hedge-fund/#3-disadvantages","title":"3. Disadvantages","text":"<ul> <li>Signal Accuracy: Signal is not perfect\u2014accuracy is configurable (e.g., 66% correct).</li> <li>Standard Fee Structure: Only standard fees (+$0.01 maker / -$0.02 taker) vs. Market Makers' enhanced rates.</li> <li>No Market Making: Cannot quote two-sided markets, limiting ability to capture spreads.</li> <li>Position Limits: Hard limits prevent excessive positions (150 per option, 500 total).</li> <li>Complexity: Must research and implement multiple strategies (volatility, direction, spreads).</li> <li>Single-Sided Only: Restricted to single-sided limit orders or market orders.</li> <li>Risk Management: Must handle false signals appropriately to avoid losses.</li> </ul>"},{"location":"game/roles/hedge-fund/#4-how-to-make-money","title":"4. How to Make Money","text":"<ol> <li>Understand Your Edge</li> <li>You know when realized volatility will change (with advance warning)</li> <li>Your job: ensure implied volatility reflects upcoming realized volatility</li> <li> <p>Profit by trading gamma before the regime change occurs</p> </li> <li> <p>Trade Based on Regime Direction</p> </li> <li>Low to High Vol: Buy options now, gamma scalp during high vol period</li> <li>High to Low Vol: Sell options now, collect premium as vol normalizes</li> <li> <p>Between events, realized vol stabilizes at new level</p> </li> <li> <p>Gamma Trading Strategy</p> </li> <li>Long Gamma (bought options): Must rehedge as underlying moves - buy low, sell high</li> <li>Short Gamma (sold options): Must rehedge to stay neutral - sell high, buy low</li> <li>Delta Constraint: \u00b150 delta limit forces continuous rehedging</li> <li> <p>Your advance signal lets you position gamma before others adjust IV</p> </li> <li> <p>Event-to-Event Windows</p> </li> <li>Each regime lasts from one news event to the next</li> <li>Realized vol normalizes quickly after regime change</li> <li>Performance measured over these complete windows</li> </ol>"},{"location":"game/roles/hedge-fund/#5-suggested-strategies","title":"5. Suggested Strategies","text":"<ul> <li>Gamma Positioning: Long gamma before high vol periods, short gamma before low vol</li> <li>Delta-Neutral Entry: Start with straddles/strangles to isolate volatility exposure</li> <li>Active Rehedging: In high vol, rehedge frequently to capture gamma profits</li> <li>Premium Collection: In low vol, focus on theta decay from sold options</li> <li>Window-Based P&amp;L: Measure success over complete event-to-event cycles</li> </ul>"},{"location":"game/roles/market-maker/","title":"Role: Market Maker","text":""},{"location":"game/roles/market-maker/#one-line-mission","title":"One-Line Mission","text":"<p>Quote fair, tight spreads and profit on every fill\u2014while managing inventory within strict limits.</p>"},{"location":"game/roles/market-maker/#1-role-details","title":"1. Role Details","text":"<ul> <li>Signal Access: None.</li> <li> <p>Fees/Incentives:</p> </li> <li> <p>Enhanced Maker Rebate: +$0.02 per filled side.</p> </li> <li>Reduced Taker Fee: -$0.01 per contract.</li> <li>Competitive Advantage: Enhanced fee structure vs. other roles (+$0.02 maker vs. +$0.01 for HF/Arb).</li> <li> <p>Constraints:</p> </li> <li> <p>Must quote \u2265 80 % of instruments across BOTH SPX and SPY each tick.</p> </li> <li>Inventory limits: Maximum \u00b150 net contracts per product (SPX/SPY).</li> <li>Must provide two-sided quotes (bid and ask) on each instrument.</li> <li> <p>Scoring Focus:</p> </li> <li> <p>Fee Revenue: Net maker rebates minus taker fees per tick</p> </li> <li>Quote Coverage: Percentage of required instruments quoted (must be \u2265 80%)</li> <li>Inventory Penalty: Deduction for positions exceeding \u00b150 limit</li> </ul>"},{"location":"game/roles/market-maker/#2-advantages","title":"2. Advantages","text":"<ul> <li>Guaranteed Flow: Always in the market with posted quotes for consistent spread capture.</li> <li>Superior Fee Structure: Enhanced maker rebates (+$0.02) and reduced taker fees (-$0.01) provide significant cost advantage.</li> <li>Direct Competition: Both MMs compete on same products, driving innovation and efficiency.</li> <li>Inventory Control: Can hedge to stay within position limits and minimize risk.</li> <li>Predictable Edge: Profits primarily from capturing the bid-ask spread.</li> <li>Competition Dynamics: While competing with another MM, the enhanced fee structure provides sustainable profitability.</li> </ul>"},{"location":"game/roles/market-maker/#3-disadvantages","title":"3. Disadvantages","text":"<ul> <li>No Signal Edge: Must infer volatility/direction from market data and retail flow.</li> <li>Obligation to Quote: \u2265 80 % coverage forces participation, even in adverse conditions.</li> <li>MM vs MM Competition: Direct competition with another Market Maker can compress spreads.</li> <li>Dual Product Obligation: Must maintain quotes on both SPX and SPY products simultaneously.</li> </ul>"},{"location":"game/roles/market-maker/#4-how-to-make-money","title":"4. How to Make Money","text":"<ol> <li> <p>Capture the Spread</p> </li> <li> <p>Post bid below fair value, ask above fair value</p> </li> <li>When both sides fill, you profit the spread difference</li> <li> <p>Enhanced rebates (+$0.02) boost profitability on every fill</p> </li> <li> <p>Leverage Fee Advantage</p> </li> <li> <p>You get +\\(0.02 maker rebate vs +\\)0.01 for others</p> </li> <li>Pay only -\\(0.01 taker fee vs -\\)0.02 for others</li> <li> <p>This $0.01-0.03 edge per contract adds up quickly</p> </li> <li> <p>Manage Inventory Risk</p> </li> <li> <p>Stay within \u00b150 net position limit per product</p> </li> <li>Skew quotes to push inventory back toward neutral</li> <li> <p>Use the underlying to hedge when needed</p> </li> <li> <p>Quote Smart, Not Wide</p> </li> <li> <p>Tighter spreads attract more volume (more rebates)</p> </li> <li>But spreads must cover adverse selection risk</li> <li>Balance volume vs risk for optimal profitability</li> </ol>"},{"location":"game/roles/market-maker/#5-suggested-strategies","title":"5. Suggested Strategies","text":"<ul> <li>Dynamic Spread Sizing: Widen spreads when volatility increases or inventory builds</li> <li>Retail Flow Focus: Retail orders often cross the spread - your fee advantage makes these profitable</li> <li>Quote Skewing: If long 30 contracts, lower your offers and raise your bids to reduce position</li> <li>Cross-Product Balance: Monitor combined SPX+SPY exposure, not just individual products</li> <li>Compete on Volume: Your fee edge means you can quote tighter than the other MM and still profit</li> </ul>"},{"location":"game/roles/overview/","title":"Trading Roles Overview","text":""},{"location":"game/roles/overview/#role-comparison","title":"Role Comparison","text":"<p>Each team is assigned one of three primary trading roles, each with unique advantages, constraints, and performance metrics.</p>"},{"location":"game/roles/overview/#quick-comparison-table","title":"Quick Comparison Table","text":"Aspect Market Maker Hedge Fund Arbitrage Desk Primary Goal Provide liquidity Align IV with RV Capture mispricings Key Advantage +$0.02 maker rebate Volatility signals Tracking error signals Main Constraint 80% quote uptime \u00b150 delta limit Maintain paired trades Position Limits \u00b150 per option 150 per option 100 per option Order Types All (quotes required) Limit/Market only Limit/Market only Products SPX &amp; SPY options SPX &amp; SPY options SPX &amp; SPY options Risk Profile Inventory risk Gamma risk Convergence risk"},{"location":"game/roles/overview/#role-descriptions","title":"Role Descriptions","text":""},{"location":"game/roles/overview/#market-maker","title":"Market Maker","text":"<p>Mission: Continuously provide two-sided quotes to ensure market liquidity</p> <p>Market makers are the backbone of the options market, required to quote bid and ask prices at least 80% of the time. They earn enhanced rebates (+$0.02) for providing liquidity but must carefully manage inventory within tight limits (\u00b150 contracts per option).</p> <p>Best Suited For: Teams interested in high-frequency trading, automated market making, and inventory management.</p> <p>Detailed Market Maker Guide</p>"},{"location":"game/roles/overview/#hedge-fund","title":"Hedge Fund","text":"<p>Mission: Keep implied volatility aligned with realized volatility through gamma trading</p> <p>Hedge funds receive advance volatility regime signals (66% accuracy) allowing them to position gamma before regime changes. They must maintain delta neutrality (\u00b150 deltas) which forces continuous rehedging, enabling profits from gamma scalping in high vol periods or premium collection in low vol periods.</p> <p>Best Suited For: Teams interested in volatility trading, gamma scalping, and dynamic hedging strategies.</p> <p>Detailed Hedge Fund Guide</p>"},{"location":"game/roles/overview/#arbitrage-desk","title":"Arbitrage Desk","text":"<p>Mission: Exploit price discrepancies between SPX and SPY options</p> <p>Arbitrage desks receive real-time tracking error signals (80% accuracy) indicating when SPY has diverged from its theoretical relationship with SPX. They must maintain balanced positions across both products to capture convergence profits.</p> <p>Best Suited For: Teams interested in statistical arbitrage, pairs trading, and market-neutral strategies.</p> <p>Detailed Arbitrage Desk Guide</p>"},{"location":"game/roles/retail/","title":"Retail Flow Simulation","text":""},{"location":"game/roles/retail/#overview","title":"Overview","text":"<p>The Retail Flow represents automated, random trading activity that simulates typical retail investor behavior. This configurable system generates realistic market noise, liquidity, and trading patterns without human participation.</p>"},{"location":"game/roles/retail/#purpose","title":"Purpose","text":"<p>Retail flow simulation serves critical market functions:</p> <ul> <li>Creates realistic order flow patterns</li> <li>Adds liquidity at various price levels</li> <li>Generates market noise and unpredictability</li> <li>Simulates behavioral biases common in retail trading</li> <li>Makes the market more challenging and realistic</li> </ul>"},{"location":"game/roles/retail/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"game/roles/retail/#order-generation","title":"Order Generation","text":"<p>Frequency Distribution <pre><code>retail:\n  orders_per_tick:\n    distribution: \"poisson\"\n    mean: 3\n    max: 10\n\n  inter_arrival_time:\n    distribution: \"exponential\"\n    lambda: 0.5  # Average 2 orders per minute within tick\n</code></pre></p> <p>Order Size Distribution <pre><code>  order_size:\n    distribution: \"exponential\"\n    mean: 5\n    min: 1\n    max: 50\n    round_to: 5  # Round to nearest 5 lots\n</code></pre></p>"},{"location":"game/roles/retail/#directional-bias","title":"Directional Bias","text":"<p>Buy/Sell Ratio <pre><code>  directional_bias:\n    base_buy_probability: 0.50  # Equal buy/sell probability\n</code></pre></p>"},{"location":"game/roles/retail/#product-selection-bias","title":"Product Selection Bias","text":"<p>Put/Call Skew <pre><code>  product_selection:\n    call_probability: 0.60  # Retail typically bullish\n    otm_preference: 0.70   # Prefer out-of-money\n    weekly_preference: 0.80 # Prefer near-term expiry\n\n  strike_selection:\n    distribution: \"normal\"\n    mean: \"current_price\"\n    stdev_percent: 2.0  # How far OTM to go\n    skew_factor: 1.5    # Prefer OTM calls\n</code></pre></p>"},{"location":"game/roles/retail/#order-flow-characteristics","title":"Order Flow Characteristics","text":""},{"location":"game/roles/retail/#implementation-details","title":"Implementation Details","text":""},{"location":"game/roles/retail/#order-type-mix","title":"Order Type Mix","text":"<pre><code>  order_types:\n    market_orders: 0.40  # Retail uses more market orders\n    limit_orders: 0.60\n\n  limit_order_pricing:\n    aggressive: 0.30  # At or through market\n    passive: 0.50     # Behind market\n    far: 0.20         # Far from market\n</code></pre>"},{"location":"game/roles/retail/#position-management","title":"Position Management","text":"<pre><code>  position_behavior:\n    max_position: 50\n    close_probability: 0.05  # Per tick\n    hold_duration:\n      distribution: \"exponential\"\n      mean_ticks: 20\n    stop_loss: null  # Retail rarely uses stops\n</code></pre>"},{"location":"game/roles/retail/#statistical-properties","title":"Statistical Properties","text":""},{"location":"game/roles/retail/#expected-characteristics","title":"Expected Characteristics","text":"<p>Volume Distribution</p> <ul> <li>Daily volume: 100-500 contracts</li> <li>Peak hours: 2-3x average</li> <li>Quiet periods: 0.5x average</li> </ul> <p>Price Impact</p> <ul> <li>Individual orders: Minimal</li> <li>Cumulative effect: Can move markets in trends</li> <li>Correlation with volatility: Positive</li> </ul>"},{"location":"game/roles/retail/#configuration-examples","title":"Configuration Examples","text":""},{"location":"game/roles/retail/#basic-configuration","title":"Basic Configuration","text":"<pre><code>retail:\n  orders_per_tick:\n    distribution: \"poisson\"\n    mean: 3\n  order_size:\n    distribution: \"exponential\"\n    mean: 5\n  call_probability: 0.60  # Slight bullish bias\n  buy_probability: 0.50   # Balanced buy/sell\n  market_order_percent: 0.40  # Mix of order types\n</code></pre>"},{"location":"game/roles/retail/#monitoring-and-metrics","title":"Monitoring and Metrics","text":""},{"location":"game/roles/retail/#key-metrics-tracked","title":"Key Metrics Tracked","text":"<ul> <li>Orders per tick (mean, std dev)</li> <li>Size distribution</li> <li>Product mix (calls vs puts)</li> <li>Directional bias over time</li> <li>P&amp;L (for realism check)</li> </ul>"},{"location":"game/roles/retail/#calibration-goals","title":"Calibration Goals","text":"<ul> <li>Realistic volume: 5-15% of total</li> <li>No systematic profit/loss</li> <li>Natural-looking flow</li> <li>Appropriate randomness</li> </ul>"},{"location":"game/roles/retail/#impact-on-market","title":"Impact on Market","text":""},{"location":"game/roles/retail/#for-market-makers","title":"For Market Makers","text":"<ul> <li>Additional flow to capture</li> </ul>"},{"location":"game/roles/retail/#for-hedge-funds","title":"For Hedge Funds","text":"<ul> <li>Noise to filter out</li> </ul>"},{"location":"game/roles/retail/#for-arbitrage-desks","title":"For Arbitrage Desks","text":"<ul> <li>Noise to filter out</li> </ul>"},{"location":"game/scoring/overview/","title":"Scoring &amp; Evaluation Overview","text":""},{"location":"game/scoring/overview/#scoring-philosophy","title":"Scoring Philosophy","text":"<p>Teams are evaluated on both quantitative performance and qualitative factors. Each role has distinct KPIs that reflect their unique constraints and objectives. Success requires not just profitability, but also adherence to role requirements and demonstration of learning.</p>"},{"location":"game/scoring/overview/#scoring-components","title":"Scoring Components","text":""},{"location":"game/scoring/overview/#quantitative-metrics-70","title":"Quantitative Metrics (70%)","text":"Component Weight Description Primary KPIs 40% Role-specific performance metrics Position Compliance 15% Adherence to position limits Risk Management 15% Drawdown control, volatility management"},{"location":"game/scoring/overview/#qualitative-factors-30","title":"Qualitative Factors (30%)","text":"Component Weight Description Research Quality 15% Backtesting, analysis, insights Code &amp; Documentation 10% Implementation quality Team Collaboration 5% Effective teamwork"},{"location":"game/scoring/overview/#role-specific-evaluation","title":"Role-Specific Evaluation","text":"<p>Each role is scored on different primary KPIs that align with their trading mandate:</p>"},{"location":"game/scoring/overview/#market-maker-focus","title":"Market Maker Focus","text":"<ul> <li>Spread capture efficiency</li> <li>Quote uptime (\u226580% required)</li> <li>Volume share</li> <li>Inventory turnover</li> </ul>"},{"location":"game/scoring/overview/#hedge-fund-focus","title":"Hedge Fund Focus","text":"<ul> <li>Total P&amp;L generation</li> <li>Signal utilization effectiveness</li> <li>Volatility edge capture</li> </ul>"},{"location":"game/scoring/overview/#arbitrage-desk-focus","title":"Arbitrage Desk Focus","text":"<ul> <li>Convergence trade profitability</li> <li>Signal response efficiency</li> <li>Paired trade maintenance</li> <li>Risk-neutral performance</li> </ul>"},{"location":"game/simulation/correlation-model/","title":"SPX-SPY Correlation Model","text":""},{"location":"game/simulation/correlation-model/#relationship-overview","title":"Relationship Overview","text":"<p>SPY is designed to track SPX but with realistic imperfections that create trading opportunities. Understanding this relationship is crucial for all participants, especially arbitrage desks.</p>"},{"location":"game/simulation/correlation-model/#base-relationship","title":"Base Relationship","text":"<pre><code>Theoretical SPY Price = SPX / 10\nActual SPY Price = Theoretical Price \u00d7 (1 + tracking_error) + noise\n</code></pre>"},{"location":"game/simulation/correlation-model/#key-parameters","title":"Key Parameters","text":"Parameter Value Description Base Ratio 10:1 SPY \u2248 SPX/10 Correlation ~0.98 High but imperfect Tracking Error 0.1-0.3% Daily deviation Lag 1-2 ticks SPY follows SPX Noise \u00b10.05% Additional randomness"},{"location":"game/simulation/correlation-model/#tracking-error-components","title":"Tracking Error Components","text":""},{"location":"game/simulation/correlation-model/#systematic-factors","title":"Systematic Factors","text":"<p>1. Execution Lag</p> <ul> <li>SPY updates 1-2 ticks after SPX moves</li> <li>Creates temporary arbitrage windows</li> <li>More pronounced during volatile periods</li> </ul>"},{"location":"game/simulation/correlation-model/#random-factors","title":"Random Factors","text":"<p>1. Microstructure Noise</p> <ul> <li>Independent random component</li> <li>Zero mean over time</li> <li>Increases intraday volatility</li> </ul>"},{"location":"game/simulation/correlation-model/#tracking-error-signal","title":"Tracking Error Signal","text":""},{"location":"game/simulation/correlation-model/#arbitrage-desk-advantage","title":"Arbitrage Desk Advantage","text":"<p>Arbitrage desks receive a proprietary signal indicating current mispricing:</p> <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"spx_price\": 4400.00,\n  \"spy_price\": 441.25,\n  \"theoretical_spy\": 440.00,\n  \"tracking_error\": 0.28,\n  \"direction\": \"SPY_OVERVALUED\",\n  \"confidence\": 0.80\n}\n</code></pre>"},{"location":"game/simulation/correlation-model/#signal-interpretation","title":"Signal Interpretation","text":"Tracking Error Magnitude Action &lt; 0.1% Negligible No trade 0.1-0.2% Small Consider if low risk 0.2-0.5% Medium Standard trade &gt; 0.5% Large High conviction"},{"location":"game/simulation/correlation-model/#signal-accuracy","title":"Signal Accuracy","text":"<ul> <li>Overall accuracy: ~80%</li> <li>False signals: Usually small magnitude</li> <li>Best in medium volatility</li> <li>Less reliable during events</li> </ul>"},{"location":"game/simulation/correlation-model/#options-arbitrage","title":"Options Arbitrage","text":""},{"location":"game/simulation/correlation-model/#cross-product-strategies","title":"Cross-Product Strategies","text":"<p>Since options exist on both underlyings:</p> <p>Relative Value</p> <ul> <li>SPX calls vs SPY calls (scaled)</li> <li>Put spread arbitrage</li> <li>Volatility surface differences</li> </ul> <p>Example Trade <pre><code>Signal: SPY overvalued by 0.3%\nAction:\n\n- Sell 10 SPY 440 calls\n- Buy 1 SPX 4400 calls\n- Hold until convergence\n</code></pre></p>"},{"location":"game/simulation/correlation-model/#risk-considerations","title":"Risk Considerations","text":"<p>Execution Risk</p> <ul> <li>Need to leg into trades</li> <li>Market impact on both sides</li> <li>Timing crucial</li> </ul> <p>Correlation Risk</p> <ul> <li>Relationship can break down</li> <li>Events cause divergence</li> <li>Position sizing important</li> </ul>"},{"location":"game/simulation/correlation-model/#next-steps","title":"Next Steps","text":"<ul> <li>Review Arbitrage Desk Role</li> <li>Study Trading Signals</li> <li>Understand Execution Rules</li> </ul>"},{"location":"game/simulation/news-events/","title":"News Events","text":""},{"location":"game/simulation/news-events/#event-system-overview","title":"Event System Overview","text":"<p>News events drive market dynamics by potentially triggering volatility regime changes, price jumps, or serving as false signals. All participants see headlines, but only some know the true impact.</p>"},{"location":"game/simulation/news-events/#event-frequency","title":"Event Frequency","text":"<ul> <li>Average: Every 1-4 hours</li> <li>Distribution: Poisson process</li> <li>Clustering: Possible during \"active\" periods</li> <li>Quiet periods: Can go 6+ hours without events</li> </ul>"},{"location":"game/simulation/news-events/#event-types","title":"Event Types","text":"Type Effect Frequency Example Regime Shifter Changes volatility state 40% \"Fed hints at tightening\" Price Jumper Immediate price move 30% \"Surprise earnings beat\" False Signal No effect 30% \"Analyst maintains rating\""},{"location":"game/simulation/news-events/#probability-tables","title":"Probability Tables","text":"<p>All participants have access to these published probabilities:</p>"},{"location":"game/simulation/news-events/#major-events","title":"Major Events","text":"News Headline Regime Shift Chance Price Jump Chance \"Fed hints at tightening\" 60% 20% \"Geopolitical tensions rise\" 70% 30% \"Major acquisition announced\" 40% 50% \"Economic data surprises\" 50% 40%"},{"location":"game/simulation/news-events/#minor-events","title":"Minor Events","text":"News Headline Regime Shift Chance Price Jump Chance \"Strong jobs report\" 40% 10% \"Earnings meet expectations\" 20% 15% \"Technical breakout observed\" 30% 25% \"Analyst upgrades sector\" 15% 10%"},{"location":"game/simulation/news-events/#neutral-events","title":"Neutral Events","text":"News Headline Regime Shift Chance Price Jump Chance \"Markets quiet ahead of data\" 5% 0% \"Trading range-bound\" 5% 5% \"No major news today\" 0% 0%"},{"location":"game/simulation/news-events/#information-asymmetry","title":"Information Asymmetry","text":""},{"location":"game/simulation/news-events/#what-everyone-sees","title":"What Everyone Sees","text":"<p>When an event occurs, all participants immediately see:</p> <ul> <li>News headline text</li> <li>Timestamp</li> <li>Historical probability table</li> </ul> <p>Example broadcast: <pre><code>[T+0:10] NEWS: \"Fed hints at tightening\"\n</code></pre></p>"},{"location":"game/simulation/news-events/#what-hedge-funds-see","title":"What Hedge Funds See","text":"<p>With their volatility signal, hedge funds also receive:</p> <ul> <li>Actual outcome (regime shift: yes/no)</li> <li>New regime (if changing)</li> <li>Advance timing (1-5 ticks early)</li> </ul> <p>Example signal: <pre><code>{\n  \"event\": \"Fed hints at tightening\",\n  \"regime_shift\": true,\n  \"new_regime\": \"high\",\n  \"current_regime\": \"medium\",\n  \"ticks_until_effect\": 2\n}\n</code></pre></p>"},{"location":"game/simulation/news-events/#market-maker-challenge","title":"Market Maker Challenge","text":"<p>Market makers must:</p> <ul> <li>React only to the headline</li> <li>Use probability tables</li> <li>Infer actual impact from price action</li> <li>Adjust quotes defensively</li> </ul>"},{"location":"game/simulation/news-events/#event-impact-mechanics","title":"Event Impact Mechanics","text":""},{"location":"game/simulation/news-events/#regime-shift-events","title":"Regime Shift Events","text":"<p>When a regime shift occurs:</p> <ol> <li>Current tick continues in old regime</li> <li>Transition happens at tick boundary</li> <li>New regime persists until next event</li> <li>Minimum duration before next shift</li> </ol>"},{"location":"game/simulation/news-events/#price-jump-events","title":"Price Jump Events","text":"<p>Immediate price impacts:</p> <ul> <li>Magnitude: 0.5-2.0% move</li> <li>Direction: Correlated with news sentiment</li> <li>SPY follows with lag and noise</li> <li>Options reprice instantly</li> </ul>"},{"location":"game/simulation/news-events/#false-signals","title":"False Signals","text":"<p>No actual market impact:</p> <ul> <li>Tests participant reaction</li> <li>Can trigger overtrading</li> <li>Reveals strategy robustness</li> </ul>"},{"location":"game/simulation/news-events/#next-steps","title":"Next Steps","text":"<ul> <li>Study Correlation Model for arbitrage</li> <li>Review Trading Signals</li> <li>Understand role-specific strategies in Roles</li> </ul>"},{"location":"game/simulation/price-generation/","title":"Price Generation","text":""},{"location":"game/simulation/price-generation/#underlying-price-movement","title":"Underlying Price Movement","text":"<p>The simulation generates realistic price paths using geometric Brownian motion (GBM) with regime-switching volatility.</p>"},{"location":"game/simulation/price-generation/#base-model","title":"Base Model","text":"<p>For each tick, the price evolution follows:</p> <pre><code>S(t+1) = S(t) \u00d7 exp((\u03bc - \u03c3\u00b2/2)\u0394t + \u03c3\u221a\u0394t \u00d7 Z)\n</code></pre> <p>Where:</p> <ul> <li>S(t) = Current price</li> <li>\u03bc = Drift (typically small or zero)</li> <li>\u03c3 = Volatility (depends on regime)</li> <li>\u0394t = Time increment (5 minutes)</li> <li>Z = Standard normal random variable</li> </ul>"},{"location":"game/simulation/price-generation/#spx-price-generation","title":"SPX Price Generation","text":"<p>SPX serves as the primary underlying:</p> <ul> <li>Starting price: ~4,400</li> <li>Tick-to-tick moves based on current volatility regime</li> <li>Trading Tuesday &amp; Thursday only (9:30 AM - 3:00 PM CT)</li> <li>Price evolution continues only during trading hours</li> </ul>"},{"location":"game/simulation/price-generation/#spy-price-derivation","title":"SPY Price Derivation","text":"<p>SPY tracks SPX with intentional imperfections:</p> <pre><code>SPY(t) = SPX(t)/10 \u00d7 (1 + \u03b5) + \u03b7\n</code></pre> <p>Where:</p> <ul> <li>Base ratio: SPX/10</li> <li>\u03b5 = Tracking error component (~0.1-0.3%)</li> <li>\u03b7 = Additional noise term</li> <li>1-2 tick lag in following SPX moves</li> </ul> <p>This creates arbitrage opportunities when SPY diverges from its theoretical value.</p>"},{"location":"game/simulation/price-generation/#volatility-regimes","title":"Volatility Regimes","text":""},{"location":"game/simulation/price-generation/#three-volatility-states","title":"Three Volatility States","text":"Regime Annualized Vol Daily Std Dev Typical 5-min Move Low ~10% 0.63% \u00b10.04% Medium ~20% 1.26% \u00b10.09% High ~50% 3.15% \u00b10.22%"},{"location":"game/simulation/price-generation/#regime-persistence","title":"Regime Persistence","text":"<ul> <li>Regimes typically persist for multiple ticks</li> <li>Average duration: 20-100 ticks</li> <li>Sudden changes possible due to news events</li> </ul>"},{"location":"game/simulation/price-generation/#transition-mechanics","title":"Transition Mechanics","text":"<p>Regime changes occur through:</p> <ol> <li>Scheduled transitions: Natural regime evolution</li> <li>Event-driven shifts: News triggers with known probabilities</li> <li>Random switches: Small probability each tick</li> </ol>"},{"location":"game/simulation/price-generation/#price-jump-events","title":"Price Jump Events","text":""},{"location":"game/simulation/price-generation/#discrete-jumps","title":"Discrete Jumps","text":"<p>Occasionally, prices experience discrete jumps:</p> <ul> <li>Magnitude: 0.5-2.0% instantaneous moves</li> <li>Frequency: 1-2 per day on average</li> <li>Can be positive or negative</li> </ul>"},{"location":"game/simulation/price-generation/#jump-triggers","title":"Jump Triggers","text":"<ul> <li>Major news events</li> <li>Volatility regime changes</li> <li>Random occurrences</li> </ul>"},{"location":"game/simulation/price-generation/#next-steps","title":"Next Steps","text":"<ul> <li>Understand Volatility Regimes in detail</li> <li>Learn about News Events and their impacts</li> <li>Study SPX-SPY Correlation</li> </ul>"},{"location":"game/simulation/volatility-regimes/","title":"Volatility Regimes","text":""},{"location":"game/simulation/volatility-regimes/#understanding-volatility-states","title":"Understanding Volatility States","text":"<p>The market operates in one of three volatility regimes at any time, fundamentally affecting price movements and option values.</p>"},{"location":"game/simulation/volatility-regimes/#regime-characteristics","title":"Regime Characteristics","text":"Regime Market Condition Price Behavior Option Impacts Low Calm markets Small, predictable moves Low option premiums Medium Normal trading Moderate fluctuations Fair option values High Stressed/uncertain Large, erratic moves Expensive options"},{"location":"game/simulation/volatility-regimes/#detailed-parameters","title":"Detailed Parameters","text":"<p>Low Volatility (\u03c3 \u2248 0.1)</p> <ul> <li>Annualized: 10%</li> <li>Daily moves: \u00b10.5-1%</li> <li>5-minute moves: \u00b10.04%</li> <li>Typical duration: 50-200 ticks</li> </ul> <p>Medium Volatility (\u03c3 \u2248 0.2)</p> <ul> <li>Annualized: 20%</li> <li>Daily moves: \u00b11-2%</li> <li>5-minute moves: \u00b10.09%</li> <li>Typical duration: 30-100 ticks</li> </ul> <p>High Volatility (\u03c3 \u2248 0.5)</p> <ul> <li>Annualized: 50%</li> <li>Daily moves: \u00b13-5%</li> <li>5-minute moves: \u00b10.22%</li> <li>Typical duration: 10-50 ticks</li> </ul>"},{"location":"game/simulation/volatility-regimes/#regime-transitions","title":"Regime Transitions","text":""},{"location":"game/simulation/volatility-regimes/#natural-evolution","title":"Natural Evolution","text":"<p>Regimes follow a Markov process with transition probabilities:</p> <pre><code>From\\To   Low    Medium   High\nLow       0.95   0.04     0.01\nMedium    0.02   0.94     0.04\nHigh      0.01   0.09     0.90\n</code></pre>"},{"location":"game/simulation/volatility-regimes/#event-triggered-changes","title":"Event-Triggered Changes","text":"<p>News events can force regime transitions:</p> <ul> <li>Override natural transition probabilities</li> <li>Immediate effect at next tick</li> <li>Known probabilities (see News Events)</li> </ul>"},{"location":"game/simulation/volatility-regimes/#transition-patterns","title":"Transition Patterns","text":"<p>Common patterns observed:</p> <ul> <li>Low to Medium: Gradual uncertainty increase</li> <li>Medium to High: Sudden market stress</li> <li>High to Medium: Volatility normalization</li> <li>Direct Low/High: Rare but possible</li> </ul>"},{"location":"game/simulation/volatility-regimes/#volatility-signals","title":"Volatility Signals","text":""},{"location":"game/simulation/volatility-regimes/#hedge-fund-advantage","title":"Hedge Fund Advantage","text":"<p>Hedge funds receive advance warning of regime changes:</p> <ul> <li>Timing: 1-5 ticks before transition</li> <li>Content: Next regime and transition probability</li> <li>Accuracy: ~66% reliable</li> </ul> <p>Example signal: <pre><code>{\n  \"current_regime\": \"medium\",\n  \"next_regime\": \"high\",\n  \"probability\": 0.66,\n  \"ticks_until_change\": 3\n}\n</code></pre></p>"},{"location":"game/simulation/volatility-regimes/#signal-usage-strategies","title":"Signal Usage Strategies","text":"<p>Anticipatory Positioning</p> <ul> <li>Buy options before vol increase</li> <li>Sell options before vol decrease</li> <li>Adjust position sizes</li> </ul> <p>Risk Management</p> <ul> <li>Reduce positions before high vol</li> <li>Increase activity in low vol</li> <li>Hedge existing positions</li> </ul>"},{"location":"game/simulation/volatility-regimes/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about News Events that trigger changes</li> <li>Understand Price Generation within each regime</li> <li>Review role-specific strategies in Roles</li> </ul>"},{"location":"game/trading/constraints/","title":"Trading Constraints","text":""},{"location":"game/trading/constraints/#overview","title":"Overview","text":"<p>Each role operates under specific constraints designed to create realistic trading dynamics and ensure balanced gameplay.</p>"},{"location":"game/trading/constraints/#constraints-by-role","title":"Constraints by Role","text":"Role Fees (Maker/Taker) Order Limit Position Limits Special Requirements Market Maker +\\(0.02 / -\\)0.01 100/tick \u00b150 per option\u00b1200 total \u2022 \u226580% quote uptime\u2022 Two-sided quotes Hedge Fund +\\(0.01 / -\\)0.02 50/tick 150 per option500 total \u2022 No two-sided quotes\u2022 \u00b150 delta limit\u2022 Volatility signals Arbitrage Desk +\\(0.01 / -\\)0.02 75/tick 100 per option300 total \u2022 Paired trades only\u2022 Tracking signals Retail Flow -\\(0.01 / -\\)0.03 Poisson(3) 50 total \u2022 Automated only\u2022 Behavioral patterns"},{"location":"game/trading/constraints/#position-limits","title":"Position Limits","text":""},{"location":"game/trading/constraints/#market-maker","title":"Market Maker","text":"<ul> <li>Per Option: \u00b150 contracts</li> <li>Total Portfolio: \u00b1200 contracts</li> <li>Purpose: Force active inventory management</li> <li>Measurement: Net position (long - short)</li> </ul>"},{"location":"game/trading/constraints/#hedge-fund","title":"Hedge Fund","text":"<ul> <li>Per Option: 150 contracts (one-sided)</li> <li>Total Portfolio: 500 contracts</li> <li>Delta Limit: \u00b150 deltas (portfolio-wide)</li> <li>Purpose: Enable gamma trading with forced rehedging</li> <li>Measurement: Absolute position for size, net delta for neutrality</li> </ul>"},{"location":"game/trading/constraints/#arbitrage-desk","title":"Arbitrage Desk","text":"<ul> <li>Per Option: 100 contracts</li> <li>Total Portfolio: 300 contracts</li> <li>Paired Trade Requirement: 2:1 SPX:SPY ratio</li> <li>Purpose: Maintain market neutrality</li> </ul>"},{"location":"game/trading/constraints/#retail-trader","title":"Retail Trader","text":"<ul> <li>Total Portfolio: 50 contracts</li> <li>Per Trade: 10 contracts maximum</li> <li>Purpose: Realistic retail constraints</li> </ul>"},{"location":"game/trading/constraints/#order-limits","title":"Order Limits","text":""},{"location":"game/trading/constraints/#submission-rates","title":"Submission Rates","text":"<ul> <li>Orders per tick vary by role</li> <li>Bulk submission allowed</li> <li>No modifications (cancel/replace only)</li> </ul>"},{"location":"game/trading/constraints/#size-constraints","title":"Size Constraints","text":"Role Min Order Max Order Quote Size Market Maker 1 1000 10-1000 Hedge Fund 1 500 N/A Arbitrage Desk 1 500 N/A Retail 1 100 N/A"},{"location":"game/trading/constraints/#fee-structure","title":"Fee Structure","text":""},{"location":"game/trading/constraints/#makertaker-model","title":"Maker/Taker Model","text":"<ul> <li>Maker: Add liquidity (limit orders that rest)</li> <li>Taker: Remove liquidity (market orders or crossing limits)</li> </ul>"},{"location":"game/trading/constraints/#fee-calculation","title":"Fee Calculation","text":"<pre><code>Net Fee = (Maker Rebate \u00d7 Maker Volume) - (Taker Fee \u00d7 Taker Volume)\n</code></pre>"},{"location":"game/trading/constraints/#role-advantages","title":"Role Advantages","text":"<ul> <li>Market Makers: Enhanced maker rebates encourage liquidity</li> <li>Others: Standard fees incentivize thoughtful execution</li> </ul>"},{"location":"game/trading/constraints/#quote-requirements-market-makers-only","title":"Quote Requirements (Market Makers Only)","text":""},{"location":"game/trading/constraints/#80-uptime-rule","title":"80% Uptime Rule","text":"<ul> <li>Must maintain active quotes 80% of tick time</li> <li>Measured per instrument</li> <li>Both bid and ask required</li> </ul>"},{"location":"game/trading/constraints/#spread-constraints","title":"Spread Constraints","text":"<ul> <li>Maximum: 10% of mid-price</li> <li>Minimum: $0.01</li> <li>Must be reasonable for market conditions</li> </ul>"},{"location":"game/trading/constraints/#penalty-for-non-compliance","title":"Penalty for Non-Compliance","text":"<ul> <li>Warning at 70% uptime</li> <li>Reduced rebates below 80%</li> <li>Possible role reassignment below 60%</li> </ul>"},{"location":"game/trading/constraints/#special-constraints","title":"Special Constraints","text":""},{"location":"game/trading/constraints/#hedge-fund-limitations","title":"Hedge Fund Limitations","text":"<ul> <li>No Two-Sided Quoting: Cannot simultaneously bid and ask</li> <li>Delta Neutrality: Must maintain portfolio delta within \u00b150</li> <li>Signal Usage: Expected to utilize volatility signals for gamma positioning</li> <li>Rehedging Requirement: Must adjust positions when delta limit approached</li> <li>Performance Focus: Window-based P&amp;L from gamma scalping/premium collection</li> </ul>"},{"location":"game/trading/constraints/#arbitrage-desk-requirements","title":"Arbitrage Desk Requirements","text":"<ul> <li>Paired Trades: Must maintain balanced SPX/SPY positions</li> <li>Ratio Maintenance: Target 10:1 value ratio</li> <li>Convergence Focus: Scored on arbitrage capture, not directional P&amp;L</li> </ul>"},{"location":"game/trading/constraints/#retail-restrictions","title":"Retail Restrictions","text":"<ul> <li>Order Types: Market and limit only (no quotes)</li> <li>Frequency: Maximum 3 trades per tick</li> <li>No Signals: Trade on public information only</li> </ul>"},{"location":"game/trading/constraints/#risk-controls","title":"Risk Controls","text":""},{"location":"game/trading/constraints/#pre-trade-checks","title":"Pre-Trade Checks","text":"<p>All orders validated for:</p> <ul> <li>Position limit compliance</li> <li>Order size limits</li> <li>Role permissions</li> <li>Price reasonability</li> </ul>"},{"location":"game/trading/constraints/#real-time-monitoring","title":"Real-Time Monitoring","text":"<ul> <li>Position tracking per tick</li> <li>P&amp;L calculation</li> <li>Fee accumulation</li> <li>Constraint violations logged</li> </ul>"},{"location":"game/trading/constraints/#strategic-implications","title":"Strategic Implications","text":""},{"location":"game/trading/constraints/#for-market-makers","title":"For Market Makers","text":"<ul> <li>Balance inventory within tight limits</li> <li>Use rebates to offset risk</li> <li>Quick position flipping</li> </ul>"},{"location":"game/trading/constraints/#for-hedge-funds","title":"For Hedge Funds","text":"<ul> <li>Position gamma based on volatility signals</li> <li>Maintain delta neutrality through rehedging</li> </ul>"},{"location":"game/trading/constraints/#for-arbitrage-desks","title":"For Arbitrage Desks","text":"<ul> <li>Maintain ratio discipline</li> <li>Size based on convergence confidence</li> <li>Monitor both legs equally</li> </ul>"},{"location":"game/trading/constraints/#next-steps","title":"Next Steps","text":"<ul> <li>Review Execution Rules</li> <li>Understand Signal Access</li> <li>Study your specific Role Requirements</li> </ul>"},{"location":"game/trading/execution-rules/","title":"Execution Rules","text":""},{"location":"game/trading/execution-rules/#order-matching-engine","title":"Order Matching Engine","text":""},{"location":"game/trading/execution-rules/#price-time-priority","title":"Price-Time Priority","text":"<p>The exchange uses a standard price-time priority algorithm:</p> <ol> <li> <p>Price Priority: Best prices execute first</p> </li> <li> <p>Highest bids match before lower bids</p> </li> <li> <p>Lowest asks match before higher asks</p> </li> <li> <p>Time Priority: Among same-priced orders</p> </li> <li> <p>Earlier orders execute first</p> </li> <li>Microsecond timestamp precision</li> <li>No queue jumping allowed</li> </ol>"},{"location":"game/trading/execution-rules/#matching-process","title":"Matching Process","text":"<pre><code>For each instrument:\n\n1. Sort buy orders by price (descending) then time (ascending)\n2. Sort sell orders by price (ascending) then time (ascending)\n3. Match crossing orders until no more crosses exist\n4. Remaining orders rest in book\n</code></pre>"},{"location":"game/trading/execution-rules/#trade-execution","title":"Trade Execution","text":""},{"location":"game/trading/execution-rules/#execution-scenarios","title":"Execution Scenarios","text":"<p>Scenario 1: Immediate Fill <pre><code>Book: Ask @ 25.50\nOrder: Buy 10 @ 25.60 (market or aggressive limit)\nResult: Filled 10 @ 25.50\n</code></pre></p> <p>Scenario 2: Partial Fill <pre><code>Book: Ask 5 @ 25.50, Ask 10 @ 25.55\nOrder: Buy 10 @ 25.55\nResult: Filled 5 @ 25.50, 5 @ 25.55\n</code></pre></p> <p>Scenario 3: Resting Order <pre><code>Book: Ask @ 25.50\nOrder: Buy 10 @ 25.40\nResult: Order rests as best bid\n</code></pre></p>"},{"location":"game/trading/execution-rules/#fill-allocation","title":"Fill Allocation","text":"<p>When multiple orders exist at the same price:</p> <ul> <li>Strict time priority (no pro-rata)</li> <li>Full fills before partial fills</li> <li>Minimum fill size: 1 contract</li> </ul>"},{"location":"game/trading/execution-rules/#fee-calculation","title":"Fee Calculation","text":""},{"location":"game/trading/execution-rules/#maker-vs-taker","title":"Maker vs Taker","text":"<p>Maker: Order adds liquidity (rests in book) Taker: Order removes liquidity (executes immediately)</p>"},{"location":"game/trading/execution-rules/#fee-examples","title":"Fee Examples","text":"<p>Market Maker Buying: <pre><code>Scenario: Post bid @ 25.40, later filled\nContracts: 100\nMaker rebate: +$0.02 per contract\nTotal: +$2.00 credit\n</code></pre></p> <p>Hedge Fund Aggressive Buy: <pre><code>Scenario: Buy 50 @ market, fills @ 25.50\nContracts: 50\nTaker fee: -$0.02 per contract\nTotal: -$1.00 charge\n</code></pre></p>"},{"location":"game/trading/execution-rules/#order-lifecycle","title":"Order Lifecycle","text":""},{"location":"game/trading/execution-rules/#1-submission-phase","title":"1. Submission Phase","text":"<ul> <li>Order received by exchange</li> <li>Timestamp assigned</li> <li>Initial validation performed</li> </ul>"},{"location":"game/trading/execution-rules/#2-validation-checks","title":"2. Validation Checks","text":"<pre><code>def validate_order(order, role, current_position):\n    # Check role permissions\n\n    if order.type == \"QUOTE\" and role != \"MARKET_MAKER\":\n        return \"REJECT: Only market makers can quote\"\n\n    # Check position limits\n\n    new_position = current_position + order.quantity\n    if abs(new_position) &gt; role.position_limit:\n        return \"REJECT: Would exceed position limit\"\n\n    # Check price validity\n\n    if order.price &lt;= 0:\n        return \"REJECT: Invalid price\"\n\n    return \"ACCEPT\"\n</code></pre>"},{"location":"game/trading/execution-rules/#3-book-interaction","title":"3. Book Interaction","text":"<ul> <li>Check for immediate execution</li> <li>Place in book if not crossing</li> <li>Update market data feed</li> </ul>"},{"location":"game/trading/execution-rules/#4-execution-reports","title":"4. Execution Reports","text":"<p>Execution reports are sent in real-time via WebSocket:</p> <pre><code>{\n  \"order_id\": \"ORD-12345\",\n  \"status\": \"FILLED\",\n  \"filled_quantity\": 50,\n  \"average_price\": 25.52,\n  \"fee\": -1.00,\n  \"liquidity_type\": \"taker\",\n  \"timestamp\": \"2024-01-15T10:30:00.123Z\"\n}\n</code></pre> <p>The <code>liquidity_type</code> field indicates whether the order was a maker (provided liquidity) or taker (removed liquidity), which affects fee calculations.</p>"},{"location":"game/trading/execution-rules/#special-situations","title":"Special Situations","text":""},{"location":"game/trading/execution-rules/#self-trading","title":"Self-Trading","text":"<ul> <li>Allowed (you can trade with yourself)</li> <li>Still incur fees</li> </ul>"},{"location":"game/trading/execution-rules/#order-rejection","title":"Order Rejection","text":"<p>Common rejection reasons:</p> <ul> <li>Position limit exceeded</li> <li>Invalid instrument</li> </ul>"},{"location":"game/trading/execution-rules/#priority-examples","title":"Priority Examples","text":""},{"location":"game/trading/execution-rules/#example-1-simple-match","title":"Example 1: Simple Match","text":"<pre><code>Bids:\n\n- 25.45 @ 10:30:00.100 (Trader A, 50 lots)\n- 25.45 @ 10:30:00.200 (Trader B, 30 lots)\n- 25.40 @ 10:30:00.050 (Trader C, 100 lots)\n\nNew Sell Order: 60 @ 25.40\n\nExecution:\n\n1. Fill 50 @ 25.45 with Trader A\n2. Fill 10 @ 25.45 with Trader B\n3. Trader B has 20 remaining\n4. Trader C's order untouched\n</code></pre>"},{"location":"game/trading/execution-rules/#example-2-quote-vs-limit","title":"Example 2: Quote vs Limit","text":"<pre><code>Market Maker Quote: Bid 25.40 / Ask 25.60\nHedge Fund Limit: Buy 100 @ 25.60\n\nResult:\n\n- HF order takes liquidity, fills @ 25.60\n- HF pays taker fee\n- MM earns maker rebate\n</code></pre>"},{"location":"game/trading/execution-rules/#next-steps","title":"Next Steps","text":"<ul> <li>Review Order Types available</li> <li>Understand Trading Constraints</li> <li>Practice in test environment</li> <li>Develop execution algorithm</li> </ul>"},{"location":"game/trading/order-types/","title":"Order Types","text":""},{"location":"game/trading/order-types/#available-order-types","title":"Available Order Types","text":""},{"location":"game/trading/order-types/#limit-orders","title":"Limit Orders","text":"<p>The most common order type, allowing precise price control.</p> <p>Characteristics:</p> <ul> <li>Specify exact price (or better)</li> <li>Rest in order book if not immediately fillable</li> <li>Can partially fill</li> <li>Expire at tick end if unfilled</li> </ul> <p>Syntax Example: <pre><code>{\n  \"type\": \"LIMIT\",\n  \"instrument\": \"SPX_4400_CALL_2024-02-15\",\n  \"side\": \"BUY\",\n  \"quantity\": 10,\n  \"price\": 25.50\n}\n</code></pre></p> <p>Use Cases:</p> <ul> <li>Providing liquidity (earn maker rebate)</li> <li>Precise entry/exit points</li> <li>Building positions gradually</li> </ul>"},{"location":"game/trading/order-types/#market-orders","title":"Market Orders","text":"<p>Execute immediately at best available price.</p> <p>Characteristics:</p> <ul> <li>No price specification</li> <li>Immediate execution (or reject)</li> <li>Take liquidity from book</li> <li>May experience slippage</li> </ul> <p>Syntax Example: <pre><code>{\n  \"type\": \"MARKET\",\n  \"instrument\": \"SPY_440_PUT_2024-02-15\",\n  \"side\": \"SELL\",\n  \"quantity\": 20\n}\n</code></pre></p> <p>Use Cases:</p> <ul> <li>Urgent position changes</li> <li>Capturing signals quickly</li> <li>Risk management (stop-loss)</li> </ul>"},{"location":"game/trading/order-types/#quotes-market-makers-only","title":"Quotes (Market Makers Only)","text":"<p>Simultaneous two-sided markets providing both bid and ask.</p> <p>Characteristics:</p> <ul> <li>Must specify both bid and ask</li> <li>Counts as two orders for limits</li> <li>Can be one-click cancelled</li> <li>Earn enhanced maker rebates</li> </ul> <p>Syntax Example: <pre><code>{\n  \"type\": \"QUOTE\",\n  \"instrument\": \"SPX_4400_CALL_2024-02-15\",\n  \"bid_price\": 25.40,\n  \"bid_quantity\": 50,\n  \"ask_price\": 25.60,\n  \"ask_quantity\": 50\n}\n</code></pre></p> <p>Requirements:</p> <ul> <li>Market Maker role only</li> <li>Minimum 80% quote uptime</li> <li>Reasonable spread widths</li> </ul>"},{"location":"game/trading/order-types/#order-attributes","title":"Order Attributes","text":""},{"location":"game/trading/order-types/#required-fields","title":"Required Fields","text":"Field Description Valid Values type Order type LIMIT, MARKET, QUOTE instrument Trading symbol Valid option/underlying side Direction BUY, SELL (not for quotes) quantity Size 1-1000 (role dependent)"},{"location":"game/trading/order-types/#optional-fields","title":"Optional Fields","text":"Field Description Default price Limit price Required for LIMIT client_id Your reference None strategy_id Strategy tag None"},{"location":"game/trading/order-types/#order-constraints","title":"Order Constraints","text":""},{"location":"game/trading/order-types/#size-limits-by-role","title":"Size Limits by Role","text":"Role Min Size Max Size Max Orders/Tick Market Maker 1 1000 100 Hedge Fund 1 500 50 Arbitrage Desk 1 500 75 Retail 1 100 5"},{"location":"game/trading/order-types/#price-constraints","title":"Price Constraints","text":"<ul> <li>Minimum tick: $0.01</li> <li>Must be positive</li> <li>Options: Cannot trade below intrinsic value</li> <li>Reasonable limits enforced</li> </ul>"},{"location":"game/trading/order-types/#quote-constraints-market-makers","title":"Quote Constraints (Market Makers)","text":"<ul> <li>Maximum spread: 10% of mid-price</li> <li>Minimum size: 10 contracts per side</li> <li>Must maintain 80% uptime</li> <li>Both sides must be valid</li> </ul>"},{"location":"game/trading/order-types/#order-lifecycle","title":"Order Lifecycle","text":""},{"location":"game/trading/order-types/#1-submission","title":"1. Submission","text":"<pre><code>Bot -&gt; API -&gt; Validation -&gt; Order Book\n</code></pre>"},{"location":"game/trading/order-types/#2-validation-checks","title":"2. Validation Checks","text":"<ul> <li>Size limits</li> <li>Price validity</li> <li>Position limits</li> <li>Risk checks</li> </ul>"},{"location":"game/trading/order-types/#3-book-placement","title":"3. Book Placement","text":"<ul> <li>Immediate execution if crossable</li> <li>Rest in book if not</li> <li>Price-time priority</li> </ul>"},{"location":"game/trading/order-types/#4-execution","title":"4. Execution","text":"<ul> <li>Full or partial fills</li> <li>Fee calculation</li> <li>Position update</li> <li>P&amp;L impact</li> </ul>"},{"location":"game/trading/order-types/#5-reporting","title":"5. Reporting","text":"<ul> <li>Fill confirmation</li> <li>Remaining quantity</li> <li>Average price</li> <li>Fees charged</li> </ul>"},{"location":"game/trading/order-types/#execution-priority","title":"Execution Priority","text":""},{"location":"game/trading/order-types/#price-time-priority","title":"Price-Time Priority","text":"<ol> <li> <p>Price Priority: Better prices execute first</p> </li> <li> <p>Higher bids ranked first</p> </li> <li> <p>Lower asks ranked first</p> </li> <li> <p>Time Priority: Same price -&gt; earlier first</p> </li> <li> <p>Microsecond timestamp precision</p> </li> <li>No queue jumping</li> </ol>"},{"location":"game/trading/order-types/#order-management","title":"Order Management","text":""},{"location":"game/trading/order-types/#no-modifications","title":"No Modifications","text":"<ul> <li>Cannot modify existing orders</li> <li>Must cancel and replace</li> <li>Cancellations immediate</li> <li>No cancel-replace atomic operation</li> </ul>"},{"location":"game/trading/order-types/#bulk-operations","title":"Bulk Operations","text":"<ul> <li>Submit multiple orders per message</li> <li>Cancel all orders by instrument</li> <li>Cancel all orders globally</li> <li>Useful for risk management</li> </ul>"},{"location":"game/trading/order-types/#order-tracking","title":"Order Tracking","text":"<p>Each order receives:</p> <ul> <li>Unique order ID</li> <li>Timestamp</li> <li>Status updates</li> <li>Fill reports</li> </ul>"},{"location":"game/trading/order-types/#next-steps","title":"Next Steps","text":"<ul> <li>Understand Trading Constraints</li> <li>Review Execution Rules</li> <li>Learn Signal Access by role</li> </ul>"},{"location":"game/trading/signals-access/","title":"Signal Access by Role","text":""},{"location":"game/trading/signals-access/#signal-overview","title":"Signal Overview","text":"<p>The game includes differentiated information access to create realistic advantages and trading opportunities. Each role receives different signals that align with their trading mandate.</p>"},{"location":"game/trading/signals-access/#signal-distribution-matrix","title":"Signal Distribution Matrix","text":"Signal Type Market Maker Hedge Fund Arbitrage Desk Retail Timing Market Data Yes Yes Yes Yes Real-time News Headlines Yes Yes Yes Yes Immediate Volatility Forecast No Yes No No 1-5 ticks early Tracking Error No No Yes No Real-time"},{"location":"game/trading/signals-access/#public-information-all-roles","title":"Public Information (All Roles)","text":""},{"location":"game/trading/signals-access/#market-data-feed","title":"Market Data Feed","text":"<p>Everyone receives the same market data: <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"instrument\": \"SPX_4400_CALL_2024-02-15\",\n  \"bid\": 25.40,\n  \"ask\": 25.60,\n  \"last\": 25.50,\n  \"volume\": 1250,\n  \"book\": {\n    \"bids\": [[25.40, 100], [25.35, 200], ...],\n    \"asks\": [[25.60, 100], [25.65, 150], ...]\n  }\n}\n</code></pre></p>"},{"location":"game/trading/signals-access/#news-headlines","title":"News Headlines","text":"<p>Published to all participants simultaneously: <pre><code>{\n  \"timestamp\": \"2024-01-15T10:30:10Z\",\n  \"headline\": \"Fed hints at tightening\",\n  \"category\": \"monetary_policy\"\n}\n</code></pre></p>"},{"location":"game/trading/signals-access/#probability-tables","title":"Probability Tables","text":"<p>Static reference data available to all:</p> <ul> <li>Event probabilities for regime shifts</li> <li>Historical impact statistics</li> <li>Published in game documentation</li> </ul>"},{"location":"game/trading/signals-access/#role-specific-signals","title":"Role-Specific Signals","text":""},{"location":"game/trading/signals-access/#hedge-fund-volatility-signal","title":"Hedge Fund: Volatility Signal","text":"<p>Purpose: Advance warning of volatility regime changes</p> <p>Content: <pre><code>{\n  \"signal_type\": \"volatility_forecast\",\n  \"current_regime\": \"medium\",\n  \"forecast\": {\n    \"next_regime\": \"high\",\n    \"probability\": 0.66,\n    \"ticks_until_change\": 3\n  },\n  \"confidence\": \"high\"\n}\n</code></pre></p> <p>Characteristics:</p> <ul> <li>Accuracy: ~66%</li> <li>Lead time: 1-5 ticks</li> <li>Updates when forecast changes</li> <li>Silent during stable regimes</li> </ul> <p>Strategic Value:</p> <ul> <li>Position before volatility increases</li> <li>Adjust option strategies</li> <li>Size trades appropriately</li> </ul>"},{"location":"game/trading/signals-access/#arbitrage-desk-tracking-error-signal","title":"Arbitrage Desk: Tracking Error Signal","text":"<p>Purpose: Identify SPX-SPY mispricings</p> <p>Content: <pre><code>{\n  \"signal_type\": \"tracking_error\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"spx\": {\n    \"price\": 4400.00,\n    \"implied_spy\": 440.00\n  },\n  \"spy\": {\n    \"price\": 441.25,\n    \"actual\": 441.25\n  },\n  \"metrics\": {\n    \"error_percent\": 0.28,\n    \"error_direction\": \"SPY_RICH\",\n    \"z_score\": 2.1,\n    \"mean_reversion_ticks\": 5\n  }\n}\n</code></pre></p> <p>Characteristics:</p> <ul> <li>Accuracy: ~80%</li> <li>Real-time updates</li> <li>Includes statistical measures</li> <li>Historical mean reversion data</li> </ul> <p>Strategic Value:</p> <ul> <li>Immediate arbitrage opportunities</li> <li>Sizing based on z-score</li> <li>Timing exits with convergence</li> </ul>"},{"location":"game/trading/signals-access/#market-maker-information-inference","title":"Market Maker: Information Inference","text":"<p>No Proprietary Signals</p>"},{"location":"game/trading/signals-access/#signal-timing","title":"Signal Timing","text":""},{"location":"game/trading/signals-access/#information-release-schedule","title":"Information Release Schedule","text":"Time Event Who Sees T-300s Vol forecast generated Hedge Fund T-60s Vol signal sent Hedge Fund T-0s New tick begins Everyone T+10s News published Everyone T+30s Order window opens Everyone T+180s Order window closes Everyone"},{"location":"game/trading/signals-access/#signal-reliability","title":"Signal Reliability","text":""},{"location":"game/trading/signals-access/#expected-accuracy","title":"Expected Accuracy","text":"Signal Accuracy False Positive Rate Value Decay Volatility Forecast 66% 34% Low Tracking Error 80% 20% High News Impact Variable 30% Medium"},{"location":"game/trading/signals-access/#next-steps","title":"Next Steps","text":"<ul> <li>Review Execution Rules</li> </ul>"},{"location":"reference/instrument/","title":"Instrument","text":"<p>Instrument module for the Intern Trading Game.</p> <p>This module defines the Instrument class, which represents a tradeable asset.</p>"},{"location":"reference/instrument/#intern_trading_game.domain.models.instrument-classes","title":"Classes","text":""},{"location":"reference/instrument/#intern_trading_game.domain.models.instrument.Instrument","title":"Instrument  <code>dataclass</code>","text":"<pre><code>Instrument(symbol: str, strike: Optional[float] = None, expiry: Optional[str] = None, option_type: Optional[str] = None, underlying: Optional[str] = None)\n</code></pre> <p>Represents a tradeable instrument in the exchange.</p> <p>This class models financial instruments that can be traded on the exchange. It supports various types of instruments including stocks, futures, and options. For options, additional fields like strike price, expiration date, and option type (call/put) are provided.</p> <p>The instrument serves as the fundamental unit of trading in the system and is referenced by orders, trades, and market data.</p> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>str</code> <p>The unique identifier for the instrument.</p> required <code>strike</code> <code>Optional[float]</code> <p>The strike price for options. None for non-option instruments.</p> <code>None</code> <code>expiry</code> <code>Optional[str]</code> <p>The expiration date for options in ISO format (YYYY-MM-DD). None for non-expiring instruments.</p> <code>None</code> <code>option_type</code> <code>Optional[str]</code> <p>The type of option ('call' or 'put'). None for non-option instruments.</p> <code>None</code> <code>underlying</code> <code>Optional[str]</code> <p>The underlying asset symbol for derivatives. None for non-derivative instruments.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>symbol</code> <code>str</code> <p>The unique identifier for the instrument.</p> <code>strike</code> <code>Optional[float]</code> <p>The strike price for options. None for non-option instruments.</p> <code>expiry</code> <code>Optional[str]</code> <p>The expiration date for options in ISO format (YYYY-MM-DD). None for non-expiring instruments.</p> <code>option_type</code> <code>Optional[str]</code> <p>The type of option ('call' or 'put'). None for non-option instruments.</p> <code>underlying</code> <code>Optional[str]</code> <p>The underlying asset symbol for derivatives. None for non-derivative instruments.</p> Notes <p>Financial instruments are the building blocks of any trading system. They represent the assets that can be bought and sold on the exchange.</p> <p>For options, the Black-Scholes model is commonly used for pricing:</p> \\[C = S_0 e^{-qT} N(d_1) - K e^{-rT} N(d_2)\\] <p>where:</p> \\[d_1 = \\frac{\\ln(S_0/K) + (r - q + \\sigma^2/2)T}{\\sigma\\sqrt{T}}\\] \\[d_2 = d_1 - \\sigma\\sqrt{T}\\] <p>The instrument ID is derived from the symbol, which must be unique across the exchange. This simplifies instrument lookup and reference.</p> TradingContext <p>This implementation assumes: - Instruments are uniquely identified by their symbol - Options require strike, expiry, and option_type - Expiry dates follow ISO format (YYYY-MM-DD) - Option types are limited to 'call' and 'put' - No support for complex derivatives like swaps or structured products - No handling of corporate actions (splits, dividends, etc.) - No support for different settlement types or delivery methods</p> <p>Examples:</p> <p>Creating a stock instrument:</p> <pre><code>&gt;&gt;&gt; apple_stock = Instrument(symbol=\"AAPL\", underlying=\"AAPL\")\n&gt;&gt;&gt; apple_stock.id\n'AAPL'\n&gt;&gt;&gt; apple_stock.option_type is None\nTrue\n</code></pre> <p>Creating an option instrument:</p> <pre><code>&gt;&gt;&gt; apple_call = Instrument(\n...     symbol=\"AAPL_C_150_20230621\",\n...     underlying=\"AAPL\",\n...     strike=150.0,\n...     expiry=\"2023-06-21\",\n...     option_type=\"call\"\n... )\n&gt;&gt;&gt; apple_call.id\n'AAPL_C_150_20230621'\n&gt;&gt;&gt; apple_call.option_type\n'call'\n</code></pre>"},{"location":"reference/instrument/#intern_trading_game.domain.models.instrument.Instrument-attributes","title":"Attributes","text":""},{"location":"reference/instrument/#intern_trading_game.domain.models.instrument.Instrument.id","title":"id  <code>property</code>","text":"<pre><code>id: str\n</code></pre> <p>Get the unique identifier for this instrument.</p> <p>Returns:</p> Type Description <code>str</code> <p>The instrument's symbol, which serves as its unique ID.</p>"},{"location":"reference/instrument/#intern_trading_game.domain.models.instrument.Instrument-functions","title":"Functions","text":""},{"location":"reference/instrument/#intern_trading_game.domain.models.instrument.Instrument.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> <p>Validate the instrument attributes after initialization.</p> Source code in <code>src/intern_trading_game/domain/models/instrument.py</code> <pre><code>def __post_init__(self):\n    \"\"\"Validate the instrument attributes after initialization.\"\"\"\n    if self.option_type and self.option_type.lower() not in [\n        \"call\",\n        \"put\",\n    ]:\n        raise ValueError(\"Option type must be 'call' or 'put'\")\n\n    if self.expiry:\n        try:\n            # Validate expiry date format\n            year, month, day = map(int, self.expiry.split(\"-\"))\n            date(year, month, day)\n        except (ValueError, TypeError):\n            raise ValueError(\"Expiry must be in ISO format (YYYY-MM-DD)\")\n</code></pre>"},{"location":"reference/order/","title":"Order","text":"<p>Order module for the Intern Trading Game.</p> <p>This module defines the Order class, which represents a trading order.</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order-classes","title":"Classes","text":""},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order","title":"Order  <code>dataclass</code>","text":"<pre><code>Order(instrument_id: str, side: OrderSide, quantity: float, trader_id: str, price: Optional[float] = None, order_id: str = lambda: str(uuid.uuid4())(), timestamp: datetime = datetime.now(), order_type: OrderType = OrderType.LIMIT, client_order_id: Optional[str] = None)\n</code></pre> <p>Represents a trading order in the exchange.</p> <p>An order is a request to buy or sell a financial instrument. It contains information about the instrument, quantity, price (for limit orders), and the trader who submitted it. Orders can be either market orders (executed immediately at the best available price) or limit orders (executed only at a specified price or better).</p> <p>Parameters:</p> Name Type Description Default <code>instrument_id</code> <code>str</code> <p>The ID of the instrument being traded.</p> required <code>side</code> <code>OrderSide or str</code> <p>Whether this is a buy or sell order. Can be provided as an OrderSide enum value or a string ('buy' or 'sell').</p> required <code>quantity</code> <code>float</code> <p>The quantity to be traded. Must be positive.</p> required <code>trader_id</code> <code>str</code> <p>The ID of the trader submitting the order.</p> required <code>price</code> <code>float</code> <p>The limit price. If None, the order is treated as a market order. Must be positive for limit orders.</p> <code>None</code> <code>order_id</code> <code>str</code> <p>A unique identifier for this order. If not provided, a UUID is generated.</p> <code>lambda: str(uuid4())()</code> <code>timestamp</code> <code>datetime</code> <p>When the order was created. If not provided, the current time is used.</p> <code>now()</code> <code>order_type</code> <code>OrderType</code> <p>The type of order (limit or market). This is automatically set based on the price parameter, but can be explicitly provided.</p> <code>OrderType.LIMIT</code> <code>client_order_id</code> <code>str</code> <p>Client's reference ID for this order. Used by bots to track their orders across the system.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>instrument_id</code> <code>str</code> <p>The ID of the instrument being traded.</p> <code>side</code> <code>OrderSide</code> <p>Whether this is a buy or sell order.</p> <code>quantity</code> <code>float</code> <p>The quantity to be traded.</p> <code>price</code> <code>Optional[float]</code> <p>The limit price (None for market orders).</p> <code>trader_id</code> <code>str</code> <p>The ID of the trader submitting the order.</p> <code>order_id</code> <code>str</code> <p>A unique identifier for this order.</p> <code>timestamp</code> <code>datetime</code> <p>When the order was created.</p> <code>order_type</code> <code>OrderType</code> <p>The type of order (limit or market).</p> <code>client_order_id</code> <code>Optional[str]</code> <p>Client's reference ID for tracking.</p> <code>remaining_quantity</code> <code>float</code> <p>The unfilled quantity of the order.</p> Notes <p>Orders are the fundamental building blocks of a trading system. They represent the intention of a trader to execute a transaction in the market.</p> <p>The order lifecycle typically follows these stages:</p> <ol> <li>Creation - Order is created with initial parameters</li> <li>Validation - Order is checked for validity (positive quantity, etc.)</li> <li>Submission - Order is submitted to the exchange</li> <li>Matching - Order is matched against other orders</li> <li>Execution - Trades are created when orders match</li> <li>Settlement - The final stage where assets are exchanged</li> </ol> <p>The price-time priority rule is commonly used for order matching:</p> \\[  ext{Priority} = (       ext{Price},     ext{Time})\\] <p>Where better prices have higher priority, and for equal prices, earlier orders have higher priority.</p> TradingContext <p>This implementation assumes: - Orders can be either market or limit orders - Market orders execute immediately at the best available price - Limit orders execute only at the specified price or better - Orders can be partially filled - Order quantities must be positive - Limit orders must have a positive price - No support for stop orders, iceberg orders, or other advanced order types - No position limits or risk checks</p> <p>Examples:</p> <p>Creating a limit buy order:</p> <pre><code>&gt;&gt;&gt; buy_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; buy_order.is_buy\nTrue\n&gt;&gt;&gt; buy_order.is_limit_order\nTrue\n</code></pre> <p>Creating a market sell order:</p> <pre><code>&gt;&gt;&gt; sell_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"sell\",\n...     quantity=5,\n...     price=None,\n...     trader_id=\"trader2\"\n... )\n&gt;&gt;&gt; sell_order.is_market_order\nTrue\n&gt;&gt;&gt; sell_order.remaining_quantity\n5.0\n</code></pre>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order-attributes","title":"Attributes","text":""},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.filled_quantity","title":"filled_quantity  <code>property</code>","text":"<pre><code>filled_quantity: float\n</code></pre> <p>Get the quantity that has been filled.</p> <p>Returns:</p> Type Description <code>float</code> <p>The quantity that has been filled (original quantity minus remaining).</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.is_buy","title":"is_buy  <code>property</code>","text":"<pre><code>is_buy: bool\n</code></pre> <p>Check if this is a buy order.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this is a buy order, False otherwise.</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.is_filled","title":"is_filled  <code>property</code>","text":"<pre><code>is_filled: bool\n</code></pre> <p>Check if this order is completely filled.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the order is filled, False otherwise.</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.is_limit_order","title":"is_limit_order  <code>property</code>","text":"<pre><code>is_limit_order: bool\n</code></pre> <p>Check if this is a limit order.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this is a limit order, False otherwise.</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.is_market_order","title":"is_market_order  <code>property</code>","text":"<pre><code>is_market_order: bool\n</code></pre> <p>Check if this is a market order.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this is a market order, False otherwise.</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.is_sell","title":"is_sell  <code>property</code>","text":"<pre><code>is_sell: bool\n</code></pre> <p>Check if this is a sell order.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if this is a sell order, False otherwise.</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order-functions","title":"Functions","text":""},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> <p>Validate and initialize the order after creation.</p> Source code in <code>src/intern_trading_game/domain/exchange/order.py</code> <pre><code>def __post_init__(self):\n    \"\"\"Validate and initialize the order after creation.\"\"\"\n    # Convert string side to enum if needed\n    if isinstance(self.side, str):\n        self.side = OrderSide(self.side.lower())\n\n    # Determine order type based on price\n    if self.price is None:\n        self.order_type = OrderType.MARKET\n    else:\n        self.order_type = OrderType.LIMIT\n\n    # Validate price for limit orders\n    if self.order_type == OrderType.LIMIT and (\n        self.price is None or self.price &lt;= 0\n    ):\n        raise ValueError(\"Limit orders must have a positive price\")\n\n    # Validate price is in penny increments (for limit orders)\n    if self.order_type == OrderType.LIMIT and self.price is not None:\n        # Check if price has more than 2 decimal places\n        if round(self.price, 2) != self.price:\n            raise ValueError(\"Order price must be in penny increments\")\n\n    # Validate quantity\n    if self.quantity &lt;= 0:\n        raise ValueError(\"Order quantity must be positive\")\n\n    # Initialize remaining quantity\n    self.remaining_quantity = self.quantity\n</code></pre>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.Order.fill","title":"fill","text":"<pre><code>fill(quantity: float) -&gt; None\n</code></pre> <p>Mark a quantity of this order as filled.</p> <p>Parameters:</p> Name Type Description Default <code>quantity</code> <code>float</code> <p>The quantity that was filled. Must be positive and not exceed the remaining quantity.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the quantity is invalid or exceeds the remaining quantity.</p> Source code in <code>src/intern_trading_game/domain/exchange/order.py</code> <pre><code>def fill(self, quantity: float) -&gt; None:\n    \"\"\"\n    Mark a quantity of this order as filled.\n\n    Parameters\n    ----------\n    quantity : float\n        The quantity that was filled. Must be positive and not exceed\n        the remaining quantity.\n\n    Raises\n    ------\n    ValueError\n        If the quantity is invalid or exceeds the remaining quantity.\n    \"\"\"\n    if quantity &lt;= 0:\n        raise ValueError(\"Fill quantity must be positive\")\n\n    if quantity &gt; self.remaining_quantity:\n        raise ValueError(\n            f\"Fill quantity {quantity} exceeds remaining quantity \"\n            f\"{self.remaining_quantity}\"\n        )\n\n    self.remaining_quantity -= quantity\n</code></pre>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.OrderSide","title":"OrderSide","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum representing the side of an order (buy or sell).</p>"},{"location":"reference/order/#intern_trading_game.domain.exchange.order.OrderType","title":"OrderType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum representing the type of order (limit or market).</p>"},{"location":"reference/order_book/","title":"Order_Book","text":"<p>OrderBook module for the Intern Trading Game.</p> <p>This module defines the OrderBook class, which maintains the order book for a single instrument.</p>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book-classes","title":"Classes","text":""},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook","title":"OrderBook","text":"<pre><code>OrderBook(instrument_id: str)\n</code></pre> <p>Maintains the order book for a single instrument.</p> <p>The order book keeps track of all open orders for an instrument, matches incoming orders against existing orders, and generates trades. It implements a price-time priority matching algorithm, where orders are matched first by price (highest bid, lowest ask) and then by time (first in, first out).</p> <p>Parameters:</p> Name Type Description Default <code>instrument_id</code> <code>str</code> <p>The ID of the instrument this order book is for.</p> required <p>Attributes:</p> Name Type Description <code>instrument_id</code> <code>str</code> <p>The ID of the instrument this order book is for.</p> <code>bids</code> <code>List[PriceLevel]</code> <p>Price levels for buy orders, sorted by price in descending order.</p> <code>asks</code> <code>List[PriceLevel]</code> <p>Price levels for sell orders, sorted by price in ascending order.</p> <code>order_price_map</code> <code>Dict[str, float]</code> <p>Maps order IDs to their price levels for quick lookup.</p> <code>order_ids</code> <code>Set[str]</code> <p>Set of order IDs in this book.</p> <code>trades</code> <code>deque</code> <p>Recent trades, limited to the last 100.</p> Notes <p>The order book maintains two separate lists of price levels: one for bids (buy orders) and one for asks (sell orders). Each price level contains a queue of orders at that price, sorted by time priority.</p> <p>The matching algorithm follows these steps:</p> <ol> <li>Determine the opposite side of the book to match against</li> <li>Check if the incoming order's price is acceptable</li> <li>Match against the best price level until filled or no more matches</li> <li>Add any remaining quantity to the book (for limit orders)</li> </ol> TradingContext <p>This order book implementation assumes: - Continuous trading (no auctions or circuit breakers) - No self-trade prevention - No iceberg or hidden orders - No minimum tick size enforcement - No position limits or risk checks</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; buy_order = Order(instrument_id=\"AAPL\", side=\"buy\", quantity=10, price=150.0, trader_id=\"trader1\")\n&gt;&gt;&gt; trades = book.add_order(buy_order)\n&gt;&gt;&gt; sell_order = Order(instrument_id=\"AAPL\", side=\"sell\", quantity=5, price=150.0, trader_id=\"trader2\")\n&gt;&gt;&gt; trades = book.add_order(sell_order)\n&gt;&gt;&gt; print(len(trades))\n1\n&gt;&gt;&gt; print(trades[0].quantity)\n5\n</code></pre> <p>Initialize an order book for an instrument.</p> <p>Parameters:</p> Name Type Description Default <code>instrument_id</code> <code>str</code> <p>The ID of the instrument this order book is for.</p> required Notes <p>This constructor initializes empty bid and ask sides of the book, as well as data structures for tracking orders and trades.</p> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def __init__(self, instrument_id: str):\n    \"\"\"\n    Initialize an order book for an instrument.\n\n    Parameters\n    ----------\n    instrument_id : str\n        The ID of the instrument this order book is for.\n\n    Notes\n    -----\n    This constructor initializes empty bid and ask sides of the book,\n    as well as data structures for tracking orders and trades.\n    \"\"\"\n    self.instrument_id = instrument_id\n\n    # Price levels sorted by price\n    # (ascending for asks, descending for bids)\n    # Highest bid first, lowest ask first\n    self.bids: List[PriceLevel] = []  # Highest bid first\n    self.asks: List[PriceLevel] = []  # Lowest ask first\n\n    # Maps order IDs to their price levels for quick lookup\n    self.order_price_map: Dict[str, float] = {}\n\n    # Set of order IDs in this book\n    self.order_ids: Set[str] = set()\n\n    # Recent trades\n    self.trades: deque = deque(maxlen=100)\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook-functions","title":"Functions","text":""},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook.add_order","title":"add_order","text":"<pre><code>add_order(order: Order) -&gt; List[Trade]\n</code></pre> <p>Add an order to the book and attempt to match it.</p> <p>This is the main entry point for adding orders to the order book. The method first validates the order, then attempts to match it against existing orders on the opposite side of the book. If the order is not fully filled and it's a limit order, the remaining quantity is added to the book.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>Order</code> <p>The order to add to the book. Must have the same instrument_id as the order book and a unique order_id.</p> required <p>Returns:</p> Type Description <code>List[Trade]</code> <p>A list of trades that were generated from matching the order. Empty list if no matches were found.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the order's instrument_id doesn't match the book's instrument_id or if the order_id already exists in the book.</p> Notes <p>The order matching process follows price-time priority:</p> <ol> <li>For buy orders, match against asks in ascending price order</li> <li>For sell orders, match against bids in descending price order</li> <li>At each price level, match against orders in time priority (FIFO)</li> </ol> <p>Market orders are always matched immediately at the best available price, while limit orders are only matched if the price is acceptable.</p> TradingContext <p>This method assumes: - Orders are validated before submission - No position limits or risk checks - No fees or commissions - Continuous trading (no auction periods)</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; # Add a limit sell order\n&gt;&gt;&gt; sell_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"sell\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; trades = book.add_order(sell_order)\n&gt;&gt;&gt; print(len(trades))\n0\n&gt;&gt;&gt; # Add a matching buy order\n&gt;&gt;&gt; buy_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=5,\n...     price=150.0,\n...     trader_id=\"trader2\"\n... )\n&gt;&gt;&gt; trades = book.add_order(buy_order)\n&gt;&gt;&gt; print(len(trades))\n1\n&gt;&gt;&gt; print(trades[0].quantity)\n5\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def add_order(self, order: Order) -&gt; List[Trade]:\n    \"\"\"\n    Add an order to the book and attempt to match it.\n\n    This is the main entry point for adding orders to the order book.\n    The method first validates the order, then attempts to match it against\n    existing orders on the opposite side of the book. If the order is not\n    fully filled and it's a limit order, the remaining quantity is added\n    to the book.\n\n    Parameters\n    ----------\n    order : Order\n        The order to add to the book. Must have the same instrument_id as\n        the order book and a unique order_id.\n\n    Returns\n    -------\n    List[Trade]\n        A list of trades that were generated from matching the order.\n        Empty list if no matches were found.\n\n    Raises\n    ------\n    ValueError\n        If the order's instrument_id doesn't match the book's instrument_id\n        or if the order_id already exists in the book.\n\n    Notes\n    -----\n    The order matching process follows price-time priority:\n\n    1. For buy orders, match against asks in ascending price order\n    2. For sell orders, match against bids in descending price order\n    3. At each price level, match against orders in time priority (FIFO)\n\n    Market orders are always matched immediately at the best available price,\n    while limit orders are only matched if the price is acceptable.\n\n    TradingContext\n    --------------\n    This method assumes:\n    - Orders are validated before submission\n    - No position limits or risk checks\n    - No fees or commissions\n    - Continuous trading (no auction periods)\n\n    Examples\n    --------\n    &gt;&gt;&gt; book = OrderBook(\"AAPL\")\n    &gt;&gt;&gt; # Add a limit sell order\n    &gt;&gt;&gt; sell_order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"sell\",\n    ...     quantity=10,\n    ...     price=150.0,\n    ...     trader_id=\"trader1\"\n    ... )\n    &gt;&gt;&gt; trades = book.add_order(sell_order)\n    &gt;&gt;&gt; print(len(trades))\n    0\n    &gt;&gt;&gt; # Add a matching buy order\n    &gt;&gt;&gt; buy_order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"buy\",\n    ...     quantity=5,\n    ...     price=150.0,\n    ...     trader_id=\"trader2\"\n    ... )\n    &gt;&gt;&gt; trades = book.add_order(buy_order)\n    &gt;&gt;&gt; print(len(trades))\n    1\n    &gt;&gt;&gt; print(trades[0].quantity)\n    5\n    \"\"\"\n    # Validate order\n    if order.instrument_id != self.instrument_id:\n        raise ValueError(\n            f\"Order instrument {order.instrument_id} does not match \"\n            f\"book instrument {self.instrument_id}\"\n        )\n\n    if order.order_id in self.order_ids:\n        raise ValueError(\n            f\"Order ID {order.order_id} already exists in the book\"\n        )\n\n    # Try to match the order first\n    trades = self._match_order(order)\n\n    # If the order wasn't fully filled, add the remainder to the book\n    if not order.is_filled and order.is_limit_order:\n        self._insert_order(order)\n\n    return trades\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook.best_ask","title":"best_ask","text":"<pre><code>best_ask() -&gt; Optional[Tuple[float, float]]\n</code></pre> <p>Get the best (lowest) ask price and quantity.</p> <p>Returns:</p> Type Description <code>Optional[Tuple[float, float]]</code> <p>A tuple containing (price, quantity) of the best ask, or None if there are no asks in the book.</p> Notes <p>The best ask is the lowest price at which someone is willing to sell. This is always the first price level in the asks list, since it's sorted in ascending order.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; book.best_ask()\nNone\n&gt;&gt;&gt; order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"sell\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; book.add_order(order)\n[]\n&gt;&gt;&gt; book.best_ask()\n(150.0, 10.0)\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def best_ask(self) -&gt; Optional[Tuple[float, float]]:\n    \"\"\"\n    Get the best (lowest) ask price and quantity.\n\n    Returns\n    -------\n    Optional[Tuple[float, float]]\n        A tuple containing (price, quantity) of the best ask, or None if\n        there are no asks in the book.\n\n    Notes\n    -----\n    The best ask is the lowest price at which someone is willing to sell.\n    This is always the first price level in the asks list, since it's\n    sorted in ascending order.\n\n    Examples\n    --------\n    &gt;&gt;&gt; book = OrderBook(\"AAPL\")\n    &gt;&gt;&gt; book.best_ask()\n    None\n    &gt;&gt;&gt; order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"sell\",\n    ...     quantity=10,\n    ...     price=150.0,\n    ...     trader_id=\"trader1\"\n    ... )\n    &gt;&gt;&gt; book.add_order(order)\n    []\n    &gt;&gt;&gt; book.best_ask()\n    (150.0, 10.0)\n    \"\"\"\n    if not self.asks:\n        return None\n    level = self.asks[0]\n    return (level.price, level.total_quantity)\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook.best_bid","title":"best_bid","text":"<pre><code>best_bid() -&gt; Optional[Tuple[float, float]]\n</code></pre> <p>Get the best (highest) bid price and quantity.</p> <p>Returns:</p> Type Description <code>Optional[Tuple[float, float]]</code> <p>A tuple containing (price, quantity) of the best bid, or None if there are no bids in the book.</p> Notes <p>The best bid is the highest price at which someone is willing to buy. This is always the first price level in the bids list, since it's sorted in descending order.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; book.best_bid()\nNone\n&gt;&gt;&gt; order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; book.add_order(order)\n[]\n&gt;&gt;&gt; book.best_bid()\n(150.0, 10.0)\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def best_bid(self) -&gt; Optional[Tuple[float, float]]:\n    \"\"\"\n    Get the best (highest) bid price and quantity.\n\n    Returns\n    -------\n    Optional[Tuple[float, float]]\n        A tuple containing (price, quantity) of the best bid, or None if\n        there are no bids in the book.\n\n    Notes\n    -----\n    The best bid is the highest price at which someone is willing to buy.\n    This is always the first price level in the bids list, since it's\n    sorted in descending order.\n\n    Examples\n    --------\n    &gt;&gt;&gt; book = OrderBook(\"AAPL\")\n    &gt;&gt;&gt; book.best_bid()\n    None\n    &gt;&gt;&gt; order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"buy\",\n    ...     quantity=10,\n    ...     price=150.0,\n    ...     trader_id=\"trader1\"\n    ... )\n    &gt;&gt;&gt; book.add_order(order)\n    []\n    &gt;&gt;&gt; book.best_bid()\n    (150.0, 10.0)\n    \"\"\"\n    if not self.bids:\n        return None\n    level = self.bids[0]\n    return (level.price, level.total_quantity)\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook.cancel_order","title":"cancel_order","text":"<pre><code>cancel_order(order_id: str) -&gt; Optional[Order]\n</code></pre> <p>Cancel and remove an order from the book.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>The ID of the order to cancel.</p> required <p>Returns:</p> Type Description <code>Optional[Order]</code> <p>The cancelled order, or None if not found.</p> Notes <p>This method removes the order from the book and updates all relevant data structures. If the price level becomes empty after removing the order, the price level is also removed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; book.add_order(order)\n[]\n&gt;&gt;&gt; cancelled = book.cancel_order(order.order_id)\n&gt;&gt;&gt; cancelled.order_id == order.order_id\nTrue\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def cancel_order(self, order_id: str) -&gt; Optional[Order]:\n    \"\"\"\n    Cancel and remove an order from the book.\n\n    Parameters\n    ----------\n    order_id : str\n        The ID of the order to cancel.\n\n    Returns\n    -------\n    Optional[Order]\n        The cancelled order, or None if not found.\n\n    Notes\n    -----\n    This method removes the order from the book and updates all relevant\n    data structures. If the price level becomes empty after removing the\n    order, the price level is also removed.\n\n    Examples\n    --------\n    &gt;&gt;&gt; book = OrderBook(\"AAPL\")\n    &gt;&gt;&gt; order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"buy\",\n    ...     quantity=10,\n    ...     price=150.0,\n    ...     trader_id=\"trader1\"\n    ... )\n    &gt;&gt;&gt; book.add_order(order)\n    []\n    &gt;&gt;&gt; cancelled = book.cancel_order(order.order_id)\n    &gt;&gt;&gt; cancelled.order_id == order.order_id\n    True\n    \"\"\"\n    if order_id not in self.order_price_map:\n        return None\n\n    price = self.order_price_map[order_id]\n    order_list = self.bids if self._is_bid_price(price) else self.asks\n\n    # Find the price level\n    for level in order_list:\n        if level.price == price:\n            order = level.remove_order(order_id)\n            if order:\n                del self.order_price_map[order_id]\n                self.order_ids.remove(order_id)\n\n                # Remove empty price levels\n                if level.is_empty():\n                    order_list.remove(level)\n\n                return order\n            break\n\n    return None\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook.depth_snapshot","title":"depth_snapshot","text":"<pre><code>depth_snapshot(levels: int = 5) -&gt; Dict[str, List[Tuple[float, float]]]\n</code></pre> <p>Get a snapshot of the order book depth.</p> <p>Parameters:</p> Name Type Description Default <code>levels</code> <code>int</code> <p>The number of price levels to include in the snapshot.</p> <code>5</code> <p>Returns:</p> Type Description <code>Dict[str, List[Tuple[float, float]]]</code> <p>A dictionary with 'bids' and 'asks' keys, each with a list of (price, quantity) tuples representing the order book depth.</p> Notes <p>This method provides a view of the current state of the order book, showing the available liquidity at different price levels. This is useful for market data display and analysis.</p> <p>The depth snapshot is often used to create a \"market depth\" or \"level 2\" view of the market, showing the available liquidity at different price points.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; buy_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; book.add_order(buy_order)\n[]\n&gt;&gt;&gt; sell_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"sell\",\n...     quantity=5,\n...     price=151.0,\n...     trader_id=\"trader2\"\n... )\n&gt;&gt;&gt; book.add_order(sell_order)\n[]\n&gt;&gt;&gt; depth = book.depth_snapshot()\n&gt;&gt;&gt; depth[\"bids\"]\n[(150.0, 10.0)]\n&gt;&gt;&gt; depth[\"asks\"]\n[(151.0, 5.0)]\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def depth_snapshot(\n    self, levels: int = 5\n) -&gt; Dict[str, List[Tuple[float, float]]]:\n    \"\"\"\n    Get a snapshot of the order book depth.\n\n    Parameters\n    ----------\n    levels : int, default=5\n        The number of price levels to include in the snapshot.\n\n    Returns\n    -------\n    Dict[str, List[Tuple[float, float]]]\n        A dictionary with 'bids' and 'asks' keys, each with a list of\n        (price, quantity) tuples representing the order book depth.\n\n    Notes\n    -----\n    This method provides a view of the current state of the order book,\n    showing the available liquidity at different price levels. This is\n    useful for market data display and analysis.\n\n    The depth snapshot is often used to create a \"market depth\" or \"level 2\"\n    view of the market, showing the available liquidity at different price\n    points.\n\n    Examples\n    --------\n    &gt;&gt;&gt; book = OrderBook(\"AAPL\")\n    &gt;&gt;&gt; buy_order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"buy\",\n    ...     quantity=10,\n    ...     price=150.0,\n    ...     trader_id=\"trader1\"\n    ... )\n    &gt;&gt;&gt; book.add_order(buy_order)\n    []\n    &gt;&gt;&gt; sell_order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"sell\",\n    ...     quantity=5,\n    ...     price=151.0,\n    ...     trader_id=\"trader2\"\n    ... )\n    &gt;&gt;&gt; book.add_order(sell_order)\n    []\n    &gt;&gt;&gt; depth = book.depth_snapshot()\n    &gt;&gt;&gt; depth[\"bids\"]\n    [(150.0, 10.0)]\n    &gt;&gt;&gt; depth[\"asks\"]\n    [(151.0, 5.0)]\n    \"\"\"\n    bids = []\n    for level in self.bids[:levels]:\n        bids.append((level.price, level.total_quantity))\n    asks = []\n    for level in self.asks[:levels]:\n        asks.append((level.price, level.total_quantity))\n\n    result = {\"bids\": bids, \"asks\": asks}\n    return result\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook.get_order","title":"get_order","text":"<pre><code>get_order(order_id: str) -&gt; Optional[Order]\n</code></pre> <p>Get an order from the book by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>The ID of the order to get.</p> required <p>Returns:</p> Type Description <code>Optional[Order]</code> <p>The order with the specified ID, or None if not found.</p> Notes <p>This method searches for an order in the book by its ID. It uses the order_price_map to quickly determine which side of the book to search and at which price level.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; book.add_order(order)\n[]\n&gt;&gt;&gt; retrieved = book.get_order(order.order_id)\n&gt;&gt;&gt; retrieved.order_id == order.order_id\nTrue\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def get_order(self, order_id: str) -&gt; Optional[Order]:\n    \"\"\"\n    Get an order from the book by its ID.\n\n    Parameters\n    ----------\n    order_id : str\n        The ID of the order to get.\n\n    Returns\n    -------\n    Optional[Order]\n        The order with the specified ID, or None if not found.\n\n    Notes\n    -----\n    This method searches for an order in the book by its ID. It uses the\n    order_price_map to quickly determine which side of the book to search\n    and at which price level.\n\n    Examples\n    --------\n    &gt;&gt;&gt; book = OrderBook(\"AAPL\")\n    &gt;&gt;&gt; order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"buy\",\n    ...     quantity=10,\n    ...     price=150.0,\n    ...     trader_id=\"trader1\"\n    ... )\n    &gt;&gt;&gt; book.add_order(order)\n    []\n    &gt;&gt;&gt; retrieved = book.get_order(order.order_id)\n    &gt;&gt;&gt; retrieved.order_id == order.order_id\n    True\n    \"\"\"\n    if order_id not in self.order_price_map:\n        return None\n\n    price = self.order_price_map[order_id]\n    order_list = self.bids if self._is_bid_price(price) else self.asks\n\n    for level in order_list:\n        if level.price == price:\n            for order in level.orders:\n                if order.order_id == order_id:\n                    return order\n\n    return None\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.OrderBook.get_recent_trades","title":"get_recent_trades","text":"<pre><code>get_recent_trades(limit: int = 10) -&gt; List[Trade]\n</code></pre> <p>Get the most recent trades.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The maximum number of trades to return.</p> <code>10</code> <p>Returns:</p> Type Description <code>List[Trade]</code> <p>The most recent trades, newest first, up to the specified limit.</p> Notes <p>This method returns the most recent trades that occurred in this order book. The trades are returned in reverse chronological order (newest first).</p> <p>The order book maintains a circular buffer of the last 100 trades, so requesting more than 100 trades will still return at most 100.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; book = OrderBook(\"AAPL\")\n&gt;&gt;&gt; buy_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; book.add_order(buy_order)\n[]\n&gt;&gt;&gt; sell_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"sell\",\n...     quantity=5,\n...     price=150.0,\n...     trader_id=\"trader2\"\n... )\n&gt;&gt;&gt; trades = book.add_order(sell_order)\n&gt;&gt;&gt; len(trades)\n1\n&gt;&gt;&gt; recent = book.get_recent_trades()\n&gt;&gt;&gt; len(recent)\n1\n&gt;&gt;&gt; recent[0].quantity\n5.0\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def get_recent_trades(self, limit: int = 10) -&gt; List[Trade]:\n    \"\"\"\n    Get the most recent trades.\n\n    Parameters\n    ----------\n    limit : int, default=10\n        The maximum number of trades to return.\n\n    Returns\n    -------\n    List[Trade]\n        The most recent trades, newest first, up to the specified limit.\n\n    Notes\n    -----\n    This method returns the most recent trades that occurred in this order\n    book. The trades are returned in reverse chronological order (newest\n    first).\n\n    The order book maintains a circular buffer of the last 100 trades,\n    so requesting more than 100 trades will still return at most 100.\n\n    Examples\n    --------\n    &gt;&gt;&gt; book = OrderBook(\"AAPL\")\n    &gt;&gt;&gt; buy_order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"buy\",\n    ...     quantity=10,\n    ...     price=150.0,\n    ...     trader_id=\"trader1\"\n    ... )\n    &gt;&gt;&gt; book.add_order(buy_order)\n    []\n    &gt;&gt;&gt; sell_order = Order(\n    ...     instrument_id=\"AAPL\",\n    ...     side=\"sell\",\n    ...     quantity=5,\n    ...     price=150.0,\n    ...     trader_id=\"trader2\"\n    ... )\n    &gt;&gt;&gt; trades = book.add_order(sell_order)\n    &gt;&gt;&gt; len(trades)\n    1\n    &gt;&gt;&gt; recent = book.get_recent_trades()\n    &gt;&gt;&gt; len(recent)\n    1\n    &gt;&gt;&gt; recent[0].quantity\n    5.0\n    \"\"\"\n    return list(self.trades)[-limit:]\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.PriceLevel","title":"PriceLevel  <code>dataclass</code>","text":"<pre><code>PriceLevel(price: float, orders: deque = deque(), total_quantity: float = 0)\n</code></pre> <p>Represents a price level in the order book.</p> <p>A price level is a collection of orders at the same price point in the order book. Orders at the same price level are prioritized by time (first in, first out). The price level tracks the total quantity of all orders at this price, which is used for market depth calculations.</p> <p>Parameters:</p> Name Type Description Default <code>price</code> <code>float</code> <p>The price level. This is the price at which all orders in this level will execute.</p> required <code>orders</code> <code>deque</code> <p>Queue of orders at this price level, sorted by time priority (first in, first out). If not provided, an empty queue is created.</p> <code>deque()</code> <code>total_quantity</code> <code>float</code> <p>Total quantity of all orders at this level. This is automatically calculated when orders are added or removed.</p> <code>0</code> <p>Attributes:</p> Name Type Description <code>price</code> <code>float</code> <p>The price level.</p> <code>orders</code> <code>deque</code> <p>Queue of orders at this price level (time priority).</p> <code>total_quantity</code> <code>float</code> <p>Total quantity of all orders at this level.</p> Notes <p>Price levels are a key concept in order book management. They allow for efficient organization of orders by price, which is essential for implementing price-time priority matching algorithms.</p> <p>The total quantity at a price level is an important metric for market participants, as it indicates the liquidity available at that price.</p> <p>In a limit order book, price levels are typically organized in two separate lists:</p> <ol> <li>Bid price levels (buy orders) - sorted in descending order (highest first)</li> <li>Ask price levels (sell orders) - sorted in ascending order (lowest first)</li> </ol> <p>This organization allows for efficient matching of incoming orders against the best available prices.</p> TradingContext <p>This implementation assumes: - Price-time priority (orders at the same price are executed in time order) - No hidden or iceberg orders (all order quantity is visible) - No pro-rata matching (where orders at the same price are matched   proportionally to their size) - No minimum quantity requirements for order matching</p> <p>Examples:</p> <p>Creating a price level and adding orders:</p> <pre><code>&gt;&gt;&gt; from collections import deque\n&gt;&gt;&gt; from .order import Order\n&gt;&gt;&gt; level = PriceLevel(price=150.0)\n&gt;&gt;&gt; buy_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=10,\n...     price=150.0,\n...     trader_id=\"trader1\"\n... )\n&gt;&gt;&gt; level.add_order(buy_order)\n&gt;&gt;&gt; level.total_quantity\n10.0\n&gt;&gt;&gt; second_order = Order(\n...     instrument_id=\"AAPL\",\n...     side=\"buy\",\n...     quantity=5,\n...     price=150.0,\n...     trader_id=\"trader2\"\n... )\n&gt;&gt;&gt; level.add_order(second_order)\n&gt;&gt;&gt; level.total_quantity\n15.0\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.PriceLevel-functions","title":"Functions","text":""},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.PriceLevel.add_order","title":"add_order","text":"<pre><code>add_order(order: Order) -&gt; None\n</code></pre> <p>Add an order to this price level.</p> <p>Parameters:</p> Name Type Description Default <code>order</code> <code>Order</code> <p>The order to add to this price level. The order's price should match the price level's price.</p> required Notes <p>This method updates the total quantity of the price level by adding the remaining quantity of the order.</p> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def add_order(self, order: Order) -&gt; None:\n    \"\"\"\n    Add an order to this price level.\n\n    Parameters\n    ----------\n    order : Order\n        The order to add to this price level. The order's price should match\n        the price level's price.\n\n    Notes\n    -----\n    This method updates the total quantity of the price level by adding\n    the remaining quantity of the order.\n    \"\"\"\n    self.orders.append(order)\n    self.total_quantity += order.remaining_quantity\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.PriceLevel.is_empty","title":"is_empty","text":"<pre><code>is_empty() -&gt; bool\n</code></pre> <p>Check if this price level has no orders.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if there are no orders at this price level, False otherwise.</p> Notes <p>Empty price levels are typically removed from the order book to maintain efficiency.</p> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def is_empty(self) -&gt; bool:\n    \"\"\"\n    Check if this price level has no orders.\n\n    Returns\n    -------\n    bool\n        True if there are no orders at this price level, False otherwise.\n\n    Notes\n    -----\n    Empty price levels are typically removed from the order book to\n    maintain efficiency.\n    \"\"\"\n    return len(self.orders) == 0\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.PriceLevel.remove_order","title":"remove_order","text":"<pre><code>remove_order(order_id: str) -&gt; Optional[Order]\n</code></pre> <p>Remove an order from this price level by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>The ID of the order to remove.</p> required <p>Returns:</p> Type Description <code>Optional[Order]</code> <p>The removed order, or None if not found.</p> Notes <p>This method updates the total quantity of the price level by subtracting the remaining quantity of the removed order.</p> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def remove_order(self, order_id: str) -&gt; Optional[Order]:\n    \"\"\"\n    Remove an order from this price level by its ID.\n\n    Parameters\n    ----------\n    order_id : str\n        The ID of the order to remove.\n\n    Returns\n    -------\n    Optional[Order]\n        The removed order, or None if not found.\n\n    Notes\n    -----\n    This method updates the total quantity of the price level by subtracting\n    the remaining quantity of the removed order.\n    \"\"\"\n    for i, order in enumerate(self.orders):\n        if order.order_id == order_id:\n            removed_order = self.orders[i]\n            self.total_quantity -= removed_order.remaining_quantity\n            del self.orders[i]\n            return removed_order\n    return None\n</code></pre>"},{"location":"reference/order_book/#intern_trading_game.domain.exchange.order_book.PriceLevel.update_quantity","title":"update_quantity","text":"<pre><code>update_quantity(order_id: str, new_quantity: float) -&gt; None\n</code></pre> <p>Update the quantity of an order at this price level.</p> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>The ID of the order to update.</p> required <code>new_quantity</code> <code>float</code> <p>The new remaining quantity for the order.</p> required Notes <p>This method updates the total quantity of the price level to reflect the change in the order's quantity.</p> Source code in <code>src/intern_trading_game/domain/exchange/order_book.py</code> <pre><code>def update_quantity(self, order_id: str, new_quantity: float) -&gt; None:\n    \"\"\"\n    Update the quantity of an order at this price level.\n\n    Parameters\n    ----------\n    order_id : str\n        The ID of the order to update.\n    new_quantity : float\n        The new remaining quantity for the order.\n\n    Notes\n    -----\n    This method updates the total quantity of the price level to reflect\n    the change in the order's quantity.\n    \"\"\"\n    for order in self.orders:\n        if order.order_id == order_id:\n            old_quantity = order.remaining_quantity\n            order.remaining_quantity = new_quantity\n            self.total_quantity = (\n                self.total_quantity - old_quantity + new_quantity\n            )\n            break\n</code></pre>"},{"location":"reference/trade/","title":"Trade","text":"<p>Trade module for the Intern Trading Game.</p> <p>This module defines the Trade class, which represents an executed trade.</p>"},{"location":"reference/trade/#intern_trading_game.domain.exchange.trade-classes","title":"Classes","text":""},{"location":"reference/trade/#intern_trading_game.domain.exchange.trade.Trade","title":"Trade  <code>dataclass</code>","text":"<pre><code>Trade(instrument_id: str, buyer_id: str, seller_id: str, price: float, quantity: float, buyer_order_id: str, seller_order_id: str, aggressor_side: str, timestamp: datetime = datetime.now(), trade_id: str = lambda: str(uuid.uuid4())())\n</code></pre> <p>Represents an executed trade between two orders.</p> <p>A trade occurs when two orders are matched in the exchange. It records the details of the transaction, including the instrument, price, quantity, and the identities of the buyer and seller. Each trade has a unique identifier and a timestamp recording when it occurred.</p> <p>Parameters:</p> Name Type Description Default <code>instrument_id</code> <code>str</code> <p>The ID of the instrument that was traded.</p> required <code>buyer_id</code> <code>str</code> <p>The ID of the trader who bought.</p> required <code>seller_id</code> <code>str</code> <p>The ID of the trader who sold.</p> required <code>price</code> <code>float</code> <p>The execution price of the trade. Must be positive.</p> required <code>quantity</code> <code>float</code> <p>The quantity that was traded. Must be positive.</p> required <code>buyer_order_id</code> <code>str</code> <p>The ID of the buy order that participated in this trade.</p> required <code>seller_order_id</code> <code>str</code> <p>The ID of the sell order that participated in this trade.</p> required <code>aggressor_side</code> <code>str</code> <p>Which side initiated the trade (\"buy\" or \"sell\"). The aggressor is the taker who crossed the spread, while the other side is the maker who provided liquidity.</p> required <code>timestamp</code> <code>datetime</code> <p>When the trade occurred. If not provided, the current time is used.</p> <code>now()</code> <code>trade_id</code> <code>str</code> <p>A unique identifier for this trade. If not provided, a UUID is generated.</p> <code>lambda: str(uuid4())()</code> <p>Attributes:</p> Name Type Description <code>instrument_id</code> <code>str</code> <p>The ID of the instrument that was traded.</p> <code>buyer_id</code> <code>str</code> <p>The ID of the trader who bought.</p> <code>seller_id</code> <code>str</code> <p>The ID of the trader who sold.</p> <code>price</code> <code>float</code> <p>The execution price of the trade.</p> <code>quantity</code> <code>float</code> <p>The quantity that was traded.</p> <code>buyer_order_id</code> <code>str</code> <p>The ID of the buy order.</p> <code>seller_order_id</code> <code>str</code> <p>The ID of the sell order.</p> <code>aggressor_side</code> <code>str</code> <p>Which side initiated the trade (\"buy\" or \"sell\").</p> <code>timestamp</code> <code>datetime</code> <p>When the trade occurred.</p> <code>trade_id</code> <code>str</code> <p>A unique identifier for this trade.</p> Notes <p>Trades are the fundamental units of market activity. They represent the actual transfer of assets between market participants at an agreed price.</p> <p>The total value of a trade is calculated as:</p> \\[\\text{Value} = \\text{Price} \\times \\text{Quantity}\\] <p>Trades are created when orders are matched in the exchange. The matching process follows price-time priority, where orders with better prices are matched first, and for orders at the same price, earlier orders are matched first.</p> <p>The aggressor_side field indicates which side initiated the trade: - If aggressor_side = \"buy\": Buyer was the taker (aggressor), seller was the maker - If aggressor_side = \"sell\": Seller was the taker (aggressor), buyer was the maker</p> <p>This distinction is crucial for fee calculations, as makers typically receive rebates while takers pay fees.</p> <p>Trade records are essential for:</p> <ol> <li>Market data dissemination</li> <li>Trade reporting and fee calculation</li> <li>Settlement and clearing processes</li> <li>Historical analysis and backtesting</li> </ol> TradingContext <p>This implementation assumes: - Trades occur at a single price point (no average pricing) - Trades are between exactly two counterparties - No partial executions are tracked separately (each fill creates a new trade) - No fees or commissions are included in the trade record - No settlement or clearing information is included - No regulatory reporting information is included</p> <p>Examples:</p> <p>Creating a trade where buyer was the aggressor (taker):</p> <pre><code>&gt;&gt;&gt; trade = Trade(\n...     instrument_id=\"AAPL\",\n...     buyer_id=\"trader1\",\n...     seller_id=\"trader2\",\n...     price=150.0,\n...     quantity=10,\n...     buyer_order_id=\"order1\",\n...     seller_order_id=\"order2\",\n...     aggressor_side=\"buy\"  # Buyer crossed the spread\n... )\n&gt;&gt;&gt; trade.value\n1500.0\n</code></pre> <p>Converting a trade to a dictionary:</p> <pre><code>&gt;&gt;&gt; trade_dict = trade.to_dict()\n&gt;&gt;&gt; trade_dict[\"instrument_id\"]\n'AAPL'\n&gt;&gt;&gt; trade_dict[\"aggressor_side\"]\n'buy'\n</code></pre>"},{"location":"reference/trade/#intern_trading_game.domain.exchange.trade.Trade-attributes","title":"Attributes","text":""},{"location":"reference/trade/#intern_trading_game.domain.exchange.trade.Trade.value","title":"value  <code>property</code>","text":"<pre><code>value: float\n</code></pre> <p>Calculate the total value of this trade.</p> <p>The value is calculated as the product of price and quantity, representing the total amount of money exchanged in this trade.</p> <p>Returns:</p> Type Description <code>float</code> <p>The trade value (price * quantity).</p> Notes <p>This is a key metric for trade analysis and reporting. It represents the total economic value of the transaction.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trade = Trade(\n...     instrument_id=\"AAPL\",\n...     buyer_id=\"trader1\",\n...     seller_id=\"trader2\",\n...     price=150.0,\n...     quantity=10,\n...     buyer_order_id=\"order1\",\n...     seller_order_id=\"order2\"\n... )\n&gt;&gt;&gt; trade.value\n1500.0\n</code></pre>"},{"location":"reference/trade/#intern_trading_game.domain.exchange.trade.Trade-functions","title":"Functions","text":""},{"location":"reference/trade/#intern_trading_game.domain.exchange.trade.Trade.__post_init__","title":"__post_init__","text":"<pre><code>__post_init__()\n</code></pre> <p>Validate the trade after creation.</p> Source code in <code>src/intern_trading_game/domain/exchange/trade.py</code> <pre><code>def __post_init__(self):\n    \"\"\"Validate the trade after creation.\"\"\"\n    if self.price &lt;= 0:\n        raise ValueError(\"Trade price must be positive\")\n\n    if self.quantity &lt;= 0:\n        raise ValueError(\"Trade quantity must be positive\")\n\n    if self.aggressor_side not in [\"buy\", \"sell\"]:\n        raise ValueError(\"Aggressor side must be 'buy' or 'sell'\")\n</code></pre>"},{"location":"reference/trade/#intern_trading_game.domain.exchange.trade.Trade.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; dict\n</code></pre> <p>Convert the trade to a dictionary representation.</p> <p>Creates a dictionary containing all the trade details, suitable for serialization, storage, or transmission.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the trade details, including: - trade_id: The unique identifier for this trade - instrument_id: The ID of the instrument that was traded - buyer_id: The ID of the trader who bought - seller_id: The ID of the trader who sold - price: The execution price of the trade - quantity: The quantity that was traded - timestamp: The ISO-formatted timestamp of when the trade occurred - buyer_order_id: The ID of the buy order - seller_order_id: The ID of the sell order - value: The total value of the trade (price * quantity)</p> Notes <p>This method is useful for: - Converting trade objects to JSON for API responses - Storing trade records in databases - Generating trade reports</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trade = Trade(\n...     instrument_id=\"AAPL\",\n...     buyer_id=\"trader1\",\n...     seller_id=\"trader2\",\n...     price=150.0,\n...     quantity=10,\n...     buyer_order_id=\"order1\",\n...     seller_order_id=\"order2\"\n... )\n&gt;&gt;&gt; trade_dict = trade.to_dict()\n&gt;&gt;&gt; trade_dict[\"instrument_id\"]\n'AAPL'\n&gt;&gt;&gt; trade_dict[\"value\"]\n1500.0\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/trade.py</code> <pre><code>def to_dict(self) -&gt; dict:\n    \"\"\"\n    Convert the trade to a dictionary representation.\n\n    Creates a dictionary containing all the trade details, suitable for\n    serialization, storage, or transmission.\n\n    Returns\n    -------\n    dict\n        A dictionary containing the trade details, including:\n        - trade_id: The unique identifier for this trade\n        - instrument_id: The ID of the instrument that was traded\n        - buyer_id: The ID of the trader who bought\n        - seller_id: The ID of the trader who sold\n        - price: The execution price of the trade\n        - quantity: The quantity that was traded\n        - timestamp: The ISO-formatted timestamp of when the trade occurred\n        - buyer_order_id: The ID of the buy order\n        - seller_order_id: The ID of the sell order\n        - value: The total value of the trade (price * quantity)\n\n    Notes\n    -----\n    This method is useful for:\n    - Converting trade objects to JSON for API responses\n    - Storing trade records in databases\n    - Generating trade reports\n\n    Examples\n    --------\n    &gt;&gt;&gt; trade = Trade(\n    ...     instrument_id=\"AAPL\",\n    ...     buyer_id=\"trader1\",\n    ...     seller_id=\"trader2\",\n    ...     price=150.0,\n    ...     quantity=10,\n    ...     buyer_order_id=\"order1\",\n    ...     seller_order_id=\"order2\"\n    ... )\n    &gt;&gt;&gt; trade_dict = trade.to_dict()\n    &gt;&gt;&gt; trade_dict[\"instrument_id\"]\n    'AAPL'\n    &gt;&gt;&gt; trade_dict[\"value\"]\n    1500.0\n    \"\"\"\n    return {\n        \"trade_id\": self.trade_id,\n        \"instrument_id\": self.instrument_id,\n        \"buyer_id\": self.buyer_id,\n        \"seller_id\": self.seller_id,\n        \"price\": self.price,\n        \"quantity\": self.quantity,\n        \"aggressor_side\": self.aggressor_side,\n        \"timestamp\": self.timestamp.isoformat(),\n        \"buyer_order_id\": self.buyer_order_id,\n        \"seller_order_id\": self.seller_order_id,\n        \"value\": self.value,\n    }\n</code></pre>"},{"location":"reference/venue/","title":"Venue","text":"<p>Exchange Venue module for the Intern Trading Game.</p> <p>This module defines the ExchangeVenue class, which is the main entry point for the exchange.</p>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue-classes","title":"Classes","text":""},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue","title":"ExchangeVenue","text":"<pre><code>ExchangeVenue(matching_engine: Optional[MatchingEngine] = None)\n</code></pre> <p>The main exchange venue that handles order submission and matching.</p> <p>This class represents a trading venue where financial instruments can be listed and traded. It maintains separate order books for each instrument, handles order submission, matching, and cancellation, and provides market data such as order book depth and trade history.</p> <p>The exchange implements a standard price-time priority matching algorithm, where orders are matched based on price first (best prices get priority) and then by time (earlier orders at the same price get priority).</p> <p>Parameters:</p> Name Type Description Default <code>matching_engine</code> <code>MatchingEngine</code> <p>The matching engine to use for order processing. If not provided, defaults to ContinuousMatchingEngine for immediate order matching.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>order_books</code> <code>Dict[str, OrderBook]</code> <p>Map of instrument IDs to their order books.</p> <code>instruments</code> <code>Dict[str, Instrument]</code> <p>Map of instrument IDs to their instrument objects.</p> <code>all_order_ids</code> <code>Set[str]</code> <p>Set of all order IDs across all books.</p> <code>matching_engine</code> <code>MatchingEngine</code> <p>The engine responsible for order matching logic.</p> Notes <p>The exchange venue is the central component of a trading system, responsible for maintaining fair and orderly markets. It implements the core matching logic that pairs buyers with sellers according to well-defined rules.</p> <p>The matching algorithm follows price-time priority:</p> \\[\\text{Priority} = (\\text{Price}, \\text{Time})\\] <p>For buy orders, higher prices have higher priority. For sell orders, lower prices have higher priority. For orders at the same price, earlier orders have higher priority.</p> TradingContext <p>This implementation assumes: - A central limit order book model - Configurable matching mode (continuous or batch) - No circuit breakers or trading halts - No fees or commissions - No position limits or risk checks - No support for hidden orders, iceberg orders, or other advanced order types - All orders can be partially filled - No cross-instrument strategies or basket orders</p> <p>The matching engine can be switched between continuous and batch modes to support different trading scenarios. Batch mode is particularly useful for fair order processing in game environments.</p> <p>Examples:</p> <p>Creating an exchange with continuous matching (default):</p> <pre><code>&gt;&gt;&gt; exchange = ExchangeVenue()\n&gt;&gt;&gt; apple_stock = Instrument(symbol=\"AAPL\", underlying=\"AAPL\")\n&gt;&gt;&gt; exchange.list_instrument(apple_stock)\n</code></pre> <p>Using batch matching for fair order processing:</p> <pre><code>&gt;&gt;&gt; from .matching_engine import BatchMatchingEngine\n&gt;&gt;&gt; batch_exchange = ExchangeVenue(matching_engine=BatchMatchingEngine())\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Orders are collected during submission\n&gt;&gt;&gt; order1 = Order(instrument_id=\"AAPL\", side=\"buy\", quantity=10,\n...                price=150.0, trader_id=\"trader1\")\n&gt;&gt;&gt; result1 = batch_exchange.submit_order(order1)\n&gt;&gt;&gt; result1.status\n'pending'\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Execute batch to process all orders\n&gt;&gt;&gt; batch_results = batch_exchange.execute_batch()\n&gt;&gt;&gt; batch_results[\"AAPL\"][order1.order_id].status\n'accepted'\n</code></pre> <p>Initialize the exchange venue.</p> <p>Parameters:</p> Name Type Description Default <code>matching_engine</code> <code>MatchingEngine</code> <p>The matching engine to use. Defaults to ContinuousMatchingEngine if not provided.</p> <code>None</code> Notes <p>The choice of matching engine determines how orders are processed: - ContinuousMatchingEngine: Orders match immediately upon submission - BatchMatchingEngine: Orders are collected and matched in batches</p> <p>This design allows the exchange to support different trading scenarios without changing the core order management logic.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def __init__(self, matching_engine: Optional[MatchingEngine] = None):\n    \"\"\"Initialize the exchange venue.\n\n    Parameters\n    ----------\n    matching_engine : MatchingEngine, optional\n        The matching engine to use. Defaults to ContinuousMatchingEngine\n        if not provided.\n\n    Notes\n    -----\n    The choice of matching engine determines how orders are processed:\n    - ContinuousMatchingEngine: Orders match immediately upon submission\n    - BatchMatchingEngine: Orders are collected and matched in batches\n\n    This design allows the exchange to support different trading scenarios\n    without changing the core order management logic.\n    \"\"\"\n    # Map of instrument IDs to their order books\n    self.order_books: Dict[str, OrderBook] = {}\n\n    # Map of instrument IDs to their instrument objects\n    self.instruments: Dict[str, Instrument] = {}\n\n    # Set of all order IDs across all books\n    self.all_order_ids: Set[str] = set()\n\n    # Initialize matching engine - default to continuous if not specified\n    # This maintains backward compatibility while allowing batch mode\n    self.matching_engine = matching_engine or ContinuousMatchingEngine()\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue-functions","title":"Functions","text":""},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.cancel_order","title":"cancel_order","text":"<pre><code>cancel_order(order_id: str, trader_id: str) -&gt; bool\n</code></pre> <p>Cancel an order.</p> <p>Args:     order_id (str): The ID of the order to cancel.     trader_id (str): The ID of the trader who owns the order.</p> <p>Returns:     bool: True if the order was cancelled, False otherwise.</p> <p>Raises:     ValueError: If the trader doesn't own the order.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def cancel_order(self, order_id: str, trader_id: str) -&gt; bool:\n    \"\"\"\n    Cancel an order.\n\n    Args:\n        order_id (str): The ID of the order to cancel.\n        trader_id (str): The ID of the trader who owns the order.\n\n    Returns:\n        bool: True if the order was cancelled, False otherwise.\n\n    Raises:\n        ValueError: If the trader doesn't own the order.\n    \"\"\"\n    # Check if the order exists\n    if order_id not in self.all_order_ids:\n        return False\n\n    # Find the order book that contains this order\n    for book in self.order_books.values():\n        order = book.get_order(order_id)\n        if order:\n            # Check if the trader owns the order\n            if order.trader_id != trader_id:\n                raise ValueError(\n                    f\"Trader {trader_id} does not own order {order_id}\"\n                )\n\n            # Cancel the order\n            cancelled = book.cancel_order(order_id)\n            if cancelled:\n                self.all_order_ids.remove(order_id)\n                return True\n\n            return False\n\n    return False\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.execute_batch","title":"execute_batch","text":"<pre><code>execute_batch() -&gt; Dict[str, Dict[str, OrderResult]]\n</code></pre> <p>Execute batch matching for all instruments.</p> <p>This method triggers the matching engine to process any pending orders that have been collected. In continuous mode, this is a no-op since orders are matched immediately. In batch mode, this processes all pending orders with fair randomization.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, OrderResult]]</code> <p>Results organized by instrument ID, then order ID. Empty dict for continuous mode.</p> Notes <p>This method should be called at designated times in the trading cycle (e.g., T+3:30 in the game loop). The exact behavior depends on the configured matching engine.</p> <p>For batch mode: - All pending orders are processed simultaneously - Orders at the same price are randomized fairly - Results include the final status of each order</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # In batch mode\n&gt;&gt;&gt; exchange = ExchangeVenue(BatchMatchingEngine())\n&gt;&gt;&gt; # ... submit multiple orders ...\n&gt;&gt;&gt; results = exchange.execute_batch()\n&gt;&gt;&gt; for instrument_id, instrument_results in results.items():\n...     for order_id, result in instrument_results.items():\n...         print(f\"Order {order_id}: {result.status}\")\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def execute_batch(self) -&gt; Dict[str, Dict[str, OrderResult]]:\n    \"\"\"Execute batch matching for all instruments.\n\n    This method triggers the matching engine to process any pending\n    orders that have been collected. In continuous mode, this is a no-op\n    since orders are matched immediately. In batch mode, this processes\n    all pending orders with fair randomization.\n\n    Returns\n    -------\n    Dict[str, Dict[str, OrderResult]]\n        Results organized by instrument ID, then order ID.\n        Empty dict for continuous mode.\n\n    Notes\n    -----\n    This method should be called at designated times in the trading\n    cycle (e.g., T+3:30 in the game loop). The exact behavior depends\n    on the configured matching engine.\n\n    For batch mode:\n    - All pending orders are processed simultaneously\n    - Orders at the same price are randomized fairly\n    - Results include the final status of each order\n\n    Examples\n    --------\n    &gt;&gt;&gt; # In batch mode\n    &gt;&gt;&gt; exchange = ExchangeVenue(BatchMatchingEngine())\n    &gt;&gt;&gt; # ... submit multiple orders ...\n    &gt;&gt;&gt; results = exchange.execute_batch()\n    &gt;&gt;&gt; for instrument_id, instrument_results in results.items():\n    ...     for order_id, result in instrument_results.items():\n    ...         print(f\"Order {order_id}: {result.status}\")\n    \"\"\"\n    # Delegate to the matching engine\n    # The engine knows whether it has pending orders to process\n    return self.matching_engine.execute_batch(self.order_books)\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.get_all_instruments","title":"get_all_instruments","text":"<pre><code>get_all_instruments() -&gt; List[Instrument]\n</code></pre> <p>Get all instruments listed on the exchange.</p> <p>Returns:     List[Instrument]: All registered instruments.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def get_all_instruments(self) -&gt; List[Instrument]:\n    \"\"\"\n    Get all instruments listed on the exchange.\n\n    Returns:\n        List[Instrument]: All registered instruments.\n    \"\"\"\n    return list(self.instruments.values())\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.get_market_summary","title":"get_market_summary","text":"<pre><code>get_market_summary(instrument_id: str) -&gt; Dict[str, object]\n</code></pre> <p>Get a summary of the current market state for an instrument.</p> <p>Args:     instrument_id (str): The ID of the instrument.</p> <p>Returns:     Dict: A dictionary containing the best bid/ask and recent trades.</p> <p>Raises:     ValueError: If the instrument doesn't exist.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def get_market_summary(self, instrument_id: str) -&gt; Dict[str, object]:\n    \"\"\"\n    Get a summary of the current market state for an instrument.\n\n    Args:\n        instrument_id (str): The ID of the instrument.\n\n    Returns:\n        Dict: A dictionary containing the best bid/ask and recent trades.\n\n    Raises:\n        ValueError: If the instrument doesn't exist.\n    \"\"\"\n    if instrument_id not in self.order_books:\n        raise ValueError(f\"Instrument {instrument_id} not found\")\n\n    book = self.order_books[instrument_id]\n\n    return {\n        \"instrument_id\": instrument_id,\n        \"best_bid\": book.best_bid(),\n        \"best_ask\": book.best_ask(),\n        \"last_trades\": book.get_recent_trades(5),\n        \"depth\": book.depth_snapshot(),\n    }\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.get_matching_mode","title":"get_matching_mode","text":"<pre><code>get_matching_mode() -&gt; str\n</code></pre> <p>Get the current matching mode of the exchange.</p> <p>Returns:</p> Type Description <code>str</code> <p>Either \"continuous\" or \"batch\"</p> Notes <p>This is useful for strategies or systems that need to adapt their behavior based on the matching mode. For example, a strategy might submit orders differently if it knows they won't match immediately.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; exchange = ExchangeVenue()\n&gt;&gt;&gt; exchange.get_matching_mode()\n'continuous'\n&gt;&gt;&gt;\n&gt;&gt;&gt; batch_exchange = ExchangeVenue(BatchMatchingEngine())\n&gt;&gt;&gt; batch_exchange.get_matching_mode()\n'batch'\n</code></pre> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def get_matching_mode(self) -&gt; str:\n    \"\"\"Get the current matching mode of the exchange.\n\n    Returns\n    -------\n    str\n        Either \"continuous\" or \"batch\"\n\n    Notes\n    -----\n    This is useful for strategies or systems that need to adapt their\n    behavior based on the matching mode. For example, a strategy might\n    submit orders differently if it knows they won't match immediately.\n\n    Examples\n    --------\n    &gt;&gt;&gt; exchange = ExchangeVenue()\n    &gt;&gt;&gt; exchange.get_matching_mode()\n    'continuous'\n    &gt;&gt;&gt;\n    &gt;&gt;&gt; batch_exchange = ExchangeVenue(BatchMatchingEngine())\n    &gt;&gt;&gt; batch_exchange.get_matching_mode()\n    'batch'\n    \"\"\"\n    return self.matching_engine.get_mode()\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.get_order_book","title":"get_order_book","text":"<pre><code>get_order_book(instrument_id: str) -&gt; Optional[OrderBook]\n</code></pre> <p>Get the order book for an instrument.</p> <p>Args:     instrument_id (str): The ID of the instrument.</p> <p>Returns:     Optional[OrderBook]: The order book, or None if the instrument         doesn't exist.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def get_order_book(self, instrument_id: str) -&gt; Optional[OrderBook]:\n    \"\"\"\n    Get the order book for an instrument.\n\n    Args:\n        instrument_id (str): The ID of the instrument.\n\n    Returns:\n        Optional[OrderBook]: The order book, or None if the instrument\n            doesn't exist.\n    \"\"\"\n    return self.order_books.get(instrument_id)\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.get_trade_history","title":"get_trade_history","text":"<pre><code>get_trade_history(instrument_id: str, limit: int = 10) -&gt; List[Trade]\n</code></pre> <p>Get the trade history for an instrument.</p> <p>Args:     instrument_id (str): The ID of the instrument.     limit (int): The maximum number of trades to return.</p> <p>Returns:     List[Trade]: The most recent trades, newest first.</p> <p>Raises:     ValueError: If the instrument doesn't exist.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def get_trade_history(\n    self, instrument_id: str, limit: int = 10\n) -&gt; List[Trade]:\n    \"\"\"\n    Get the trade history for an instrument.\n\n    Args:\n        instrument_id (str): The ID of the instrument.\n        limit (int): The maximum number of trades to return.\n\n    Returns:\n        List[Trade]: The most recent trades, newest first.\n\n    Raises:\n        ValueError: If the instrument doesn't exist.\n    \"\"\"\n    if instrument_id not in self.order_books:\n        raise ValueError(f\"Instrument {instrument_id} not found\")\n\n    return self.order_books[instrument_id].get_recent_trades(limit)\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.list_instrument","title":"list_instrument","text":"<pre><code>list_instrument(instrument: Instrument) -&gt; None\n</code></pre> <p>Register an instrument with the exchange.</p> <p>Args:     instrument (Instrument): The instrument to register.</p> <p>Raises:     ValueError: If an instrument with the same ID already exists.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def list_instrument(self, instrument: Instrument) -&gt; None:\n    \"\"\"\n    Register an instrument with the exchange.\n\n    Args:\n        instrument (Instrument): The instrument to register.\n\n    Raises:\n        ValueError: If an instrument with the same ID already exists.\n    \"\"\"\n    instrument_id = instrument.id\n\n    if instrument_id in self.instruments:\n        raise ValueError(\n            f\"Instrument with ID {instrument_id} already exists\"\n        )\n\n    self.instruments[instrument_id] = instrument\n    self.order_books[instrument_id] = OrderBook(instrument_id)\n</code></pre>"},{"location":"reference/venue/#intern_trading_game.domain.exchange.venue.ExchangeVenue.submit_order","title":"submit_order","text":"<pre><code>submit_order(order: Order) -&gt; OrderResult\n</code></pre> <p>Submit an order to the exchange.</p> <p>Args:     order (Order): The order to submit.</p> <p>Returns:     OrderResult: The result of the order submission.</p> <p>Raises:     ValueError: If the instrument doesn't exist or the order ID is         already in use.</p> Notes <p>This method delegates the actual matching logic to the configured matching engine. In continuous mode, orders may match immediately. In batch mode, orders are collected for later processing.</p> Source code in <code>src/intern_trading_game/domain/exchange/venue.py</code> <pre><code>def submit_order(self, order: Order) -&gt; OrderResult:\n    \"\"\"\n    Submit an order to the exchange.\n\n    Args:\n        order (Order): The order to submit.\n\n    Returns:\n        OrderResult: The result of the order submission.\n\n    Raises:\n        ValueError: If the instrument doesn't exist or the order ID is\n            already in use.\n\n    Notes\n    -----\n    This method delegates the actual matching logic to the configured\n    matching engine. In continuous mode, orders may match immediately.\n    In batch mode, orders are collected for later processing.\n    \"\"\"\n    # Validate the order\n    if order.instrument_id not in self.order_books:\n        raise ValueError(f\"Instrument {order.instrument_id} not found\")\n\n    if order.order_id in self.all_order_ids:\n        raise ValueError(f\"Order ID {order.order_id} already exists\")\n\n    # Add the order ID to our set\n    self.all_order_ids.add(order.order_id)\n\n    # Get the order book for this instrument\n    order_book = self.order_books[order.instrument_id]\n\n    # Delegate to the matching engine\n    # This is the key change - we no longer directly call order_book.add_order\n    # Instead, the matching engine decides how to handle the order\n    result = self.matching_engine.submit_order(order, order_book)\n\n    # For batch mode, the order might be pending without fills\n    # For continuous mode, the order might have immediate fills\n    return result\n</code></pre>"},{"location":"technical/","title":"Technical Documentation","text":"<p>Welcome to the technical documentation for the Intern Trading Game. This section contains detailed technical information for developers building trading bots and working with the game infrastructure.</p>"},{"location":"technical/#architecture-design","title":"Architecture &amp; Design","text":""},{"location":"technical/#current-architecture","title":"Current Architecture","text":"<ul> <li>Architecture v3 - Current system architecture (recommended)</li> <li>Architecture v2 - Previous architecture version</li> <li>Architecture v1 - Original architecture design</li> </ul>"},{"location":"technical/#implementation","title":"Implementation","text":"<ul> <li>Build Order - Step-by-step implementation roadmap</li> <li>Implementation Guide - Detailed technical setup</li> </ul>"},{"location":"technical/#developer-resources","title":"Developer Resources","text":""},{"location":"technical/#tutorials","title":"Tutorials","text":"<ul> <li>Market Maker Tutorial - Complete example of building a market maker bot</li> </ul>"},{"location":"technical/#how-to-guides","title":"How-To Guides","text":"<p>Practical guides for common tasks:</p> <ul> <li>How to Submit Orders - Order submission patterns</li> <li>Use REST API - RESTful API integration</li> <li>Use WebSockets - Real-time data streaming</li> <li>WebSocket Integration - Advanced WebSocket patterns</li> </ul> <p>View all How-To guides \u2192</p>"},{"location":"technical/#api-reference","title":"API Reference","text":"<p>Complete API documentation:</p> <ul> <li>API Overview - High-level API architecture</li> <li>Exchange API - Core exchange interface</li> <li>REST API - HTTP endpoints reference</li> <li>WebSocket API - Real-time streaming API</li> <li>Validation API - Order validation rules</li> </ul> <p>View complete API reference \u2192</p>"},{"location":"technical/#explanations","title":"Explanations","text":"<p>In-depth technical concepts:</p> <ul> <li>Order Matching - How the matching engine works</li> <li>Batch Matching - Batch processing algorithm</li> <li>Trading Phases - Tick lifecycle explained</li> <li>Order Validator Design - Validation architecture</li> </ul> <p>View all explanations \u2192</p>"},{"location":"technical/#quick-start","title":"Quick Start","text":"<ol> <li>New to the game? Start with the Market Maker Tutorial</li> <li>Ready to code? Jump to How to Submit Orders</li> <li>Need API details? See the REST API or WebSocket API</li> </ol>"},{"location":"technical/#contributing","title":"Contributing","text":"<ul> <li>Math in Docstrings Guide - Documentation standards for mathematical formulas</li> </ul>"},{"location":"technical/#navigation","title":"Navigation","text":"<p>\u2190 Back to Home | Game Documentation \u2192</p>"},{"location":"technical/architecture-v2/","title":"System Architecture v2 - REST API &amp; Multi-Threading","text":"<p>This document outlines the new multi-threaded, API-based architecture for the Intern Trading Game with hybrid in-memory/database design for maximum exchange performance.</p>"},{"location":"technical/architecture-v2/#overview","title":"Overview","text":"<p>The system uses a hybrid architecture optimizing for exchange performance while maintaining data persistence. The critical trading path operates entirely in-memory, while a separate thread handles asynchronous database writes.</p>"},{"location":"technical/architecture-v2/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>graph TB\n\n%% External Layer - Multiple Bot Processes\nsubgraph \"External Bot Processes\"\n    B1[Bot 1]\n    B2[Bot 2]\n    B3[Bot 3]\n    BN[Bot N]\nend\n\n%% API Layer\nsubgraph \"API Layer (Main Process)\"\n    subgraph \"Thread 1: FastAPI Server\"\n        REST[REST API&lt;br/&gt;Port 8000]\n        WS[WebSocket Server&lt;br/&gt;Market Data &amp; Trades]\n        AUTH[Auth Service&lt;br/&gt;API Key Validation]\n    end\nend\n\n%% Core Processing Threads\nsubgraph \"Core Processing (Threads)\"\n    subgraph \"Thread 2: Order Validator\"\n        OV[Order Validator&lt;br/&gt;Role Constraints]\n        VC[Validation Cache&lt;br/&gt;Positions &amp; Limits]\n    end\n\n    subgraph \"Thread 3: Matching Engine\"\n        ME[Continuous Matcher&lt;br/&gt;Price-Time Priority]\n        OB[Order Books&lt;br/&gt;Per Instrument]\n    end\n\n    subgraph \"Thread 4: Trade Publisher\"\n        TP[Trade Publisher&lt;br/&gt;Execution Reports]\n        PS[Position Service&lt;br/&gt;P&amp;L Tracking]\n    end\n\n    subgraph \"Thread 5: Market Simulator\"\n        PM[Price Model&lt;br/&gt;GBM Generator]\n        VSM[Volatility State Machine&lt;br/&gt;Low/Med/High]\n        MD[Market Publisher&lt;br/&gt;Price Streaming]\n    end\n\n    subgraph \"Thread 6: Event Generator\"\n        EG[Event Generator&lt;br/&gt;News &amp; Market Events]\n        ES[Event Scheduler&lt;br/&gt;Poisson Process]\n        SG[Signal Generator&lt;br/&gt;Trading Signals]\n    end\n\n    subgraph \"Thread 7: Database Writer\"\n        DBW[DB Writer&lt;br/&gt;Batch Inserts]\n    end\n\n    subgraph \"Thread 8: WebSocket Publisher\"\n        WSP[WebSocket Publisher&lt;br/&gt;Async Message Delivery]\n        WSQ[Message Router&lt;br/&gt;Type-based Dispatch]\n    end\nend\n\n%% Thread-Safe Queues\nsubgraph \"Thread Communication (Queues)\"\n    OQ[Order Queue&lt;br/&gt;Thread-Safe]\n    VQ[Validation Queue&lt;br/&gt;Thread-Safe]\n    MQ[Match Queue&lt;br/&gt;Thread-Safe]\n    TQ[Trade Queue&lt;br/&gt;Thread-Safe]\n    PQ[Price Queue&lt;br/&gt;Thread-Safe]\n    EQ[Event Queue&lt;br/&gt;Thread-Safe]\n    SQ[Signal Queue&lt;br/&gt;Thread-Safe]\n    WQ[WebSocket Queue&lt;br/&gt;Thread-Safe]\nend\n\n%% Fast Path - In-Memory Stores\nsubgraph \"In-Memory State\"\n    POS[Position Cache&lt;br/&gt;Dict with RLock]\n    OB_STATE[Order Book State&lt;br/&gt;SortedLists]\n    CACHE[Price Cache&lt;br/&gt;Latest Prices]\n    VOL[Volatility State&lt;br/&gt;Current Regime]\n    ROLE[Role Registry&lt;br/&gt;Team Configs]\nend\n\n%% Slow Path - Database\nsubgraph \"Database (Async Persistence)\"\n    DB[(PostgreSQL/SQLite)]\n    DB_TRADES[Trade History]\n    DB_PRICES[Price History]\n    DB_EVENTS[Event Log]\n    DB_SNAP[Position Snapshots]\nend\n\n%% Async DB Queues\nsubgraph \"Async DB Queues\"\n    DBQ[Trade DB Queue]\n    DBPQ[Price DB Queue]\n    DBEQ[Event DB Queue]\nend\n\n%% External Bot Connections\nB1 --&gt;|HTTP POST /orders| REST\nB2 --&gt;|HTTP POST /orders| REST\nB3 --&gt;|HTTP GET /positions| REST\nBN --&gt;|WebSocket /market-data| WS\n\n%% API to Queue Flow\nREST --&gt;|New Orders| OQ\nAUTH -.-&gt;|Validates| REST\n\n%% Order Processing Pipeline (FAST PATH)\nOQ --&gt;|Orders| OV\nOV --&gt;|Valid Orders| VQ\nVQ --&gt;|To Match| MQ\nMQ --&gt;|Process| ME\nME --&gt;|Trades| TQ\nTQ --&gt;|Results| TP\n\n%% Market Simulation Flow\nPM --&gt;|Prices| PQ\nVSM --&gt;|Vol State| PM\nPQ --&gt;|Broadcast| MD\nMD --&gt;|Stream| WS\n\n%% Event Generation Flow\nEG --&gt;|News Events| EQ\nEQ --&gt;|Process| VSM\nEQ --&gt;|Trigger Signals| SG\nSG --&gt;|Signals| SQ\nSQ --&gt;|Broadcast| WS\n\n%% Trade Results Flow\nTP --&gt;|Executions| WS\nTP --&gt;|Update| PS\n\n%% Position Service Updates (FAST PATH)\nPS --&gt;|Update| POS\n\n%% Async Database Writes (SLOW PATH)\nTP -.-&gt;|Async| DBQ\nDBQ --&gt;|Batch| DBW\nDBW --&gt;|Insert| DB_TRADES\n\nMD -.-&gt;|Async| DBPQ\nDBPQ --&gt;|Batch| DBW\nDBW --&gt;|Insert| DB_PRICES\n\nEG -.-&gt;|Async| DBEQ\nDBEQ --&gt;|Batch| DBW\nDBW --&gt;|Insert| DB_EVENTS\n\n%% Periodic Snapshots\nPS -.-&gt;|Snapshot| DBW\nDBW --&gt;|Save| DB_SNAP\n\n%% Shared State Access (FAST PATH)\nOV -.-&gt;|Read| POS\nOV -.-&gt;|Read| ROLE\nREST -.-&gt;|Read via PS| POS\nME -.-&gt;|Update| OB_STATE\nVSM -.-&gt;|Update| VOL\nPM -.-&gt;|Read| VOL\nMD -.-&gt;|Update| CACHE\n\n%% Signal Examples (Generic)\nSG --&gt;|Volatility Forecasts| SQ\nSG --&gt;|Price Divergence Signals| SQ\nSG --&gt;|Market Sentiment| SQ\nSG --&gt;|Technical Indicators| SQ</code></pre>"},{"location":"technical/architecture-v2/#thread-responsibilities","title":"Thread Responsibilities","text":""},{"location":"technical/architecture-v2/#thread-1-fastapi-server-async","title":"Thread 1: FastAPI Server (Async)","text":"<ul> <li>Handles all HTTP requests</li> <li>Manages WebSocket connections</li> <li>Validates API keys</li> <li>Routes orders to processing pipeline</li> </ul>"},{"location":"technical/architecture-v2/#thread-2-order-validator","title":"Thread 2: Order Validator","text":"<ul> <li>Validates orders against role constraints</li> <li>Checks position limits (via OrderValidator constraints)</li> <li>Enforces trading rules</li> <li>Fast-fail invalid orders</li> <li>Sends rejection notifications to WebSocket queue</li> </ul>"},{"location":"technical/architecture-v2/#thread-3-matching-engine","title":"Thread 3: Matching Engine","text":"<ul> <li>Continuous order matching</li> <li>Maintains order books</li> <li>Executes trades immediately</li> <li>Price-time priority algorithm</li> <li>Sends order acknowledgments to WebSocket queue</li> </ul>"},{"location":"technical/architecture-v2/#thread-4-trade-publisher-position-service","title":"Thread 4: Trade Publisher &amp; Position Service","text":"<ul> <li>Broadcasts executions to bots</li> <li>Sends execution reports to WebSocket queue</li> <li>Calculates fees based on maker/taker status</li> <li>Updates position tracking</li> <li>Calculates P&amp;L</li> <li>Triggers async database writes</li> </ul>"},{"location":"technical/architecture-v2/#thread-5-market-simulator","title":"Thread 5: Market Simulator","text":"<ul> <li>Runs price generation model</li> <li>Manages volatility regimes</li> <li>Broadcasts market data</li> <li>Handles regime transitions</li> </ul>"},{"location":"technical/architecture-v2/#thread-6-event-generator","title":"Thread 6: Event Generator","text":"<ul> <li>Schedules random events</li> <li>Processes event impacts</li> <li>Generates trading signals</li> <li>Maintains event history</li> </ul>"},{"location":"technical/architecture-v2/#thread-7-database-writer","title":"Thread 7: Database Writer","text":"<ul> <li>Batch inserts trades to database</li> <li>Saves price history asynchronously</li> <li>Stores event logs</li> <li>Takes periodic position snapshots</li> </ul>"},{"location":"technical/architecture-v2/#thread-8-websocket-publisher","title":"Thread 8: WebSocket Publisher","text":"<ul> <li>Bridges sync threads with async WebSocket connections</li> <li>Routes messages by type to appropriate broadcast methods</li> <li>Handles connection lifecycle per team</li> <li>Ensures message delivery to connected clients only</li> </ul>"},{"location":"technical/architecture-v2/#configuration","title":"Configuration","text":""},{"location":"technical/architecture-v2/#performance-tuning","title":"Performance Tuning","text":"<pre><code>performance:\n  order_queue_size: 10000\n  batch_size: 1000\n  db_write_interval_ms: 100\n  position_snapshot_interval_s: 60\n\nthreading:\n  matching_engine_priority: high\n  db_writer_priority: low\n\nmemory:\n  preallocate_orders: 100000\n  preallocate_trades: 100000\n  position_cache_size: 1000\n</code></pre>"},{"location":"technical/architecture-v2/#next-steps","title":"Next Steps","text":"<ol> <li>Implement in-memory matching engine with SortedList</li> <li>Add position cache with RLock</li> <li>Create database writer thread</li> <li>Implement batch insert logic</li> <li>Add position snapshot system</li> <li>Performance benchmark (target: &lt;10\u03bcs per trade)</li> </ol>"},{"location":"technical/architecture-v3/","title":"Layered Architecture v3 - Current Implementation","text":"<p>This document describes the current layered architecture of the Intern Trading Game as actually implemented, showing how the system is organized into distinct layers with clear responsibilities and dependencies.</p>"},{"location":"technical/architecture-v3/#current-implementation-status","title":"Current Implementation Status","text":"<p>This architecture represents the actual current state of the system, which implements the core trading pipeline. The system currently includes:</p> <ul> <li>DONE</li> <li>Order submission and validation</li> <li>Order matching and trade execution</li> <li>Position tracking and fee calculation</li> <li>Real-time WebSocket notifications</li> <li>TODO</li> <li>Market simulation (not yet implemented)</li> <li>Event generation (not yet implemented)</li> <li>Database persistence (not yet implemented)</li> </ul>"},{"location":"technical/architecture-v3/#architecture-layers","title":"Architecture Layers","text":"<p>The system follows a clean layered architecture with six distinct layers:</p> <pre><code>graph TB\n    subgraph \"External Layer\"\n        BOTS[Trading Bots&lt;br/&gt;External Processes]\n        ADMIN[Admin Tools&lt;br/&gt;Monitoring]\n    end\n\n    subgraph \"API Layer (Infrastructure)\"\n        REST[REST API&lt;br/&gt;FastAPI Server&lt;br/&gt;Main Thread]\n        WS[WebSocket Server&lt;br/&gt;Real-time Updates]\n        AUTH[Authentication&lt;br/&gt;API Key Management]\n    end\n\n    subgraph \"Thread Layer (Infrastructure)\"\n        VT[Validator Thread&lt;br/&gt;Order Queue Processing&lt;br/&gt;Thread 2]\n        MT[Matching Thread&lt;br/&gt;Exchange Interaction&lt;br/&gt;Thread 3]\n        PT[Publisher Thread&lt;br/&gt;Trade Processing&lt;br/&gt;Thread 4]\n        WT[WebSocket Thread&lt;br/&gt;Message Delivery&lt;br/&gt;Thread 8]\n    end\n\n    subgraph \"Service Layer (Business Logic)\"\n        VS[OrderValidationService&lt;br/&gt;Business Rules]\n        MS[OrderMatchingService&lt;br/&gt;Exchange Submission]\n        TS[TradeProcessingService&lt;br/&gt;Trade Orchestration]\n        FS[TradingFeeService&lt;br/&gt;Fee Calculation]\n        PS[PositionManagementService&lt;br/&gt;Position Tracking]\n    end\n\n    subgraph \"Core Domain Layer\"\n        EX[ExchangeVenue&lt;br/&gt;Central Exchange]\n        OV[ConstraintBasedOrderValidator&lt;br/&gt;Validation Engine]\n        ME[ContinuousMatchingEngine&lt;br/&gt;Price-Time Priority]\n        OB[OrderBook&lt;br/&gt;Bid/Ask Management]\n        INS[Instruments&lt;br/&gt;Option Definitions]\n    end\n\n    subgraph \"Data Layer (In-Memory)\"\n        POS[(positions&lt;br/&gt;Dict with RLock)]\n        ORDERS[(orders_this_tick&lt;br/&gt;Dict with RLock)]\n        BOOKS[(Order Books&lt;br/&gt;In ExchangeVenue)]\n        RESP[(pending_orders&lt;br/&gt;Response Events)]\n        Q1[order_queue&lt;br/&gt;API -&gt; Validator]\n        Q2[validation_queue&lt;br/&gt;Validator -&gt; Matcher]\n        Q3[match_queue&lt;br/&gt;For matching engine]\n        Q4[trade_queue&lt;br/&gt;Matcher -&gt; Publisher]\n        Q5[response_queue&lt;br/&gt;For order responses]\n        Q6[websocket_queue&lt;br/&gt;-&gt; WebSocket]\n    end\n\n    %% External connections\n    BOTS --&gt;|HTTP POST /orders| REST\n    BOTS --&gt;|WebSocket /ws| WS\n    ADMIN --&gt;|HTTP GET /positions| REST\n\n    %% API to Thread connections\n    REST --&gt;|Enqueue Order| Q1\n    AUTH -.-&gt;|Validates| REST\n    WS -.-&gt;|Auth Check| AUTH\n\n    %% Thread queue flow\n    VT --&gt;|Reads| Q1\n    VT --&gt;|Writes| Q2\n    MT --&gt;|Reads| Q2\n    MT --&gt;|Writes| Q3\n    MT --&gt;|Reads| Q3\n    MT --&gt;|Writes| Q4\n    PT --&gt;|Reads| Q4\n    PT --&gt;|Writes| Q6\n    WT --&gt;|Reads| Q6\n\n    %% Thread to Service connections\n    VT --&gt;|Uses| VS\n    MT --&gt;|Uses| MS\n    PT --&gt;|Uses| TS\n    PT --&gt;|Uses| FS\n    PT --&gt;|Uses| PS\n\n    %% Service dependencies\n    TS --&gt;|Orchestrates| FS\n    TS --&gt;|Orchestrates| PS\n    VS --&gt;|Uses| OV\n    MS --&gt;|Uses| EX\n\n    %% Service to Core connections\n    VS --&gt;|Validates With| OV\n    MS --&gt;|Submits To| EX\n    EX --&gt;|Contains| ME\n    ME --&gt;|Updates| OB\n    EX --&gt;|Manages| INS\n\n    %% Data access patterns\n    VS -.-&gt;|Reads| POS\n    VS -.-&gt;|Reads| ORDERS\n    PS --&gt;|Updates| POS\n    PT -.-&gt;|Updates| RESP\n    EX --&gt;|Maintains| BOOKS\n\n    %% Response flow\n    VT -.-&gt;|Sets Event| RESP\n    MT -.-&gt;|Sets Event| RESP\n    PT -.-&gt;|Sets Event| RESP\n\n    style BOTS fill:#e1f5fe\n    style REST fill:#fff3e0\n    style WS fill:#fff3e0\n    style AUTH fill:#fff3e0\n    style VT fill:#f3e5f5\n    style MT fill:#f3e5f5\n    style PT fill:#f3e5f5\n    style WT fill:#f3e5f5\n    style VS fill:#e8f5e9\n    style MS fill:#e8f5e9\n    style TS fill:#e8f5e9\n    style FS fill:#e8f5e9\n    style PS fill:#e8f5e9\n    style EX fill:#fff9c4\n    style OV fill:#fff9c4\n    style ME fill:#fff9c4\n    style OB fill:#fff9c4\n    style INS fill:#fff9c4\n    style POS fill:#ffebee\n    style ORDERS fill:#ffebee\n    style BOOKS fill:#ffebee</code></pre>"},{"location":"technical/architecture-v3/#layer-descriptions","title":"Layer Descriptions","text":""},{"location":"technical/architecture-v3/#1-external-layer","title":"1. External Layer","text":"<p>Purpose: External systems and clients that interact with the trading system.</p> <p>Components:</p> <ul> <li>Trading Bots: External processes that submit orders and receive market data</li> <li>Admin Tools: Monitoring and management interfaces</li> </ul> <p>Characteristics:</p> <ul> <li>No knowledge of internal implementation</li> <li>Communicate only through published APIs</li> <li>Can be written in any language</li> </ul>"},{"location":"technical/architecture-v3/#2-api-layer-infrastructure","title":"2. API Layer (Infrastructure)","text":"<p>Purpose: HTTP and WebSocket interfaces for external communication.</p> <p>Components:</p> <ul> <li>REST API: FastAPI server running in the main thread</li> <li><code>/auth/register</code> - Team registration</li> <li><code>/orders</code> - Order submission</li> <li><code>/orders/{order_id}</code> - Order cancellation</li> <li><code>/positions/{team_id}</code> - Position queries</li> <li>WebSocket Server: Real-time execution reports and position updates</li> <li>Authentication: API key validation using <code>team_registry</code></li> </ul> <p>Responsibilities:</p> <ul> <li>Protocol handling (HTTP/WebSocket)</li> <li>Request validation and serialization</li> <li>Authentication and authorization</li> <li>Queue message creation for order processing</li> </ul> <p>Implementation Details:</p> <ul> <li>FastAPI with async/await for high performance</li> <li>Lifespan context manager for startup/shutdown</li> <li>Thread-safe team registry for API key management</li> </ul>"},{"location":"technical/architecture-v3/#3-thread-layer-infrastructure","title":"3. Thread Layer (Infrastructure)","text":"<p>Purpose: Concurrent processing of orders through the trading pipeline.</p> <p>Current Threads (4 threads implemented):</p> <ol> <li>Main Thread: FastAPI server (not shown as separate thread)</li> <li>Validator Thread: Processes order queue, validates constraints</li> <li>Matching Thread: Submits validated orders to exchange</li> <li>Publisher Thread: Processes trades, updates positions, calculates fees</li> <li>WebSocket Thread: Bridges sync queues with async WebSocket delivery</li> </ol> <p>Responsibilities:</p> <ul> <li>Queue processing with blocking <code>get()</code> calls</li> <li>Thread lifecycle management</li> <li>Error handling and logging</li> <li>Service initialization at thread startup</li> </ul> <p>Key Implementation Details:</p> <ul> <li>Daemon threads for automatic cleanup</li> <li>Graceful shutdown via <code>None</code> sentinel values</li> <li>No shared service instances between threads</li> <li>FIFO queue processing for fairness</li> </ul>"},{"location":"technical/architecture-v3/#4-service-layer-business-logic","title":"4. Service Layer (Business Logic)","text":"<p>Purpose: Encapsulates all business logic and orchestration.</p> <p>Implemented Services:</p> <ul> <li>OrderValidationService:</li> <li>Validates new orders against constraints</li> <li>Handles order cancellations with ownership checks</li> <li>Returns standardized <code>OrderResult</code> objects</li> <li>OrderMatchingService:</li> <li>Submits orders to exchange</li> <li>Handles exchange exceptions</li> <li>Provides consistent error responses</li> <li>TradeProcessingService:</li> <li>Orchestrates trade execution flow</li> <li>Calculates fees via <code>TradingFeeService</code></li> <li>Updates positions via <code>PositionManagementService</code></li> <li>Generates execution reports for WebSocket</li> <li>TradingFeeService:</li> <li>Role-based fee calculation</li> <li>Maker/taker fee logic</li> <li>Configurable fee schedules</li> <li>PositionManagementService:</li> <li>Thread-safe position updates</li> <li>Atomic position modifications</li> <li>Position queries</li> </ul> <p>Key Design Principles:</p> <ul> <li>Services are stateless (state in data layer)</li> <li>Services don't know about threads or queues</li> <li>Clear interfaces with single responsibilities</li> <li>Dependency injection for testability</li> </ul>"},{"location":"technical/architecture-v3/#5-core-domain-layer","title":"5. Core Domain Layer","text":"<p>Purpose: Core trading domain models and exchange logic.</p> <p>Components:</p> <ul> <li>ExchangeVenue: Central exchange managing instruments and order books</li> <li>ConstraintBasedOrderValidator: Pluggable validation with role-specific rules</li> <li>ContinuousMatchingEngine: Price-time priority matching algorithm</li> <li>OrderBook: Efficient bid/ask management with sorted lists</li> <li>Instruments: Option contract definitions</li> </ul> <p>Responsibilities:</p> <ul> <li>Order matching algorithm implementation</li> <li>Constraint validation logic</li> <li>Trade generation from matched orders</li> <li>Market structure rule enforcement</li> </ul> <p>Implementation Details:</p> <ul> <li>Thread-safe order book operations</li> <li>Immutable order and trade objects</li> <li>Rich domain models (not anemic)</li> <li>No infrastructure dependencies</li> </ul>"},{"location":"technical/architecture-v3/#6-data-layer","title":"6. Data Layer","text":"<p>Purpose: In-memory state management and inter-thread communication.</p> <p>State Storage:</p> <ul> <li>positions: Team positions with <code>RLock</code> for thread safety</li> <li>orders_this_tick: Order count tracking per tick</li> <li>Order Books: Maintained within <code>ExchangeVenue</code></li> <li>pending_orders: Threading events for synchronous responses</li> </ul> <p>Message Queues (all using Python's thread-safe <code>Queue</code>):</p> <ul> <li>order_queue: REST API -&gt; Validator Thread</li> <li>validation_queue: Validator -&gt; Matcher (currently unused)</li> <li>match_queue: For matching engine operations</li> <li>trade_queue: Matcher -&gt; Publisher Thread</li> <li>response_queue: For order response coordination</li> <li>websocket_queue: All threads -&gt; WebSocket Thread</li> </ul> <p>Key Design Decisions:</p> <ul> <li>All state is in-memory (no database yet)</li> <li>Explicit locking with <code>RLock</code> for reentrancy</li> <li>Queue-based actor model for thread communication</li> <li>Blocking queue operations for simplicity</li> </ul>"},{"location":"technical/architecture-v3/#dependency-rules","title":"Dependency Rules","text":"<p>The architecture enforces strict dependency rules:</p> <ol> <li>Dependencies only flow downward - Higher layers can depend on lower layers, never the reverse</li> <li>Skip layers when appropriate - Not every layer needs to be involved in every operation</li> <li>Infrastructure wraps business - Threads/API are infrastructure, Services/Core are business</li> <li>Core domain is pure - No external dependencies, just business logic</li> </ol>"},{"location":"technical/architecture-v3/#data-flow-example","title":"Data Flow Example","text":""},{"location":"technical/architecture-v3/#complete-order-flow-current-implementation","title":"Complete Order Flow (Current Implementation)","text":"<pre><code>1. Bot -&gt; REST API (POST /orders)\n2. REST API -&gt; order_queue\n3. Validator Thread -&gt; OrderValidationService -&gt; ConstraintBasedOrderValidator\n4. If valid: -&gt; match_queue\n5. Matching Thread -&gt; OrderMatchingService -&gt; ExchangeVenue -&gt; ContinuousMatchingEngine\n6. If matched: -&gt; trade_queue\n7. Publisher Thread -&gt; TradeProcessingService:\n   - -&gt; TradingFeeService (calculate fees)\n   - -&gt; PositionManagementService (update positions)\n   - -&gt; websocket_queue (execution report)\n8. WebSocket Thread -&gt; WebSocketManager -&gt; Bot\n</code></pre>"},{"location":"technical/architecture-v3/#key-architectural-benefits","title":"Key Architectural Benefits","text":"<ol> <li> <p>Testability: Each layer can be tested independently</p> </li> <li> <p>Services tested without threads</p> </li> <li>Core domain tested without services</li> <li> <p>Integration tests at multiple levels</p> </li> <li> <p>Maintainability: Clear responsibilities and boundaries</p> </li> <li> <p>Easy to locate functionality</p> </li> <li> <p>Changes isolated to specific layers</p> </li> <li> <p>Performance: Optimized for low latency</p> </li> <li> <p>In-memory operations only</p> </li> <li>Minimal lock contention</li> <li> <p>Queue-based decoupling</p> </li> <li> <p>Extensibility: Easy to add new components</p> </li> <li> <p>New services plug in easily</p> </li> <li>New constraints without core changes</li> <li>Future database layer won't impact core</li> </ol>"},{"location":"technical/architecture-v3/#future-enhancements-not-yet-implemented","title":"Future Enhancements (Not Yet Implemented)","text":"<p>Based on architecture v2, future additions include:</p> <ol> <li>Market Simulation Layer:</li> <li>Price generation thread (GBM model)</li> <li>Volatility state machine</li> <li> <p>Market data distribution</p> </li> <li> <p>Event System:</p> </li> <li>News event generation</li> <li>Trading signal generation</li> <li> <p>Event impact on volatility</p> </li> <li> <p>Persistence Layer:</p> </li> <li>Database writer thread</li> <li>Async trade recording</li> <li>Position snapshots</li> <li> <p>Crash recovery</p> </li> <li> <p>Enhanced Features:</p> </li> <li>Circuit breakers</li> <li>More order types</li> <li>Multi-instrument trading</li> <li>Risk management</li> </ol>"},{"location":"technical/architecture-v3/#current-limitations","title":"Current Limitations","text":"<ol> <li>No market prices (orders must cross to match)</li> <li>No persistence (everything lost on restart)</li> <li>No market events or volatility</li> <li>Limited to simple limit/market orders</li> <li>No replay or audit capabilities</li> </ol> <p>This architecture provides a solid foundation for the current trading system while maintaining clear extension points for planned enhancements.</p>"},{"location":"technical/architecture/","title":"System Architecture","text":"<p>This document outlines the technical architecture.</p>"},{"location":"technical/architecture/#overview","title":"Overview","text":"<p>Core services handle game mechanics and order matching, domain services manage business logic and market simulation, while persistent data stores maintain game state. The design emphasizes extensibility, allowing new trading roles and market events to be added without modifying existing components.</p>"},{"location":"technical/architecture/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>graph TB\n\n%% External Layer\nsubgraph \"Trading Bot\"\n    TB[Single Bot Interface]\nend\n\n%% Core Services\nsubgraph \"Core Services\"\n    TC[Tick Controller\\nGame Clock]\n    EE[Exchange Engine\\nOrder Matching]\n    OV[Order Validator]\nend\n\n%% Domain Services\nsubgraph \"Domain Services\"\n    PM[Price Model]\n    VSM[Volatility State Machine]\n    ES[Event System\\nNews &amp; Signals]\n    RS[Role Service\\nConstraints &amp; Signals]\n    PS[Position Service\\nPortfolio Management]\n    MD[Market Data Service]\nend\n\n%% Persistent Data Stores\nsubgraph \"Persistent Data Stores\"\n    OB[(Order Books)]\n    PD[(Positions)]\n    MH[(Market History)]\n    GS[(Game State)]\nend\n\n%% Bots to Core\nTB --&gt;|Query Own Positions| PS\nTB --&gt;|Orders| OV\n\n%% Market Data Distribution\nMD --&gt;|Market Data Feed| TB\n\n%% Core to Domain\nTC --&gt;|Tick Events| EE\nTC --&gt;|Tick Events| ES\nTC --&gt;|Tick Events| PM\nTC -.-&gt;|Read/Write| GS\n\n%% Event System\nES --&gt;|Events Trigger State Change| VSM\n\n%% Volatility State Machine\nVSM --&gt;|Volatility Regime| PM\n\n%% Price Model\nPM --&gt;|Prices| EE\nPM --&gt;|Market Data| MD\n\n%% Order Validation and Matching\nOV --&gt;|Validated Orders| EE\nOV --&gt;|Check Constraints| RS\n\n%% Exchange Engine\nEE --&gt;|Trades| PS\nEE -.-&gt;|Read/Write| OB\n\n%% Position Service\nPS -.-&gt;|Read/Write| PD\nPS --&gt;|Positions| OV\n\n%% Role Service\nRS --&gt;|Role-specific Rules| OV\nRS --&gt;|Access Positions| PS\n\n%% Market Data Service\nMD -.-&gt;|Read/Write| MH\n\n%% Styles\nclassDef bots fill:#cfe8fc,stroke:#4287f5,stroke-width:1.5px;\nclassDef core fill:#d1fae5,stroke:#10b981,stroke-width:1.5px;\nclassDef domain fill:#ede9fe,stroke:#8b5cf6,stroke-width:1.5px;\nclassDef persistent fill:#f3e8ff,stroke:#a855f7,stroke-width:1.5px;\n\nclass TB bots\nclass TC,OV,EE core\nclass PM,VSM,ES,RS,PS,MD domain\nclass OB,PD,MH,GS persistent</code></pre>"},{"location":"technical/architecture/#component-responsibilities","title":"Component Responsibilities","text":""},{"location":"technical/architecture/#core-services","title":"Core Services","text":"<p>Matching Engine (Strategy Pattern)</p> <ul> <li>Abstract interface for order matching algorithms</li> <li>ContinuousMatchingEngine: Immediate order matching as orders arrive</li> <li>BatchMatchingEngine: Collects orders and matches at designated time</li> <li>Ensures price priority in all modes</li> <li>Provides fair randomization within price levels for batch mode</li> </ul> <p>Tick Controller</p> <ul> <li>Orchestrates 5-minute tick cycles (T+0:00 to T+5:00)</li> <li>Publishes tick events to all domain services at precise intervals</li> <li>Enforces trading schedule (Tuesday/Thursday, 9:30 AM - 3:00 PM CT)</li> <li>Manages order submission window (T+0:30 to T+3:00)</li> <li>Triggers batch matching at T+3:30</li> </ul> <p>Exchange Engine</p> <ul> <li>Executes order matching via configurable MatchingEngine strategy</li> <li>Supports both continuous (immediate) and batch matching modes</li> <li>Maintains separate order books for each option instrument</li> <li>Processes market, limit, and quote orders</li> <li>Creates trade records with appropriate fees/rebates</li> <li>In batch mode, randomizes orders at same price for fairness</li> <li>ExchangeVenue delegates matching logic to pluggable MatchingEngine</li> <li>Clean separation allows easy addition of new matching algorithms (e.g., pro-rata)</li> </ul> <p>Order Validator</p> <ul> <li>Pre-validates all incoming orders before submission</li> <li>Queries Position Service for current holdings</li> <li>Delegates role-specific checks to Role Service</li> <li>Validates order types allowed per role</li> <li>Returns detailed rejection reasons</li> </ul>"},{"location":"technical/architecture/#domain-services","title":"Domain Services","text":"<p>Price Model</p> <ul> <li>Generates synthetic SPX and SPY underlying prices only</li> <li>Implements correlated Geometric Brownian Motion</li> <li>Maintains SPX-SPY correlation (~0.98) with tracking error</li> <li>Applies volatility parameters from state machine</li> <li>Publishes new prices at each tick start (T+0:00)</li> </ul> <p>Volatility State Machine</p> <ul> <li>Manages three regimes: Low (10%), Medium (20%), High (50%) annualized</li> <li>Processes event impacts to trigger transitions</li> <li>Implements regime persistence via Markov chains</li> <li>Low regime: 50-200 ticks typical duration</li> <li>Medium regime: 30-100 ticks typical duration</li> <li>High regime: 10-50 ticks typical duration</li> </ul> <p>Event System</p> <ul> <li>Generates news events via Poisson process (\u03bb=1 per 1-4 hours)</li> <li>Creates event types: regime shifters (40%), price jumpers (30%), false signals (30%)</li> <li>Publishes event impacts to trigger state changes</li> <li>Distributes advance signals to specific roles</li> <li>Manages signal accuracy (66% for hedge funds, 80% for arbitrage)</li> </ul> <p>Role Service</p> <ul> <li>Market Maker: \u00b150 position limit, 80% quoting requirement, +$0.02 maker rebate</li> <li>Hedge Fund: \u00b150 delta neutrality, 1-5 tick advance volatility signals</li> <li>Arbitrage Desk: 2:1 SPX/SPY ratio constraint, real-time tracking error signals</li> <li>Validates role-specific order types and constraints</li> <li>Manages differential fee structures</li> </ul> <p>Position Service</p> <ul> <li>Tracks positions by player, instrument, and quantity</li> <li>Calculates real-time P&amp;L including all fees</li> <li>Computes portfolio Greeks (delta, gamma, vega, theta)</li> <li>Monitors compliance with role constraints</li> <li>Provides position snapshots for validation</li> </ul> <p>Market Data Service</p> <ul> <li>Publishes underlying prices from Price Model</li> <li>Distributes 5-level order book depth for options</li> <li>Stores all trades with timestamps and participants</li> <li>Maintains historical data for backtesting</li> <li>Streams updates at tick boundaries</li> </ul>"},{"location":"technical/architecture/#data-stores","title":"Data Stores","text":"<ul> <li>Order Books: Active limit/quote orders per option</li> <li>Positions: Player holdings with quantities, average prices, and P&amp;L</li> <li>Market History: Complete time series of prices, trades, and snapshots</li> <li>Game State: Session config, player mappings, current tick, scores</li> </ul>"},{"location":"technical/build-order/","title":"Build Order Checklist - v2 API Architecture","text":""},{"location":"technical/build-order/#phase-1-core-foundation-complete","title":"Phase 1: Core Foundation COMPLETE","text":""},{"location":"technical/build-order/#exchange-infrastructure","title":"Exchange Infrastructure","text":"<ul> <li>[x] Order - Basic order data model</li> <li>[x] Trade - Trade execution record</li> <li>[x] OrderBook - Bid/ask order storage</li> <li>[x] OrderResult - Enhanced with error_code, error_message fields</li> <li>[x] ExchangeVenue - Core exchange with submit_order()</li> <li>[x] MatchingEngine Interface - Strategy pattern for swappable engines</li> <li>[x] BatchMatchingEngine - Fair randomized batch matching</li> <li>[x] Exchange Tests - 45+ comprehensive test cases</li> </ul>"},{"location":"technical/build-order/#validation-system","title":"Validation System","text":"<ul> <li>[x] OrderValidator Interface - Base validation contract</li> <li>[x] ValidationContext - Order validation state container</li> <li>[x] ConstraintBasedOrderValidator - Role-agnostic validation</li> <li>[x] 8 Constraint Types:</li> <li>[x] POSITION_LIMIT - Per-instrument position limits</li> <li>[x] PORTFOLIO_LIMIT - Total portfolio constraints</li> <li>[x] ORDER_SIZE - Min/max order quantities</li> <li>[x] ORDER_RATE - Orders per tick limiting</li> <li>[x] ORDER_TYPE_ALLOWED - Role-specific order types</li> <li>[x] TRADING_WINDOW - Phase-based order acceptance</li> <li>[x] INSTRUMENT_ALLOWED - Instrument restrictions</li> <li>[x] PRICE_RANGE - Limit order price bounds</li> <li>[x] Validation Tests - Complete test coverage</li> </ul>"},{"location":"technical/build-order/#game-loop-legacy","title":"Game Loop (Legacy)","text":"<ul> <li>[x] GameLoop - 5-minute tick orchestration</li> <li>[x] TickPhase Enum - PRE_OPEN, TRADING, etc.</li> <li>[x] GameConfig - Configuration data model</li> <li>[x] TradingStrategy Interface - Bot interface</li> </ul>"},{"location":"technical/build-order/#documentation","title":"Documentation","text":"<ul> <li>[x] Architecture v2 - Complete system design with 7 threads</li> <li>[x] Validation API Reference - Constraint documentation</li> <li>[x] Trading Phases Guide - Batch/continuous market modes</li> </ul>"},{"location":"technical/build-order/#phase-2-rest-api-foundation-complete","title":"Phase 2: REST API Foundation COMPLETE","text":""},{"location":"technical/build-order/#21-fastapi-setup","title":"2.1 FastAPI Setup","text":"<ul> <li>[x] Main application - FastAPI app instance</li> <li>[x] CORS configuration - Allow external bot connections</li> <li>[x] Exception handlers - Consistent error responses</li> <li>[x] Request models - Pydantic schemas for validation</li> <li>[x] Response models - Standardized API responses</li> </ul>"},{"location":"technical/build-order/#22-authentication","title":"2.2 Authentication","text":"<ul> <li>[x] TeamInfo model - Bot registration data</li> <li>[x] API key generation - Unique keys per team</li> <li>[x] Auth middleware - Validate API keys</li> <li>[x] Team registry - In-memory team storage</li> <li>[x] POST /auth/register - Team registration endpoint</li> </ul>"},{"location":"technical/build-order/#23-basic-endpoints","title":"2.3 Basic Endpoints","text":"<ul> <li>[x] POST /orders - Submit new order with client_order_id</li> <li>[ ] DELETE /orders/{id} - Cancel order (deferred to commit 3)</li> <li>[x] GET /positions/{team_id} - Query positions</li> <li>[ ] GET /market/prices - Current prices (future)</li> <li>[x] GET /health - API health check with thread status</li> </ul>"},{"location":"technical/build-order/#phase-3-thread-safe-state","title":"Phase 3: Thread-Safe State","text":""},{"location":"technical/build-order/#31-in-memory-stores","title":"3.1 In-Memory Stores","text":"<ul> <li>[ ] PositionCache - Dict with RLock for positions</li> <li>[ ] OrderBookState - Thread-safe SortedList wrapper</li> <li>[ ] MarketCache - Latest prices with read lock</li> <li>[ ] VolatilityState - Current regime tracking</li> <li>[ ] RoleRegistry - Team role configurations</li> </ul>"},{"location":"technical/build-order/#32-queue-infrastructure","title":"3.2 Queue Infrastructure","text":"<ul> <li>[ ] OrderQueue - API -&gt; Validator</li> <li>[ ] ValidationQueue - Validator -&gt; Matcher</li> <li>[ ] MatchQueue - For matching engine</li> <li>[ ] TradeQueue - Matcher -&gt; Publisher</li> <li>[ ] PriceQueue - Price Model -&gt; Market Data</li> <li>[ ] EventQueue - Events -&gt; Processing</li> <li>[ ] SignalQueue - Signals -&gt; Distribution</li> </ul>"},{"location":"technical/build-order/#33-database-queues","title":"3.3 Database Queues","text":"<ul> <li>[ ] TradeDBQueue - Async trade persistence</li> <li>[ ] PriceDBQueue - Market data archival</li> <li>[ ] EventDBQueue - Event log storage</li> </ul>"},{"location":"technical/build-order/#phase-4-threading-implementation-partial","title":"Phase 4: Threading Implementation (Partial)","text":""},{"location":"technical/build-order/#41-thread-2-order-validator-complete","title":"4.1 Thread 2: Order Validator COMPLETE","text":"<ul> <li>[x] Validator thread wrapper - Queue consumer loop</li> <li>[x] Context builder - Create ValidationContext from state</li> <li>[x] Error response handler - Format rejection messages</li> <li>[x] Constraint config loader - Load market maker constraints</li> <li>[x] Integration with queues - Connect to pipeline</li> <li>[x] WebSocket rejection notifications - Send via queue</li> </ul>"},{"location":"technical/build-order/#42-thread-3-matching-engine-complete","title":"4.2 Thread 3: Matching Engine COMPLETE","text":"<ul> <li>[x] Using ContinuousMatchingEngine - Immediate execution</li> <li>[x] Thread wrapper - Process match queue</li> <li>[x] Trade generation - Exchange creates Trade objects</li> <li>[x] Queue integration - Send trades to publisher</li> <li>[x] WebSocket order acknowledgments - Send via queue</li> </ul>"},{"location":"technical/build-order/#43-thread-4-trade-publisher","title":"4.3 Thread 4: Trade Publisher","text":"<ul> <li>[x] Publisher thread - Consume trade queue</li> <li>[x] Position tracking - Update position dictionary</li> <li>[x] Fee calculation - Based on maker/taker status</li> <li>[x] WebSocket execution reports - Send via queue</li> <li>[ ] P&amp;L calculation - Real-time profit/loss (future)</li> <li>[ ] Async DB write trigger - Queue for persistence (future)</li> </ul>"},{"location":"technical/build-order/#44-thread-5-market-simulator","title":"4.4 Thread 5: Market Simulator","text":"<ul> <li>[ ] Price Model (GBM) - Geometric Brownian Motion</li> <li>[ ] SPX price generation - Primary underlying</li> <li>[ ] SPY correlation - SPX/10 with tracking error</li> <li>[ ] Volatility integration - Use current regime</li> <li>[ ] Market Publisher - Stream via WebSocket</li> </ul>"},{"location":"technical/build-order/#45-thread-6-event-generator","title":"4.5 Thread 6: Event Generator","text":"<ul> <li>[ ] Event types - Fed, economic, geopolitical</li> <li>[ ] Poisson process - Random event timing</li> <li>[ ] Impact calculator - Regime shifts, price jumps</li> <li>[ ] Signal Generator - Create trading signals</li> <li>[ ] Signal distribution - Role-based filtering</li> </ul>"},{"location":"technical/build-order/#46-thread-7-database-writer","title":"4.6 Thread 7: Database Writer","text":"<ul> <li>[ ] Batch accumulator - Collect 1000 trades</li> <li>[ ] Bulk insert logic - Efficient DB writes</li> <li>[ ] Position snapshots - Periodic state saves</li> <li>[ ] Error handling - Queue overflow management</li> <li>[ ] Performance monitoring - Track write latency</li> </ul>"},{"location":"technical/build-order/#47-thread-8-websocket-publisher-complete","title":"4.7 Thread 8: WebSocket Publisher COMPLETE","text":"<ul> <li>[x] WebSocket thread wrapper - Async event loop</li> <li>[x] Queue bridge - asyncio.to_thread for sync/async</li> <li>[x] Message router - Route by type to broadcast methods</li> <li>[x] Connection checks - Only send to connected clients</li> <li>[x] Error handling - Continue on individual failures</li> </ul>"},{"location":"technical/build-order/#phase-5-websocket-layer","title":"Phase 5: WebSocket Layer","text":""},{"location":"technical/build-order/#51-websocket-server","title":"5.1 WebSocket Server","text":"<ul> <li>[x] WebSocket endpoint setup - /ws routes (ready for integration)</li> <li>[x] Connection manager - Track active connections</li> <li>[x] Authentication - Validate on connect</li> <li>[ ] Heartbeat/ping - Keep connections alive</li> <li>[ ] Reconnection support - Handle disconnects</li> </ul>"},{"location":"technical/build-order/#52-data-streams","title":"5.2 Data Streams","text":"<ul> <li>[x] Message types defined - Following FIX conventions</li> <li>[x] Trade execution reports - Real-time fills with fees</li> <li>[x] Order acknowledgments - new_order_ack/reject</li> <li>[x] Position snapshots - On connection</li> <li>[x] Market data format - Price updates structure</li> <li>[x] Full integration - Connected to main.py via Thread 8</li> <li>[ ] Signal distribution - Role-based filtering (future)</li> </ul>"},{"location":"technical/build-order/#phase-6-database-layer","title":"Phase 6: Database Layer","text":""},{"location":"technical/build-order/#61-schema-design","title":"6.1 Schema Design","text":"<ul> <li>[ ] trades table - Execution history</li> <li>[ ] prices table - Market data archive</li> <li>[ ] events table - News event log</li> <li>[ ] positions table - Snapshot storage</li> <li>[ ] teams table - Registration data</li> </ul>"},{"location":"technical/build-order/#62-sqlalchemy-models","title":"6.2 SQLAlchemy Models","text":"<ul> <li>[ ] Trade model - ORM mapping</li> <li>[ ] Price model - Time series data</li> <li>[ ] Event model - Event records</li> <li>[ ] Position model - State snapshots</li> <li>[ ] Database session management - Thread-safe access</li> </ul>"},{"location":"technical/build-order/#phase-7-integration-testing","title":"Phase 7: Integration &amp; Testing","text":""},{"location":"technical/build-order/#71-integration-points","title":"7.1 Integration Points","text":"<ul> <li>[ ] OrderValidator \u2194 Exchange - Validation before matching</li> <li>[ ] PositionService \u2194 OrderValidator - Position limit checks</li> <li>[ ] All threads connected - Full pipeline test</li> <li>[ ] Database persistence - Verify async writes</li> <li>[ ] WebSocket stability - Multi-client test</li> </ul>"},{"location":"technical/build-order/#72-example-bots","title":"7.2 Example Bots","text":"<ul> <li>[ ] Python REST bot - Reference implementation</li> <li>[ ] WebSocket market data - Streaming example</li> <li>[ ] Java bot skeleton - Multi-language support</li> <li>[ ] Performance test bot - Load generation</li> <li>[ ] Migration guide - From embedded to API</li> </ul>"},{"location":"technical/build-order/#73-performance-testing","title":"7.3 Performance Testing","text":"<ul> <li>[ ] Single bot baseline - Latency measurement</li> <li>[ ] 10 bot test - Concurrency check</li> <li>[ ] 30 bot stress test - Full load</li> <li>[ ] Order latency &lt; 10\u03bcs - Matching performance</li> <li>[ ] 1000 orders/second - Throughput target</li> </ul>"},{"location":"technical/build-order/#next-immediate-tasks","title":"Next Immediate Tasks","text":"<ol> <li>Create <code>src/intern_trading_game/api/main.py</code> with FastAPI app</li> <li>Implement <code>POST /orders</code> endpoint with Pydantic models</li> <li>Create <code>PositionCache</code> class with thread-safe operations</li> <li>Add <code>OrderQueue</code> and basic validator thread</li> <li>Test order flow with single REST client</li> </ol>"},{"location":"technical/implementation-guide/","title":"Implementation Guide","text":""},{"location":"technical/implementation-guide/#1-feed-publishing-requirements","title":"1. Feed Publishing Requirements","text":"<ul> <li> <p>Underlying Prices:</p> </li> <li> <p>SPX and SPY spot values published every tick.</p> </li> <li> <p>Option Parameters:</p> </li> <li> <p>Strike list and expirations for each underlying. (Static unless updated.)</p> </li> <li> <p>News Events:</p> </li> <li> <p>Headlines with known triggering probabilities.</p> </li> <li> <p>Snapshot Data (end of tick):</p> </li> <li> <p>Order book state (bids/asks, sizes).</p> </li> <li>All fills and executions.</li> <li> <p>Position and P&amp;L per desk.</p> </li> <li> <p>Signals (Role-Specific):</p> </li> <li> <p>Hedge Fund: Receives advance warning before news events with:</p> <ul> <li>Volatility regime change prediction (true/false)</li> <li>Probability transition matrix (3x3 for low/medium/high vol states)</li> <li>Signal arrives configurable ticks before the news event</li> <li>Signal accuracy is configurable (e.g., 66%)</li> <li>Arbitrage Desk: \u201cSPX\u2013SPY tracking error\u201d instantly.</li> </ul> </li> </ul>"},{"location":"technical/implementation-guide/#2-signal-injection-process","title":"2. Signal Injection Process","text":"<ol> <li> <p>Generate News Event:</p> </li> <li> <p>Randomly sample from the fixed probability table.</p> </li> <li> <p>Publish headline immediately.</p> </li> <li> <p>Compute True Regime Shift (internally):</p> </li> <li> <p>If the event triggers a shift, flip to new vol state.</p> </li> <li> <p>Publish Advance Signals:</p> </li> <li> <p>Before news events (configurable timing), send Hedge Fund:</p> <ul> <li>Prediction of whether event will trigger regime change</li> <li>Full probability transition matrix for next state</li> <li>Instantly calculate and publish \"tracking error\" for Arb Desk.</li> </ul> </li> </ol>"},{"location":"technical/implementation-guide/#3-pl-calibration-balancing","title":"3. P&amp;L Calibration &amp; Balancing","text":"<ul> <li>Why Balance: Ensure no single role has an unsustainable advantage.</li> <li> <p>Methods:</p> </li> <li> <p>Signal Accuracy: HF signal at 66% accuracy, Arb signal at 80% accuracy; add noise/false positives.</p> </li> <li> <p>Fee Structures:</p> <ul> <li>Market Makers: Enhanced maker rebates (+$0.02) and reduced taker fees (\u2013$0.01).</li> <li>Hedge Fund: Standard fees (+$0.01 maker / \u2013$0.02 taker) with position limits (150 per option).</li> <li>Arbitrage Desk: Standard fees (+$0.01 maker / \u2013$0.02 taker) with scoring bonus for round-trips.</li> <li> <p>Position Limits:</p> </li> <li> <p>HF: Maximum 150 contracts per option, 500 total across all options.</p> </li> <li>MM: Maximum \u00b150 net contracts per product (SPX/SPY).</li> <li>Arb: Maximum 100 contracts per leg, must maintain paired trades (2:1 ratio).</li> </ul> </li> </ul>"},{"location":"technical/implementation-guide/#4-configurable-parameters-backend-example","title":"4. Configurable Parameters (Backend Example)","text":"<ul> <li> <p>underlying_dynamics:</p> </li> <li> <p>vol_regime_model:</p> <ul> <li>states: [\"low\", \"medium\", \"high\"]</li> <li>volatilities: [0.1, 0.2, 0.5]</li> <li>transition_probabilities: 3x3 matrix</li> <li>mean_durations: {\"low\": 50, \"medium\": 40, \"high\": 30}</li> <li>iv_realized_spread: Constant gap between IV and realized vol.</li> <li>spy_spx_tracking_noise: Mean/standard deviation for SPY\u2019s tracking error.</li> <li>role_signals:</li> </ul> </li> <li> <p>hedge_fund_signal:</p> <ul> <li>advance_warning_ticks: 2 (how many ticks before news event)</li> <li>accuracy: 0.66 (66% correct predictions)</li> <li>includes_transition_matrix: true</li> <li> <p>arbitrage_signal:</p> </li> <li> <p>accuracy: 0.80</p> </li> <li>retail_flow_bias:</li> </ul> </li> <li> <p>aggression: fraction of retail orders that cross the spread.</p> </li> <li>volume_per_tick: number of retail orders per tick. (Refer to <code>config/example-game-config.yaml</code> for sample format.)</li> </ul>"},{"location":"technical/implementation-guide/#5-how-to-enable-research","title":"5. How to Enable Research","text":"<ul> <li> <p>Hidden but Discoverable Structure:</p> </li> <li> <p>Do not expose config directly; let interns infer patterns through data analysis.</p> </li> <li> <p>Encourage Pattern Recognition:</p> </li> <li> <p>Volatility clustering, event-driven jumps, correlation breakdowns.</p> </li> <li> <p>Reward Insight:</p> </li> <li> <p>Extra points for teams that document and exploit hidden fundamentals effectively.</p> </li> </ul>"},{"location":"technical/contributing/docstring-math-guide/","title":"Math Formulas in Docstrings","text":"<p>This guide explains how to properly include mathematical formulas in docstrings and documentation for the Intern Trading Game project.</p>"},{"location":"technical/contributing/docstring-math-guide/#always-use-raw-strings-for-latex","title":"Always Use Raw Strings for LaTeX","text":"<p>When including LaTeX formulas in Python docstrings, always use raw strings (prefixed with <code>r</code>):</p> <pre><code>def calculate_option_price(S, K, r, T, sigma):\n    r\"\"\"\n    Calculate option price using Black-Scholes formula:\n\n    $$d_1 = \\frac{\\ln(S/K) + (r + \\sigma^2/2)T}{\\sigma\\sqrt{T}}$$\n\n    $$d_2 = d_1 - \\sigma\\sqrt{T}$$\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"technical/contributing/docstring-math-guide/#why-raw-strings-are-required","title":"Why Raw Strings Are Required","text":"<p>Without the <code>r</code> prefix, Python interprets backslashes as escape sequences:</p> <ul> <li><code>\\t</code> becomes a tab character</li> <li><code>\\f</code> becomes a form feed character</li> <li><code>\\n</code> becomes a newline</li> </ul> <p>This breaks LaTeX commands like <code>\\text</code>, <code>\\frac</code>, and <code>\\sqrt</code>, causing formulas to render incorrectly.</p>"},{"location":"technical/contributing/docstring-math-guide/#incorrect-without-raw-string","title":"Incorrect (Without Raw String)","text":"<pre><code>\"\"\"\n$$\\text{Value} = \\text{Price} \\times \\text{Quantity}$$\n\"\"\"  # Will render as \"extValue = extPrice \u00d7 extQuantity\"\n</code></pre>"},{"location":"technical/contributing/docstring-math-guide/#correct-with-raw-string","title":"Correct (With Raw String)","text":"<pre><code>r\"\"\"\n$$\\text{Value} = \\text{Price} \\times \\text{Quantity}$$\n\"\"\"  # Will render correctly\n</code></pre>"},{"location":"technical/contributing/docstring-math-guide/#using-mathjax-syntax","title":"Using MathJax Syntax","text":"<p>All mathematical formulas in docstrings and Markdown documentation should use MathJax syntax with LaTeX notation. This ensures proper rendering in our documentation site.</p>"},{"location":"technical/contributing/docstring-math-guide/#inline-math","title":"Inline Math","text":"<p>For inline math (within a paragraph), use <code>\\(</code> and <code>\\)</code> delimiters:</p> <pre><code>The Black-Scholes formula uses \\(\\sigma\\) to represent volatility.\n</code></pre> <p>Renders as: The Black-Scholes formula uses \\(\\sigma\\) to represent volatility.</p>"},{"location":"technical/contributing/docstring-math-guide/#display-math","title":"Display Math","text":"<p>For display math (standalone equations), use <code>$$</code> delimiters:</p> <pre><code>$$\\text{Price} = S_0 e^{(r-q)T} N(d_1) - K e^{-rT} N(d_2)$$\n</code></pre> <p>Renders as:</p> \\[\\text{Price} = S_0 e^{(r-q)T} N(d_1) - K e^{-rT} N(d_2)\\]"},{"location":"technical/contributing/docstring-math-guide/#common-formatting-tips","title":"Common Formatting Tips","text":"<ol> <li> <p>Text in Equations: Use <code>\\text{}</code> for words within equations:    <pre><code>$$\\text{Priority} = (\\text{Price}, \\text{Time})$$\n</code></pre></p> </li> <li> <p>Fractions: Use <code>\\frac{numerator}{denominator}</code>:    <pre><code>$$\\text{Implied Volatility} = \\frac{\\text{Market Price}}{\\text{Model Price}}$$\n</code></pre></p> </li> <li> <p>Subscripts and Superscripts: Use <code>_</code> for subscripts and <code>^</code> for superscripts:    <pre><code>$$S_0 \\text{ and } e^{rT}$$\n</code></pre></p> </li> <li> <p>Greek Letters: Use the backslash followed by the name:    <pre><code>$$\\alpha, \\beta, \\gamma, \\delta, \\sigma, \\theta$$\n</code></pre></p> </li> </ol>"},{"location":"technical/contributing/docstring-math-guide/#incorrect-usage-do-not-use","title":"Incorrect Usage (Do Not Use)","text":""},{"location":"technical/contributing/docstring-math-guide/#restructuredtext-directives","title":"\u274c reStructuredText Directives","text":"<p>Do not use reStructuredText (reST) directives like <code>.. math::</code> in docstrings:</p> <pre><code># DON'T DO THIS\n\"\"\"\n.. math::\n\n    Priority = (Price, Time)\n\"\"\"\n</code></pre> <p>These will not render correctly in our MkDocs documentation.</p>"},{"location":"technical/contributing/docstring-math-guide/#html-math","title":"\u274c HTML Math","text":"<p>Do not use HTML-based math notation:</p> <pre><code>&lt;!-- DON'T DO THIS --&gt;\n&lt;math&gt;\n  &lt;mi&gt;Priority&lt;/mi&gt;\n  &lt;mo&gt;=&lt;/mo&gt;\n  &lt;mfenced&gt;\n    &lt;mi&gt;Price&lt;/mi&gt;\n    &lt;mi&gt;Time&lt;/mi&gt;\n  &lt;/mfenced&gt;\n&lt;/math&gt;\n</code></pre>"},{"location":"technical/contributing/docstring-math-guide/#examples-from-our-codebase","title":"Examples from Our Codebase","text":""},{"location":"technical/contributing/docstring-math-guide/#price-time-priority","title":"Price-Time Priority","text":"<pre><code>r\"\"\"\nThe price-time priority rule is commonly used for order matching:\n\n$$\\text{Priority} = (\\text{Price}, \\text{Time})$$\n\nWhere better prices have higher priority, and for equal prices, earlier\norders have higher priority.\n\"\"\"\n</code></pre>"},{"location":"technical/contributing/docstring-math-guide/#option-pricing","title":"Option Pricing","text":"<pre><code>r\"\"\"\nThe Black-Scholes formula for European call options:\n\n$$C = S_0 e^{-qT} N(d_1) - K e^{-rT} N(d_2)$$\n\nwhere:\n\n$$d_1 = \\frac{\\ln(S_0/K) + (r - q + \\sigma^2/2)T}{\\sigma\\sqrt{T}}$$\n\n$$d_2 = d_1 - \\sigma\\sqrt{T}$$\n\"\"\"\n</code></pre>"},{"location":"technical/contributing/docstring-math-guide/#resources","title":"Resources","text":"<ul> <li>MathJax Documentation</li> <li>LaTeX Math Symbols Cheat Sheet</li> <li>For more examples, see our Math Examples Reference</li> </ul>"},{"location":"technical/explanation/","title":"Technical Explanations","text":"<p>In-depth explanations of how the Intern Trading Game works under the hood. These guides explain concepts, algorithms, and design decisions.</p>"},{"location":"technical/explanation/#core-concepts","title":"Core Concepts","text":""},{"location":"technical/explanation/#order-processing","title":"Order Processing","text":"<ul> <li>Order Matching - How the matching engine pairs buy and sell orders</li> <li>Batch Matching - The batch processing algorithm used during tick execution</li> <li>Order Validator Design - Architecture and patterns for order validation</li> </ul>"},{"location":"technical/explanation/#game-mechanics","title":"Game Mechanics","text":"<ul> <li>Trading Phases - Detailed explanation of the tick lifecycle and trading phases</li> </ul>"},{"location":"technical/explanation/#key-topics","title":"Key Topics","text":""},{"location":"technical/explanation/#the-matching-engine","title":"The Matching Engine","text":"<p>The heart of the exchange is the matching engine. It processes orders according to price-time priority:</p> <ul> <li>Order Matching explains the continuous matching process</li> <li>Batch Matching explains the batch matching process</li> </ul>"},{"location":"technical/explanation/#validation-framework","title":"Validation Framework","text":"<p>Order validation ensures market integrity:</p> <ul> <li>Order Validator Design details the validation architecture</li> <li>Role-specific constraints are enforced through the validation pipeline</li> </ul>"},{"location":"technical/explanation/#trading-phases","title":"Trading Phases","text":"<ul> <li>Trading Phases breaks down different market phases the game supports</li> <li>Order windows, matching times, and settlement explained</li> </ul>"},{"location":"technical/explanation/#related-resources","title":"Related Resources","text":"<ul> <li>Architecture Overview - System design and components</li> <li>API Reference - Detailed API specifications</li> <li>How-To Guides - Practical implementation guides</li> </ul>"},{"location":"technical/explanation/#navigation","title":"Navigation","text":"<p>\u2190 Back to Technical Docs | Tutorials \u2192</p>"},{"location":"technical/explanation/batch-matching/","title":"Batch Matching Explained","text":""},{"location":"technical/explanation/batch-matching/#overview","title":"Overview","text":"<p>The Intern Trading Game supports two order matching modes:</p> <ol> <li>Continuous Matching: Orders match immediately upon submission (traditional exchange behavior)</li> <li>Batch Matching: Orders are collected during a window and matched simultaneously</li> </ol> <p>This document explains why batch matching is important for fair gameplay and how our implementation ensures randomized fairness.</p>"},{"location":"technical/explanation/batch-matching/#continuous-vs-batch-matching","title":"Continuous vs Batch Matching","text":""},{"location":"technical/explanation/batch-matching/#continuous-matching","title":"Continuous Matching","text":"<p>In continuous matching, orders are processed in the exact sequence they arrive:</p> <pre><code>Time 10:00:00.001: Trader A submits buy @ $100\nTime 10:00:00.002: Trader B submits sell @ $100\nResult: Immediate match between A and B\n\nTime 10:00:00.003: Trader C submits buy @ $100\nResult: No match available (liquidity already consumed)\n</code></pre> <p>Advantages:</p> <ul> <li>Immediate feedback</li> <li>Real-time price discovery</li> <li>Simple mental model</li> </ul> <p>Disadvantages:</p> <ul> <li>Speed advantages matter (faster bots win)</li> <li>Can discourage liquidity provision</li> <li>\"Winner takes all\" dynamics</li> </ul>"},{"location":"technical/explanation/batch-matching/#batch-matching","title":"Batch Matching","text":"<p>In batch matching, all orders submitted during a window are collected and matched simultaneously:</p> <pre><code>Window: 10:00:00 - 10:03:00\n- Trader A submits buy @ $100\n- Trader B submits sell @ $100\n- Trader C submits buy @ $100\n\nAt 10:03:30: Batch execution\n- All orders are considered together\n- Orders at same price are randomized\n- Crossing orders match against each other in the batch\n</code></pre> <p>Advantages:</p> <ul> <li>No speed advantages within the batch window</li> <li>Fairer for all participants</li> <li>Encourages liquidity provision</li> </ul> <p>Disadvantages:</p> <ul> <li>Delayed execution feedback</li> <li>More complex implementation</li> </ul> <p>Batch matching ensures:</p> <ul> <li>All strategies have equal opportunity to react to new prices</li> <li>No advantage from submitting orders milliseconds faster</li> <li>Fair allocation when multiple orders compete for limited liquidity</li> <li>More realistic simulation of opening/closing auctions</li> </ul>"},{"location":"technical/explanation/batch-matching/#randomization-at-same-price-level","title":"Randomization at Same Price Level","text":"<p>The key innovation in our batch matching is fair randomization:</p>"},{"location":"technical/explanation/batch-matching/#traditional-approach-time-priority","title":"Traditional Approach (Time Priority)","text":"<pre><code># Orders at price $100 in submission order:\n\n1. Trader A (submitted at 0:31)\n2. Trader B (submitted at 0:45)\n3. Trader C (submitted at 1:30)\n\n# If only 1 sell order available, Trader A always gets it\n</code></pre>"},{"location":"technical/explanation/batch-matching/#our-approach-random-priority","title":"Our Approach (Random Priority)","text":"<pre><code># Orders at price $100 are randomized:\n# Possible orderings (equal probability):\n# 1. A, B, C\n# 2. A, C, B\n# 3. B, A, C\n# 4. B, C, A\n# 5. C, A, B\n# 6. C, B, A\n#\n# Each trader has 1/3 chance of being first\n</code></pre>"},{"location":"technical/explanation/batch-matching/#implementation-details","title":"Implementation Details","text":""},{"location":"technical/explanation/batch-matching/#critical-batch-matching-behavior","title":"Critical Batch Matching Behavior","text":"<p>The most important aspect of batch matching is that orders within a batch are matched against each other, not processed sequentially. This is a fundamental difference from continuous matching.</p>"},{"location":"technical/explanation/batch-matching/#toy-example-why-this-matters","title":"Toy Example: Why This Matters","text":"<p>Consider a batch with these orders submitted during the window: <pre><code>Order 1: Buy 10 @ $102 (Trader A)\nOrder 2: Buy 10 @ $101 (Trader B)\nOrder 3: Buy 10 @ $100 (Trader C)\nOrder 4: Sell 10 @ $101 (Trader D)\n</code></pre></p> <p>Sequential Processing (INCORRECT for batch matching): <pre><code>Step 1: Process buy orders by adding to book\n  - Add Buy @ $102 to book\n  - Add Buy @ $101 to book\n  - Add Buy @ $100 to book\n  - Book state: Bids at 102, 101, 100\n\nStep 2: Process sell order\n  - Sell @ $101 matches against Buy @ $102 (best bid)\n  - Result: Trader A (102) trades with Trader D (101) at $101\n</code></pre></p> <p>Batch Matching (CORRECT implementation): <pre><code># Step 1: Collect all orders\nbuys = [Buy@102, Buy@101, Buy@100]\nsells = [Sell@101]\n\n# Step 2: Sort by price (with randomization at same level)\nsorted_buys = [Buy@102, Buy@101, Buy@100]  # Descending\nsorted_sells = [Sell@101]  # Ascending\n\n# Step 3: Match crossing orders\n# Buy@102 crosses with Sell@101? Yes (102 &gt;= 101)\n# Match: Trader A trades with Trader D at $101\n\n# Step 4: Remaining unmatched orders go to book\n# Book state: Bids at 101, 100\n</code></pre></p> <p>In both cases Trader A gets the fill, but the key difference is:</p> <ul> <li>Sequential: Orders are processed one by one, each seeing the book state left by previous orders</li> <li>Batch: All orders are matched simultaneously against each other</li> </ul>"},{"location":"technical/explanation/batch-matching/#when-the-difference-really-shows","title":"When The Difference Really Shows","text":"<p>The distinction becomes critical when there are multiple crossing orders:</p> <pre><code>Batch contains:\n\n- Buy 10 @ $100 (Trader A)\n- Buy 10 @ $100 (Trader B)\n- Buy 10 @ $100 (Trader C)\n- Sell 30 @ $100 (Trader D)\n</code></pre> <p>Sequential (INCORRECT): First buy gets added to book, second buy gets added, third buy gets added, then sell matches against all three in the order they were added.</p> <p>Batch (CORRECT): All three buys are randomized first, then matched against the sell. Each buyer has equal 1/3 chance of being filled first, second, or third.</p>"},{"location":"technical/explanation/batch-matching/#single-pass-randomization","title":"Single-Pass Randomization","text":"<p>We use an efficient single-pass sort with random tiebreaker:</p> <pre><code>def _randomize_same_price_orders(self, orders: List[Order], descending: bool) -&gt; List[Order]:\n    return sorted(\n        orders,\n        key=lambda o: (\n            -o.price if descending else o.price,  # Price priority\n            random.random()  # Random tiebreaker\n        )\n    )\n</code></pre> <p>This approach:</p> <ul> <li>Maintains strict price priority</li> <li>Randomizes only within same price</li> <li>O(n log n) complexity</li> <li>No intermediate data structures needed</li> </ul>"},{"location":"technical/explanation/batch-matching/#order-organization","title":"Order Organization","text":"<p>Orders are organized by instrument during collection:</p> <pre><code>self.pending_orders: Dict[str, List[Order]] = {\n    \"SPX_CALL_5000\": [order1, order2, ...],\n    \"SPX_PUT_4900\": [order3, order4, ...],\n}\n</code></pre> <p>This pre-organization makes batch execution more efficient.</p>"},{"location":"technical/explanation/batch-matching/#mathematical-guarantees","title":"Mathematical Guarantees","text":"<p>For orders at the same price level:</p> <ul> <li>Fairness: P(Order A executes before Order B) = 0.5</li> <li>Uniform Distribution: Each order has equal probability of any position</li> <li>Independence: Previous batch results don't affect future batches</li> </ul>"},{"location":"technical/explanation/batch-matching/#example-scenario","title":"Example Scenario","text":"<p>Consider a batch with:</p> <ul> <li>3 buy orders at $100 (from traders A, B, C)</li> <li>1 sell order at $100 with quantity for only 1 buyer</li> </ul> <p>Traditional time priority: First submitter always wins Our batch matching: Each buyer has 33.3% chance of matching</p> <p>Over many trading sessions, this ensures fair opportunity for all participants.</p>"},{"location":"technical/explanation/batch-matching/#integration-with-game-loop","title":"Integration with Game Loop","text":"<p>The GameLoop integrates batch matching at the appropriate tick phase:</p> <pre><code># At T+3:30 in the tick cycle\nif self.current_phase == TickPhase.BATCH_MATCHING:\n    results = self.exchange.execute_batch()\n    # Process results, update positions, notify traders\n</code></pre>"},{"location":"technical/explanation/batch-matching/#configuration","title":"Configuration","text":"<p>To use batch matching:</p> <pre><code>from intern_trading_game.exchange import ExchangeVenue, BatchMatchingEngine\n\n# Create exchange with batch matching\nexchange = ExchangeVenue(matching_engine=BatchMatchingEngine())\n\n# Orders submitted will be pending\nresult = exchange.submit_order(order)\nassert result.status == \"pending\"\n\n# Execute batch at designated time\nbatch_results = exchange.execute_batch()\n</code></pre>"},{"location":"technical/explanation/batch-matching/#best-practices","title":"Best Practices","text":"<ol> <li>Strategy Design: Strategies should not assume immediate fills in batch mode</li> <li>Order Submission: Submit all desired orders before the window closes</li> <li>Result Processing: Handle batch results appropriately after execution</li> <li>Testing: Test strategies in both continuous and batch modes</li> </ol>"},{"location":"technical/explanation/order-matching/","title":"Explaining Order Matching in the Intern Trading Game","text":"<p>This document explains the order matching algorithm used in the Intern Trading Game exchange system.</p>"},{"location":"technical/explanation/order-matching/#overview","title":"Overview","text":"<p>The order matching engine is the core of any trading system. It's responsible for:</p> <ol> <li>Maintaining the order book (the collection of all outstanding buy and sell orders)</li> <li>Matching incoming orders against existing orders</li> <li>Generating trades when orders match</li> <li>Ensuring price-time priority is respected</li> </ol>"},{"location":"technical/explanation/order-matching/#price-time-priority","title":"Price-Time Priority","text":"<p>The Intern Trading Game exchange uses a price-time priority matching algorithm, which is the standard for most financial exchanges. This means:</p> <ol> <li>Price Priority: Better prices get matched first</li> <li>For buy orders (bids): Higher prices have priority</li> <li> <p>For sell orders (asks): Lower prices have priority</p> </li> <li> <p>Time Priority: When prices are the same, earlier orders get matched first</p> </li> <li>First-in, first-out (FIFO) at each price level</li> </ol>"},{"location":"technical/explanation/order-matching/#order-book-structure","title":"Order Book Structure","text":"<p>The order book for each instrument is organized into price levels:</p> <pre><code>                  Quantity\n                     \u25b2\n                     \u2502\n      BIDS           \u2502           ASKS\n(Buy Orders)         \u2502      (Sell Orders)\n                     \u2502\n 10 @ $5.25 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba 15 @ $5.30\n  5 @ $5.20 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba 20 @ $5.35\n 15 @ $5.15 \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba 10 @ $5.40\n                     \u2502\n                     \u2502\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Price\n</code></pre> <ul> <li>The bid side contains buy orders, sorted by price in descending order (highest first)</li> <li>The ask side contains sell orders, sorted by price in ascending order (lowest first)</li> <li>At each price level, orders are sorted by time (oldest first)</li> </ul>"},{"location":"technical/explanation/order-matching/#matching-process","title":"Matching Process","text":"<p>When a new order arrives, the matching process follows these steps:</p>"},{"location":"technical/explanation/order-matching/#1-determine-the-opposite-side","title":"1. Determine the Opposite Side","text":"<ul> <li>If the new order is a buy order, it will try to match against the ask side</li> <li>If the new order is a sell order, it will try to match against the bid side</li> </ul>"},{"location":"technical/explanation/order-matching/#2-check-for-matching-prices","title":"2. Check for Matching Prices","text":"<p>For a limit order to match:</p> <ul> <li>A buy order's price must be &gt;= the best ask price</li> <li>A sell order's price must be &lt;= the best bid price</li> </ul> <p>Market orders always match at the best available price.</p>"},{"location":"technical/explanation/order-matching/#3-execute-trades","title":"3. Execute Trades","text":"<p>When a match is found:</p> <ul> <li>Create a trade at the price of the resting order</li> <li>Reduce the quantities of both orders</li> <li>If the resting order is fully filled, remove it from the book</li> <li>Continue matching until the new order is fully filled or no more matches are possible</li> </ul>"},{"location":"technical/explanation/order-matching/#4-add-remaining-quantity-to-the-book","title":"4. Add Remaining Quantity to the Book","text":"<p>If the new order is not fully filled and it's a limit order, add the remaining quantity to the appropriate side of the book.</p>"},{"location":"technical/explanation/order-matching/#example-order-matching-process","title":"Example: Order Matching Process","text":"<p>Let's walk through an example of the matching process:</p> <p>Current Order Book:</p> <ul> <li>Best Bid: $5.25 (10 contracts)</li> <li>Best Ask: $5.30 (15 contracts)</li> </ul> <p>Scenario 1: Incoming Limit Buy Order</p> <p>A new limit buy order arrives: Buy 20 @ $5.32</p> <ol> <li>This order's price (\\(5.32) is higher than the best ask (\\)5.30), so it will match</li> <li>A trade is created for 15 contracts at $5.30 (the price of the resting ask order)</li> <li>The resting ask order is fully filled and removed from the book</li> <li>The incoming buy order has 5 contracts remaining</li> <li>There are no more ask orders at or below $5.32</li> <li>The remaining 5 contracts are added to the bid side at $5.32</li> </ol> <p>Scenario 2: Incoming Market Sell Order</p> <p>A new market sell order arrives: Sell 15 (no price specified)</p> <ol> <li>This is a market order, so it will match at the best available bid price</li> <li>The best bid is $5.32 for 5 contracts</li> <li>A trade is created for 5 contracts at $5.32</li> <li>The next best bid is $5.25 for 10 contracts</li> <li>A second trade is created for 10 contracts at $5.25</li> <li>The market sell order is now fully filled</li> </ol>"},{"location":"technical/explanation/order-matching/#implementation-details","title":"Implementation Details","text":"<p>The matching algorithm is implemented in the <code>OrderBook._match_order</code> method. Here's a simplified version of the algorithm:</p> <pre><code>def _match_order(self, order):\n    trades = []\n\n    # Determine which side of the book to match against\n    opposite_side = self.asks if order.is_buy else self.bids\n\n    # Keep matching until the order is filled or no more matches are possible\n    while not order.is_filled and opposite_side:\n        best_price_level = opposite_side[0]\n\n        # For limit orders, check if the price is acceptable\n        if order.is_limit_order:\n            if (order.is_buy and best_price_level.price &gt; order.price) or \\\n               (order.is_sell and best_price_level.price &lt; order.price):\n                break  # No more acceptable prices\n\n        # Get the first order at this price level\n        matching_order = best_price_level.orders[0]\n\n        # Determine the fill quantity\n        fill_qty = min(order.remaining_quantity, matching_order.remaining_quantity)\n\n        # Create a trade\n        trade = Trade(\n            instrument_id=self.instrument_id,\n            buyer_id=order.trader_id if order.is_buy else matching_order.trader_id,\n            seller_id=matching_order.trader_id if order.is_buy else order.trader_id,\n            price=best_price_level.price,\n            quantity=fill_qty,\n            buyer_order_id=order.order_id if order.is_buy else matching_order.order_id,\n            seller_order_id=matching_order.order_id if order.is_buy else order.order_id,\n        )\n\n        trades.append(trade)\n\n        # Update the orders\n        order.fill(fill_qty)\n        matching_order.fill(fill_qty)\n\n        # If the matching order is filled, remove it\n        if matching_order.is_filled:\n            best_price_level.remove_order(matching_order.order_id)\n\n            # If the price level is empty, remove it\n            if best_price_level.is_empty():\n                opposite_side.pop(0)\n\n    return trades\n</code></pre>"},{"location":"technical/explanation/order-matching/#edge-cases-and-considerations","title":"Edge Cases and Considerations","text":""},{"location":"technical/explanation/order-matching/#1-self-trading-prevention","title":"1. Self-Trading Prevention","text":"<p>In a real exchange, traders are typically prevented from matching against their own orders. This is not currently implemented in the Intern Trading Game but could be added as an enhancement.</p>"},{"location":"technical/explanation/order-matching/#2-pro-rata-matching","title":"2. Pro-Rata Matching","text":"<p>Some exchanges use pro-rata matching instead of or in addition to time priority. In pro-rata matching, fills are allocated proportionally to the size of the resting orders at a given price level.</p>"},{"location":"technical/explanation/order-matching/#3-iceberghidden-orders","title":"3. Iceberg/Hidden Orders","text":"<p>Many exchanges support iceberg orders (where only a portion of the total quantity is visible) or completely hidden orders. These are not currently implemented in the Intern Trading Game.</p>"},{"location":"technical/explanation/order-matching/#4-market-order-protections","title":"4. Market Order Protections","text":"<p>In real exchanges, market orders often have protections to prevent them from executing at extreme prices. The Intern Trading Game currently allows market orders to match at any price, which could be improved.</p>"},{"location":"technical/explanation/order-matching/#tradingcontext","title":"TradingContext","text":"<p>The order matching algorithm operates within the following trading context:</p> <ul> <li>European-style options on simulated SPX and SPY underlyings</li> <li>Tick-based simulation (not continuous time)</li> <li>No fees or commissions</li> <li>No position limits</li> <li>Perfect liquidity for hedging in the underlying</li> </ul>"},{"location":"technical/explanation/order-matching/#conclusion","title":"Conclusion","text":"<p>The price-time priority matching algorithm used in the Intern Trading Game is a simplified but realistic implementation of how modern financial exchanges operate. Understanding this algorithm is crucial for developing effective trading strategies, as it determines how and when your orders will be filled.</p>"},{"location":"technical/explanation/order-validator-design/","title":"OrderValidator Design","text":""},{"location":"technical/explanation/order-validator-design/#overview","title":"Overview","text":"<p>The OrderValidator is a constraint-based validation system that checks all orders before they reach the Exchange. It's designed to be completely role-agnostic - it understands types of constraints (like position limits) but has no knowledge of specific roles (like market maker or hedge fund).</p>"},{"location":"technical/explanation/order-validator-design/#core-design-principles","title":"Core Design Principles","text":""},{"location":"technical/explanation/order-validator-design/#1-role-agnostic","title":"1. Role-Agnostic","text":"<p>The validator doesn't contain any role-specific logic. It only knows about generic constraint types that can be applied to any role.</p>"},{"location":"technical/explanation/order-validator-design/#2-configuration-driven","title":"2. Configuration-Driven","text":"<p>All validation rules are defined in configuration files, not hardcoded. This allows game parameters to be adjusted without changing code.</p>"},{"location":"technical/explanation/order-validator-design/#3-composable-constraints","title":"3. Composable Constraints","text":"<p>Complex validation rules are built by combining simple, reusable constraint types.</p>"},{"location":"technical/explanation/order-validator-design/#how-it-works","title":"How It Works","text":"<p>When an order is submitted:</p> <ol> <li>Context Building: The system gathers the current state needed for validation:</li> <li>Current positions for the trader</li> <li>Number of orders submitted this tick</li> <li>Current tick phase</li> <li> <p>Any other relevant metadata</p> </li> <li> <p>Constraint Loading: The validator retrieves the list of constraints configured for the trader's role</p> </li> <li> <p>Sequential Validation: Each constraint is checked in order. The first failure immediately rejects the order with a specific error message.</p> </li> <li> <p>Result: If all constraints pass, the order is accepted and forwarded to the exchange.</p> </li> </ol>"},{"location":"technical/explanation/order-validator-design/#constraint-types","title":"Constraint Types","text":"<p>The system supports these generic constraint types:</p> <ul> <li>Position Limits: Maximum position per instrument (can be symmetric \u00b1N or absolute)</li> <li>Portfolio Limits: Maximum total position across all instruments</li> <li>Order Size: Minimum and maximum order quantities</li> <li>Order Rate: Maximum orders allowed per tick</li> <li>Order Types: Which order types (limit, market, quote) are permitted</li> <li>Trading Window: Which tick phases allow order submission</li> <li>Price Bounds: Valid price ranges for limit orders</li> </ul>"},{"location":"technical/explanation/order-validator-design/#configuration-structure","title":"Configuration Structure","text":"<p>Constraints are configured per role in YAML:</p> <pre><code>roles:\n  [role_name]:\n    constraints:\n      - type: [constraint_type]\n        parameters:\n          [param1]: [value1]\n          [param2]: [value2]\n        error_code: \"SPECIFIC_ERROR\"\n        error_message: \"Human-readable explanation\"\n</code></pre>"},{"location":"technical/explanation/order-validator-design/#integration-points","title":"Integration Points","text":""},{"location":"technical/explanation/order-validator-design/#with-game-loop","title":"With Game Loop","text":"<ul> <li>Provides current tick phase for trading window validation</li> <li>Tracks order counts per tick</li> </ul>"},{"location":"technical/explanation/order-validator-design/#with-position-service","title":"With Position Service","text":"<ul> <li>Queries current positions for limit checking</li> <li>Calculates portfolio totals</li> </ul>"},{"location":"technical/explanation/order-validator-design/#with-exchange","title":"With Exchange","text":"<ul> <li>Validates orders before submission</li> <li>Returns detailed rejection reasons</li> </ul>"},{"location":"technical/explanation/order-validator-design/#advantages","title":"Advantages","text":"<ol> <li>Flexibility: New constraint types can be added without modifying existing code</li> <li>Maintainability: Role rules are data, not code, making them easier to adjust</li> <li>Testability: Each constraint type can be tested independently</li> <li>Performance: Constraints are cached per role to avoid repeated parsing</li> <li>Clarity: Validation logic is centralized and consistent</li> </ol>"},{"location":"technical/explanation/order-validator-design/#trade-offs","title":"Trade-offs","text":""},{"location":"technical/explanation/order-validator-design/#pros","title":"Pros","text":"<ul> <li>Clean separation between validation logic and role definitions</li> <li>Easy to add new roles or modify existing ones</li> <li>Configuration changes don't require code changes</li> <li>Validation rules are transparent and auditable</li> </ul>"},{"location":"technical/explanation/order-validator-design/#cons","title":"Cons","text":"<ul> <li>Less type safety for constraint parameters (they're configuration data)</li> <li>Need to maintain registry of constraint types</li> <li>Slightly more complex than hardcoded validation</li> <li>Requires careful configuration management</li> </ul>"},{"location":"technical/explanation/order-validator-design/#error-handling","title":"Error Handling","text":"<p>Each constraint provides:</p> <ul> <li>Error Code: Machine-readable identifier for the specific violation</li> <li>Error Message: Human-readable explanation for the trader</li> <li>Context: Which constraint failed and why</li> </ul> <p>This enables both automated handling and clear feedback to users.</p>"},{"location":"technical/explanation/order-validator-design/#future-extensibility","title":"Future Extensibility","text":"<p>The design supports several extension points:</p> <ol> <li>Custom Constraints: New constraint types can be added by implementing the Constraint interface</li> <li>Dynamic Rules: Constraints could be modified during gameplay based on market conditions</li> <li>Composite Constraints: Complex rules can be built by combining existing constraints</li> <li>Performance Optimization: Frequently-used constraint combinations can be cached</li> </ol>"},{"location":"technical/explanation/order-validator-design/#example-market-maker-configuration","title":"Example: Market Maker Configuration","text":"<pre><code>market_maker:\n  constraints:\n    # Symmetric position limits\n    - type: position_limit\n      parameters:\n        max_position: 50\n        symmetric: true\n\n    # Total portfolio limit\n    - type: portfolio_limit\n      parameters:\n        max_total: 200\n\n    # Order size bounds\n    - type: order_size\n      parameters:\n        min: 1\n        max: 1000\n\n    # Can submit quotes\n    - type: order_type_allowed\n      parameters:\n        allowed: [\"limit\", \"market\", \"quote\"]\n</code></pre> <p>This configuration enforces all market maker rules without any market-maker-specific code in the validator.</p>"},{"location":"technical/explanation/trading-phases/","title":"Trading Phases Guide","text":""},{"location":"technical/explanation/trading-phases/#overview","title":"Overview","text":"<p>The Intern Trading Game supports flexible market structures through configurable trading phases. This guide explains how to implement different market models: pure batch matching, continuous trading, and realistic hybrid models like CBOE SPX.</p>"},{"location":"technical/explanation/trading-phases/#phase-system-architecture","title":"Phase System Architecture","text":""},{"location":"technical/explanation/trading-phases/#core-phases","title":"Core Phases","text":"<p>The system defines six core phases that can be combined to create any market structure:</p> <ol> <li>MARKET_DATA - Market data updates, price publication</li> <li>PRE_OPEN - Order entry allowed, no matching</li> <li>OPEN - Transition phase, order entry may close</li> <li>TRADING - Active matching (batch or continuous)</li> <li>CLOSING - End of session processing</li> <li>CLOSED - No activity allowed</li> </ol>"},{"location":"technical/explanation/trading-phases/#phase-capabilities","title":"Phase Capabilities","text":"<p>Each phase can be configured with different capabilities:</p> <ul> <li>Order Entry: Whether new orders are accepted</li> <li>Order Cancellation: Whether orders can be cancelled</li> <li>Matching: Whether trades execute</li> <li>Market Data: Whether prices/signals are distributed</li> </ul>"},{"location":"technical/explanation/trading-phases/#market-structure-examples","title":"Market Structure Examples","text":""},{"location":"technical/explanation/trading-phases/#1-pure-batch-mode-current-implementation","title":"1. Pure Batch Mode (Current Implementation)","text":"<p>Simple 5-minute batch auction cycles:</p> <pre><code>phases:\n  - name: MARKET_DATA\n    start: \"T+0:00\"\n    duration: 30\n    capabilities:\n      order_entry: false\n      matching: false\n      market_data: true\n\n  - name: PRE_OPEN\n    start: \"T+0:30\"\n    duration: 150  # 2.5 minutes\n    capabilities:\n      order_entry: true\n      matching: false\n      cancellation: true\n\n  - name: TRADING\n    start: \"T+3:30\"\n    duration: 30\n    capabilities:\n      order_entry: false\n      matching: true  # Batch execution\n      matching_type: batch\n\n  - name: CLOSED\n    start: \"T+4:00\"\n    duration: 60\n    capabilities:\n      order_entry: false\n      matching: false\n</code></pre> <p>Use Case: Simplified markets, teaching environments, stress testing</p>"},{"location":"technical/explanation/trading-phases/#2-pure-continuous-mode","title":"2. Pure Continuous Mode","text":"<p>Traditional continuous limit order book:</p> <pre><code>trading_hours:\n  market_open: \"09:30\"\n  market_close: \"16:00\"\n\nphases:\n  - name: PRE_OPEN\n    start: \"09:00\"\n    end: \"09:30\"\n    capabilities:\n      order_entry: true\n      matching: false\n      cancellation: true\n\n  - name: TRADING\n    start: \"09:30\"\n    end: \"16:00\"\n    capabilities:\n      order_entry: true\n      matching: true\n      matching_type: continuous\n      cancellation: true\n</code></pre> <p>Use Case: Equity markets, FX markets, most futures</p>"},{"location":"technical/explanation/trading-phases/#3-realistic-hybrid-mode-cboe-spx-style","title":"3. Realistic Hybrid Mode (CBOE SPX Style)","text":"<p>Complex schedule with multiple session types:</p> <pre><code>sessions:\n  # Global Trading Hours (overnight)\n  gth_session:\n    - name: PRE_OPEN\n      start: \"19:30\"  # 7:30 PM\n      end: \"20:15\"    # 8:15 PM\n      capabilities:\n        order_entry: true\n        matching: false\n        instruments: [\"SPXW\", \"VIX\"]  # Limited products\n\n    - name: TRADING\n      start: \"20:15\"  # 8:15 PM\n      end: \"09:15\"   # 9:15 AM next day\n      capabilities:\n        order_entry: true\n        matching: true\n        matching_type: continuous\n        instruments: [\"SPXW\", \"VIX\"]\n\n  # Regular Trading Hours\n  rth_session:\n    - name: PRE_OPEN\n      start: \"09:15\"\n      end: \"09:30\"\n      capabilities:\n        order_entry: true\n        matching: false\n        order_types: [\"LIMIT\", \"MARKET\", \"QUOTE\"]\n        description: \"Opening rotation preparation\"\n\n    - name: OPENING_AUCTION\n      start: \"09:30\"\n      duration: 30  # seconds\n      capabilities:\n        order_entry: false\n        matching: true\n        matching_type: batch\n        description: \"Opening cross\"\n\n    - name: TRADING\n      start: \"09:30:30\"\n      end: \"15:15\"  # 3:15 PM for SPX\n      capabilities:\n        order_entry: true\n        matching: true\n        matching_type: continuous\n        cancellation: true\n\n    - name: CLOSING_AUCTION_PREP\n      start: \"15:15\"\n      end: \"15:30\"\n      capabilities:\n        order_entry: true\n        matching: false\n        order_types: [\"LIMIT\", \"MOC\", \"LOC\"]\n        description: \"Closing rotation preparation\"\n\n    - name: CLOSING_AUCTION\n      start: \"15:30\"\n      duration: 60\n      capabilities:\n        order_entry: false\n        matching: true\n        matching_type: batch\n        use_settlement_price: true\n\n    - name: POST_CLOSE\n      start: \"15:31\"\n      end: \"16:30\"\n      capabilities:\n        order_entry: false\n        matching: false\n        clearing_only: true\n</code></pre> <p>Key Features:</p> <ul> <li>Multiple sessions with different rules</li> <li>Opening and closing auctions</li> <li>Overnight trading for specific products</li> <li>Different order types by phase</li> <li>Settlement price determination</li> </ul>"},{"location":"technical/how-to/","title":"How-To Guides","text":"<p>Practical, task-oriented guides for working with the Intern Trading Game. Each guide provides step-by-step instructions for accomplishing specific tasks.</p>"},{"location":"technical/how-to/#available-guides","title":"Available Guides","text":""},{"location":"technical/how-to/#order-management","title":"Order Management","text":"<ul> <li>How to Submit Orders - Learn the different ways to submit orders to the exchange</li> </ul>"},{"location":"technical/how-to/#api-integration","title":"API Integration","text":"<ul> <li>Use REST API - Integrate with the HTTP REST API for order submission and data retrieval</li> <li>Use WebSockets - Connect to real-time data streams for market data and order updates</li> <li>WebSocket Integration - Advanced patterns for WebSocket integration</li> </ul>"},{"location":"technical/how-to/#quick-links-by-task","title":"Quick Links by Task","text":""},{"location":"technical/how-to/#getting-started","title":"Getting Started","text":"<ul> <li>Want to submit your first order? \u2192 How to Submit Orders</li> <li>Need real-time market data? \u2192 Use WebSockets</li> </ul>"},{"location":"technical/how-to/#api-integration_1","title":"API Integration","text":"<ul> <li>Building a REST client? \u2192 Use REST API</li> <li>Need streaming updates? \u2192 WebSocket Integration</li> </ul>"},{"location":"technical/how-to/#see-also","title":"See Also","text":"<ul> <li>Tutorials - Step-by-step tutorials for building complete bots</li> <li>API Reference - Complete API documentation</li> <li>Explanations - Understand how things work under the hood</li> </ul>"},{"location":"technical/how-to/#navigation","title":"Navigation","text":"<p>\u2190 Back to Technical Docs | API Reference \u2192</p>"},{"location":"technical/how-to/how-to-submit-orders/","title":"How to Submit Orders to the Exchange","text":"<p>This guide explains how to create and submit orders to the Intern Trading Game exchange.</p>"},{"location":"technical/how-to/how-to-submit-orders/#order-types","title":"Order Types","text":"<p>The exchange supports two types of orders:</p> <ul> <li>Limit Orders: Specify a price at which you're willing to buy or sell</li> <li>Market Orders: Execute immediately at the best available price</li> </ul>"},{"location":"technical/how-to/how-to-submit-orders/#creating-an-order","title":"Creating an Order","text":"<p>To create an order, you'll need to use the <code>Order</code> class from the <code>intern_trading_game.exchange.order</code> module:</p> <pre><code>from intern_trading_game.exchange.order import Order\n\n# Create a limit buy order\nlimit_buy = Order(\n    instrument_id=\"AAPL_150C_DEC\",  # The instrument to trade\n    side=\"buy\",                      # \"buy\" or \"sell\"\n    quantity=10,                     # How many contracts\n    price=5.25,                      # Limit price (omit for market orders)\n    trader_id=\"your_trader_id\"       # Your unique trader ID\n)\n\n# Create a market sell order\nmarket_sell = Order(\n    instrument_id=\"AAPL_150C_DEC\",\n    side=\"sell\",\n    quantity=5,\n    price=None,                      # None indicates a market order\n    trader_id=\"your_trader_id\"\n)\n</code></pre>"},{"location":"technical/how-to/how-to-submit-orders/#submitting-orders-to-the-exchange","title":"Submitting Orders to the Exchange","text":"<p>Once you've created an order, you can submit it to the exchange:</p> <pre><code>from intern_trading_game.exchange.venue import ExchangeVenue\n\n# Get a reference to the exchange\nexchange = ExchangeVenue()\n\n# Submit the order\nresult = exchange.submit_order(limit_buy)\n\n# Check the result\nif result.status == \"filled\":\n    print(f\"Order filled! Generated {len(result.fills)} trades\")\n    for trade in result.fills:\n        print(f\"Trade: {trade.quantity} @ {trade.price}\")\nelif result.status == \"accepted\":\n    print(f\"Order accepted with ID: {result.order_id}\")\n    print(f\"Remaining quantity: {result.remaining_quantity}\")\n</code></pre>"},{"location":"technical/how-to/how-to-submit-orders/#cancelling-orders","title":"Cancelling Orders","text":""},{"location":"technical/how-to/how-to-submit-orders/#via-direct-exchange-api","title":"Via Direct Exchange API","text":"<p>To cancel an order directly through the exchange:</p> <pre><code># Cancel an order (requires the order ID and your trader ID)\nsuccess = exchange.cancel_order(order_id=limit_buy.order_id, trader_id=\"your_trader_id\")\n\nif success:\n    print(\"Order cancelled successfully\")\nelse:\n    print(\"Failed to cancel order (may not exist or already filled)\")\n</code></pre>"},{"location":"technical/how-to/how-to-submit-orders/#via-rest-api","title":"Via REST API","text":"<p>To cancel an order through the REST API:</p> <pre><code>import requests\n\n# Cancel an order using DELETE request\nresponse = requests.delete(\n    f\"http://localhost:8000/orders/{order_id}\",\n    headers={\"X-API-Key\": \"your_api_key\"}\n)\n\nif response.json()[\"status\"] == \"cancelled\":\n    print(\"Order cancelled successfully\")\nelse:\n    print(f\"Cancel failed: {response.json()['error_message']}\")\n</code></pre>"},{"location":"technical/how-to/how-to-submit-orders/#checking-the-order-book","title":"Checking the Order Book","text":"<p>You can examine the current state of the order book for an instrument:</p> <pre><code># Get the order book for an instrument\norder_book = exchange.get_order_book(\"AAPL_150C_DEC\")\n\n# Check the best bid and ask\nbest_bid = order_book.best_bid()  # Returns (price, quantity) or None\nbest_ask = order_book.best_ask()  # Returns (price, quantity) or None\n\nprint(f\"Best bid: {best_bid}\")\nprint(f\"Best ask: {best_ask}\")\n\n# Get a full depth snapshot\ndepth = order_book.depth_snapshot(levels=5)  # Get 5 levels of depth\n\nprint(\"Bids:\")\nfor price, quantity in depth[\"bids\"]:\n    print(f\"  {price}: {quantity}\")\n\nprint(\"Asks:\")\nfor price, quantity in depth[\"asks\"]:\n    print(f\"  {price}: {quantity}\")\n</code></pre>"},{"location":"technical/how-to/how-to-submit-orders/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling: Always wrap order submission in try/except blocks to handle potential errors</li> <li>Order Tracking: Keep track of your outstanding orders to manage your positions</li> <li>Rate Limiting: Don't submit too many orders too quickly</li> <li>Validation: Verify that your orders make sense before submitting them</li> </ol>"},{"location":"technical/how-to/how-to-submit-orders/#example-simple-order-submission-loop","title":"Example: Simple Order Submission Loop","text":"<p>```python def trading_loop(exchange, instrument_id, trader_id):     \"\"\"A simple trading loop that submits and tracks orders.\"\"\"     active_orders = {}  # Track active orders by ID</p> <pre><code>try:\n    # Submit a buy order\n    buy_order = Order(\n        instrument_id=instrument_id,\n        side=\"buy\",\n        quantity=10,\n        price=5.25,\n        trader_id=trader_id\n    )\n\n    result = exchange.submit_order(buy_order)\n    if result.status == \"accepted\":\n        active_orders[result.order_id] = buy_order\n        print(f\"Order {result.order_id} accepted\")\n\n    # Wait for some time\n    import time\n    time.sleep(5)\n\n    # Cancel any remaining orders\n    for order_id, order in list(active_orders.items()):\n        if exchange.cancel_order(order_id, trader_id):\n            del active_orders[order_id]\n            print(f\"Order {order_id} cancelled\")\n\nexcept Exception as e:\n    print(f\"Error in trading loop: {e}\")\n    # Cancel all orders on error\n    for order_id in active_orders:\n        exchange.cancel_order(order_id, trader_id)\n</code></pre>"},{"location":"technical/how-to/use-rest-api/","title":"How to Use the REST API","text":"<p>This guide shows how to interact with the Intern Trading Game REST API to build trading bots.</p>"},{"location":"technical/how-to/use-rest-api/#getting-started","title":"Getting Started","text":""},{"location":"technical/how-to/use-rest-api/#1-start-the-api-server","title":"1. Start the API Server","text":"<pre><code>cd intern_trading_game\npython -m intern_trading_game.api.main\n</code></pre> <p>The API will start on <code>http://localhost:8000</code>.</p>"},{"location":"technical/how-to/use-rest-api/#2-register-your-team","title":"2. Register Your Team","text":"<p>Before trading, you must register your team to get an API key:</p> <pre><code>curl -X POST http://localhost:8000/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"team_name\": \"AlphaBot\",\n    \"role\": \"market_maker\"\n  }'\n</code></pre> <p>Response: <pre><code>{\n  \"team_id\": \"TEAM_001\",\n  \"team_name\": \"AlphaBot\",\n  \"role\": \"market_maker\",\n  \"api_key\": \"itg_AbCdEfGhIjKlMnOpQrStUvWxYz...\",\n  \"created_at\": \"2024-01-15T10:00:00Z\"\n}\n</code></pre></p> <p>Save your API key - you'll need it for all other requests.</p>"},{"location":"technical/how-to/use-rest-api/#3-submit-orders","title":"3. Submit Orders","text":"<p>Use your API key in the <code>X-API-Key</code> header:</p> <pre><code># Submit a limit order\ncurl -X POST http://localhost:8000/orders \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-API-Key: itg_AbCdEfGhIjKlMnOpQrStUvWxYz...\" \\\n  -d '{\n    \"instrument_id\": \"SPX_4500_CALL\",\n    \"order_type\": \"limit\",\n    \"side\": \"buy\",\n    \"quantity\": 10,\n    \"price\": 25.50\n  }'\n</code></pre>"},{"location":"technical/how-to/use-rest-api/#4-check-your-positions","title":"4. Check Your Positions","text":"<pre><code>curl -X GET http://localhost:8000/positions/TEAM_001 \\\n  -H \"X-API-Key: itg_AbCdEfGhIjKlMnOpQrStUvWxYz...\"\n</code></pre>"},{"location":"technical/how-to/use-rest-api/#python-bot-example","title":"Python Bot Example","text":"<pre><code>import requests\nimport time\n\nclass TradingBot:\n    def __init__(self, api_key, base_url=\"http://localhost:8000\"):\n        self.api_key = api_key\n        self.base_url = base_url\n        self.headers = {\"X-API-Key\": api_key}\n        self.team_id = None\n\n    def submit_order(self, instrument, order_type, side, quantity, price=None):\n        \"\"\"Submit an order to the exchange.\"\"\"\n        data = {\n            \"instrument_id\": instrument,\n            \"order_type\": order_type,\n            \"side\": side,\n            \"quantity\": quantity\n        }\n        if price is not None:\n            data[\"price\"] = price\n\n        response = requests.post(\n            f\"{self.base_url}/orders\",\n            json=data,\n            headers=self.headers\n        )\n        return response.json()\n\n    def cancel_order(self, order_id):\n        \"\"\"Cancel an existing order.\"\"\"\n        response = requests.delete(\n            f\"{self.base_url}/orders/{order_id}\",\n            headers=self.headers\n        )\n        return response.json()\n\n    def get_positions(self):\n        \"\"\"Get current positions.\"\"\"\n        response = requests.get(\n            f\"{self.base_url}/positions/{self.team_id}\",\n            headers=self.headers\n        )\n        return response.json()\n\n    def run_market_maker_strategy(self):\n        \"\"\"Simple market making strategy.\"\"\"\n        instrument = \"SPX_4500_CALL\"\n        spread = 0.20\n        base_price = 25.50\n\n        while True:\n            # Post bid\n            bid_result = self.submit_order(\n                instrument, \"limit\", \"buy\",\n                10, base_price - spread/2\n            )\n            print(f\"Bid: {bid_result}\")\n\n            # Post ask\n            ask_result = self.submit_order(\n                instrument, \"limit\", \"sell\",\n                10, base_price + spread/2\n            )\n            print(f\"Ask: {ask_result}\")\n\n            # Check positions\n            positions = self.get_positions()\n            print(f\"Positions: {positions}\")\n\n            # Wait before next update\n            time.sleep(5)\n\n# Register and run bot\ndef main():\n    # First register\n    response = requests.post(\n        \"http://localhost:8000/auth/register\",\n        json={\"team_name\": \"MMBot\", \"role\": \"market_maker\"}\n    )\n    team_info = response.json()\n\n    # Create bot\n    bot = TradingBot(team_info[\"api_key\"])\n    bot.team_id = team_info[\"team_id\"]\n\n    # Run strategy\n    bot.run_market_maker_strategy()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"technical/how-to/use-rest-api/#api-endpoints","title":"API Endpoints","text":""},{"location":"technical/how-to/use-rest-api/#authentication","title":"Authentication","text":""},{"location":"technical/how-to/use-rest-api/#post-authregister","title":"POST /auth/register","text":"<p>Register a new team.</p> <p>Request: <pre><code>{\n  \"team_name\": \"string\",\n  \"role\": \"market_maker\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"team_id\": \"TEAM_001\",\n  \"team_name\": \"string\",\n  \"role\": \"market_maker\",\n  \"api_key\": \"itg_...\",\n  \"created_at\": \"2024-01-15T10:00:00Z\"\n}\n</code></pre></p>"},{"location":"technical/how-to/use-rest-api/#trading","title":"Trading","text":""},{"location":"technical/how-to/use-rest-api/#post-orders","title":"POST /orders","text":"<p>Submit a new order.</p> <p>Headers: - <code>X-API-Key</code>: Your API key</p> <p>Request: <pre><code>{\n  \"instrument_id\": \"SPX_4500_CALL\",\n  \"order_type\": \"limit\",\n  \"side\": \"buy\",\n  \"quantity\": 10,\n  \"price\": 25.50\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"order_id\": \"ORD_123456\",\n  \"status\": \"accepted\",\n  \"timestamp\": \"2024-01-15T10:00:01Z\",\n  \"filled_quantity\": 0,\n  \"average_price\": null,\n  \"error_code\": null,\n  \"error_message\": null\n}\n</code></pre></p>"},{"location":"technical/how-to/use-rest-api/#delete-ordersorder_id","title":"DELETE /orders/{order_id}","text":"<p>Cancel an existing order.</p> <p>Headers: - <code>X-API-Key</code>: Your API key</p> <p>Response: <pre><code>{\n  \"order_id\": \"ORD_123456\",\n  \"status\": \"cancelled\",\n  \"timestamp\": \"2024-01-15T10:00:02Z\",\n  \"error_code\": null,\n  \"error_message\": null\n}\n</code></pre></p>"},{"location":"technical/how-to/use-rest-api/#market-data","title":"Market Data","text":""},{"location":"technical/how-to/use-rest-api/#get-positionsteam_id","title":"GET /positions/{team_id}","text":"<p>Get your current positions.</p> <p>Headers: - <code>X-API-Key</code>: Your API key</p> <p>Response: <pre><code>{\n  \"team_id\": \"TEAM_001\",\n  \"positions\": {\n    \"SPX_4500_CALL\": 10,\n    \"SPX_4500_PUT\": -5\n  },\n  \"last_updated\": \"2024-01-15T10:00:00Z\"\n}\n</code></pre></p>"},{"location":"technical/how-to/use-rest-api/#error-handling","title":"Error Handling","text":"<p>The API returns standard HTTP status codes:</p> <ul> <li><code>200</code>: Success</li> <li><code>400</code>: Bad request (invalid parameters)</li> <li><code>401</code>: Authentication failed</li> <li><code>403</code>: Forbidden (accessing other team's data)</li> <li><code>404</code>: Resource not found</li> <li><code>504</code>: Request timeout</li> </ul> <p>Error responses include details:</p> <pre><code>{\n  \"error\": \"Invalid order type\",\n  \"detail\": \"Order type must be 'limit' or 'market'\",\n  \"timestamp\": \"2024-01-15T10:00:00Z\"\n}\n</code></pre>"},{"location":"technical/how-to/use-rest-api/#rate-limits","title":"Rate Limits","text":"<p>Currently no rate limits are enforced, but be respectful:</p> <ul> <li>Don't submit more than 10 orders per second</li> <li>Don't poll positions more than once per second</li> </ul>"},{"location":"technical/how-to/use-rest-api/#next-steps","title":"Next Steps","text":"<ol> <li>Review the Order Validation Rules</li> <li>Understand Trading Phases</li> <li>Build your trading strategy!</li> </ol>"},{"location":"technical/how-to/use-websockets/","title":"How to Use WebSockets","text":"<p>This guide explains how to integrate WebSocket connections into your trading bot for real-time market data and trade notifications.</p>"},{"location":"technical/how-to/use-websockets/#why-use-websockets","title":"Why Use WebSockets?","text":"<p>WebSockets provide real-time, bidirectional communication between your bot and the exchange:</p> <ul> <li>Immediate Updates - No polling delay for trade executions</li> <li>Lower Latency - Faster than REST API for market data</li> <li>Efficient - Single persistent connection vs multiple HTTP requests</li> <li>Event-Driven - React to market changes as they happen</li> </ul>"},{"location":"technical/how-to/use-websockets/#basic-connection","title":"Basic Connection","text":"<pre><code>import asyncio\nimport websockets\nimport json\n\nclass TradingBot:\n    def __init__(self, api_key):\n        self.api_key = api_key\n        self.uri = f\"ws://localhost:8000/ws?api_key={api_key}\"\n        self.positions = {}\n\n    async def connect(self):\n        async with websockets.connect(self.uri) as websocket:\n            print(\"Connected to exchange WebSocket\")\n            await self.handle_messages(websocket)\n\n    async def handle_messages(self, websocket):\n        async for message in websocket:\n            msg = json.loads(message)\n            await self.process_message(msg)\n\n    async def process_message(self, msg):\n        msg_type = msg['type']\n        data = msg['data']\n\n        if msg_type == 'position_snapshot':\n            self.positions = data['positions']\n            print(f\"Positions initialized: {self.positions}\")\n\n        elif msg_type == 'execution_report':\n            print(f\"Order {data['order_id']} executed: \"\n                  f\"{data['executed_quantity']} @ ${data['executed_price']}\")\n            # Update local position tracking\n            self.update_position(data)\n\n        elif msg_type == 'tick_start':\n            print(f\"Tick {data['tick_number']} started\")\n            # Trigger trading logic for new tick\n\n    def update_position(self, execution):\n        instrument = execution['instrument_id']\n        quantity = execution['executed_quantity']\n        if execution['side'] == 'buy':\n            self.positions[instrument] = self.positions.get(instrument, 0) + quantity\n        else:\n            self.positions[instrument] = self.positions.get(instrument, 0) - quantity\n\n# Run the bot\nbot = TradingBot(\"YOUR_API_KEY\")\nasyncio.run(bot.connect())\n</code></pre>"},{"location":"technical/how-to/use-websockets/#combining-rest-and-websocket-apis","title":"Combining REST and WebSocket APIs","text":"<p>Use REST API for active operations and WebSocket for passive updates:</p> <pre><code>import aiohttp\nimport asyncio\nimport websockets\nimport json\n\nclass HybridBot:\n    def __init__(self, api_key):\n        self.api_key = api_key\n        self.base_url = \"http://localhost:8000\"\n        self.ws_uri = f\"ws://localhost:8000/ws?api_key={api_key}\"\n        self.headers = {\"X-API-Key\": api_key}\n\n    async def run(self):\n        # Start WebSocket connection for real-time updates\n        ws_task = asyncio.create_task(self.websocket_handler())\n\n        # Run main trading loop\n        await self.trading_loop()\n\n    async def websocket_handler(self):\n        async with websockets.connect(self.ws_uri) as websocket:\n            async for message in websocket:\n                msg = json.loads(message)\n                await self.process_ws_message(msg)\n\n    async def trading_loop(self):\n        async with aiohttp.ClientSession() as session:\n            while True:\n                # Wait for tick start via WebSocket\n                await self.wait_for_tick_start()\n\n                # Submit orders via REST API\n                await self.submit_orders(session)\n\n    async def submit_orders(self, session):\n        order = {\n            \"instrument_id\": \"SPX_4500_CALL\",\n            \"side\": \"buy\",\n            \"quantity\": 10,\n            \"order_type\": \"limit\",\n            \"price\": 128.50,\n            \"client_order_id\": f\"ORDER-{asyncio.get_event_loop().time()}\"\n        }\n\n        async with session.post(\n            f\"{self.base_url}/orders\",\n            json=order,\n            headers=self.headers\n        ) as response:\n            result = await response.json()\n            print(f\"Order submitted: {result}\")\n\n    async def process_ws_message(self, msg):\n        if msg['type'] == 'execution_report':\n            # React to fills immediately\n            data = msg['data']\n            if data['order_status'] == 'filled':\n                print(f\"Order filled! Checking for hedging opportunities...\")\n                # Implement hedging logic\n</code></pre>"},{"location":"technical/how-to/use-websockets/#handling-disconnections","title":"Handling Disconnections","text":"<p>Implement robust reconnection logic:</p> <pre><code>import asyncio\nimport websockets\nimport json\nfrom datetime import datetime\n\nclass ResilientBot:\n    def __init__(self, api_key):\n        self.api_key = api_key\n        self.uri = f\"ws://localhost:8000/ws?api_key={api_key}\"\n        self.reconnect_delay = 1  # Start with 1 second\n        self.max_reconnect_delay = 60  # Max 60 seconds\n\n    async def run(self):\n        while True:\n            try:\n                await self.connect()\n            except Exception as e:\n                print(f\"Connection failed: {e}\")\n                print(f\"Reconnecting in {self.reconnect_delay} seconds...\")\n                await asyncio.sleep(self.reconnect_delay)\n                # Exponential backoff\n                self.reconnect_delay = min(\n                    self.reconnect_delay * 2,\n                    self.max_reconnect_delay\n                )\n\n    async def connect(self):\n        async with websockets.connect(self.uri) as websocket:\n            print(f\"Connected at {datetime.now()}\")\n            self.reconnect_delay = 1  # Reset on successful connection\n\n            # Send heartbeat every 30 seconds\n            heartbeat_task = asyncio.create_task(\n                self.heartbeat(websocket)\n            )\n\n            try:\n                await self.handle_messages(websocket)\n            finally:\n                heartbeat_task.cancel()\n\n    async def heartbeat(self, websocket):\n        while True:\n            await asyncio.sleep(30)\n            await websocket.ping()\n\n    async def handle_messages(self, websocket):\n        async for message in websocket:\n            msg = json.loads(message)\n            # Process messages...\n</code></pre>"},{"location":"technical/how-to/use-websockets/#message-sequencing","title":"Message Sequencing","text":"<p>Track sequence numbers to detect missed messages:</p> <pre><code>class SequenceTracker:\n    def __init__(self):\n        self.last_seq = 0\n        self.missed_messages = []\n\n    def check_sequence(self, msg):\n        current_seq = msg['seq']\n        expected_seq = self.last_seq + 1\n\n        if current_seq != expected_seq:\n            # Missed messages\n            for seq in range(expected_seq, current_seq):\n                self.missed_messages.append(seq)\n            print(f\"WARNING: Missed messages {expected_seq} to {current_seq-1}\")\n\n        self.last_seq = current_seq\n\n    async def process_message(self, msg):\n        self.check_sequence(msg)\n        # Continue processing...\n</code></pre>"},{"location":"technical/how-to/use-websockets/#role-specific-signals","title":"Role-Specific Signals","text":"<p>Different roles receive different signals:</p> <pre><code>class RoleAwareBot:\n    def __init__(self, api_key, role):\n        self.api_key = api_key\n        self.role = role\n\n    async def process_signal(self, signal_data):\n        signal_type = signal_data['signal_type']\n\n        if self.role == 'hedge_fund' and signal_type == 'volatility_forecast':\n            # Hedge funds get volatility forecasts\n            forecast = signal_data['forecast']\n            confidence = signal_data['confidence']\n            print(f\"Vol forecast: {forecast} (confidence: {confidence})\")\n            # Adjust option positions based on forecast\n\n        elif self.role == 'arbitrage' and signal_type == 'tracking_error':\n            # Arbitrage desks get tracking error signals\n            error = signal_data['tracking_error']\n            print(f\"Tracking error signal: {error}\")\n            # Execute SPX/SPY arbitrage trades\n</code></pre>"},{"location":"technical/how-to/use-websockets/#performance-tips","title":"Performance Tips","text":"<ol> <li>Async Processing - Don't block the message handler</li> <li>Local State - Maintain positions locally, update from messages</li> <li>Batch Operations - Collect updates before acting</li> <li>Error Handling - Gracefully handle malformed messages</li> </ol> <pre><code>async def optimized_handler(self, websocket):\n    # Buffer for batch processing\n    execution_buffer = []\n\n    async for message in websocket:\n        try:\n            msg = json.loads(message)\n\n            if msg['type'] == 'execution_report':\n                execution_buffer.append(msg['data'])\n\n                # Process in batches\n                if len(execution_buffer) &gt;= 10:\n                    await self.process_executions(execution_buffer)\n                    execution_buffer.clear()\n            else:\n                # Process other messages immediately\n                await self.process_message(msg)\n\n        except json.JSONDecodeError:\n            print(\"Invalid JSON received\")\n        except Exception as e:\n            print(f\"Error processing message: {e}\")\n</code></pre>"},{"location":"technical/how-to/use-websockets/#testing-your-websocket-integration","title":"Testing Your WebSocket Integration","text":"<pre><code># Test script to verify WebSocket connection\nimport asyncio\nimport websockets\nimport json\n\nasync def test_connection(api_key):\n    uri = f\"ws://localhost:8000/ws?api_key={api_key}\"\n\n    async with websockets.connect(uri) as websocket:\n        print(\"\u2713 Connected successfully\")\n\n        # Wait for position snapshot\n        msg = await websocket.recv()\n        data = json.loads(msg)\n\n        if data['type'] == 'position_snapshot':\n            print(\"\u2713 Received position snapshot\")\n            print(f\"  Positions: {data['data']['positions']}\")\n\n        # Wait for a few more messages\n        for i in range(5):\n            msg = await websocket.recv()\n            data = json.loads(msg)\n            print(f\"\u2713 Received {data['type']} (seq: {data['seq']})\")\n\n        print(\"\u2713 All tests passed!\")\n\n# Run test\nasyncio.run(test_connection(\"YOUR_API_KEY\"))\n</code></pre>"},{"location":"technical/how-to/use-websockets/#common-issues","title":"Common Issues","text":""},{"location":"technical/how-to/use-websockets/#connection-refused","title":"Connection Refused","text":"<ul> <li>Verify the server is running</li> <li>Check the WebSocket URL and port</li> <li>Ensure firewall allows WebSocket connections</li> </ul>"},{"location":"technical/how-to/use-websockets/#authentication-failed","title":"Authentication Failed","text":"<ul> <li>Verify API key is correct</li> <li>Check API key is passed in query parameter</li> <li>Ensure team is registered</li> </ul>"},{"location":"technical/how-to/use-websockets/#missing-messages","title":"Missing Messages","text":"<ul> <li>Implement sequence number tracking</li> <li>Add reconnection logic</li> <li>Buffer messages if processing is slow</li> </ul>"},{"location":"technical/how-to/use-websockets/#memory-leaks","title":"Memory Leaks","text":"<ul> <li>Clear old data periodically</li> <li>Limit message history size</li> <li>Use weak references for callbacks</li> </ul>"},{"location":"technical/how-to/use-websockets/#next-steps","title":"Next Steps","text":"<ul> <li>Review WebSocket API Reference for all message types</li> <li>Study Trading Examples for role-specific strategies</li> <li>Implement error handling and monitoring</li> </ul>"},{"location":"technical/how-to/websocket-integration/","title":"WebSocket Integration with REST API","text":"<p>This guide explains how WebSocket notifications integrate with REST API operations in the Intern Trading Game.</p>"},{"location":"technical/how-to/websocket-integration/#overview","title":"Overview","text":"<p>The trading system uses a hybrid approach: - REST API for active operations (submitting orders, querying positions) - WebSocket for real-time notifications (order updates, executions)</p>"},{"location":"technical/how-to/websocket-integration/#architecture","title":"Architecture","text":"<pre><code>Bot -&gt; REST API -&gt; Order Queue -&gt; Validator -&gt; Matching -&gt; Exchange\n         \u2193                         \u2193           \u2193          \u2193\n    WebSocket &lt;- &lt;- &lt;- &lt;- &lt;- &lt;- &lt;- &lt;- Reject &lt;- &lt;- &lt;- Accept &lt;- &lt;- Fill\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#order-lifecycle","title":"Order Lifecycle","text":"<p>When you submit an order via REST API, you'll receive WebSocket notifications at each stage:</p>"},{"location":"technical/how-to/websocket-integration/#1-order-submission-rest","title":"1. Order Submission (REST)","text":"<pre><code># Submit order via REST\nresponse = requests.post(\n    \"http://localhost:8000/orders\",\n    headers={\"X-API-Key\": api_key},\n    json={\n        \"instrument_id\": \"SPX_4500_CALL\",\n        \"order_type\": \"limit\",\n        \"side\": \"buy\",\n        \"quantity\": 10,\n        \"price\": 100.0,\n        \"client_order_id\": \"MY_ORDER_001\"\n    }\n)\n\n# Immediate response\n{\n    \"order_id\": \"ORD_123456\",\n    \"status\": \"accepted\",\n    \"timestamp\": \"2024-01-15T10:00:00Z\",\n    \"filled_quantity\": 0,\n    \"average_price\": null,\n    \"fees\": 0.0,\n    \"liquidity_type\": null\n}\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#2-order-acknowledgment-websocket","title":"2. Order Acknowledgment (WebSocket)","text":"<pre><code>{\n    \"seq\": 2,\n    \"type\": \"new_order_ack\",\n    \"timestamp\": \"2024-01-15T10:00:00.123456Z\",\n    \"data\": {\n        \"order_id\": \"ORD_123456\",\n        \"client_order_id\": \"MY_ORDER_001\",\n        \"instrument_id\": \"SPX_4500_CALL\",\n        \"side\": \"buy\",\n        \"quantity\": 10,\n        \"price\": 100.0,\n        \"status\": \"new\"\n    }\n}\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#3-trade-execution-websocket","title":"3. Trade Execution (WebSocket)","text":"<pre><code>{\n    \"seq\": 3,\n    \"type\": \"execution_report\",\n    \"timestamp\": \"2024-01-15T10:00:01.234567Z\",\n    \"data\": {\n        \"order_id\": \"ORD_123456\",\n        \"client_order_id\": \"MY_ORDER_001\",\n        \"trade_id\": \"TRD_789012\",\n        \"instrument_id\": \"SPX_4500_CALL\",\n        \"side\": \"buy\",\n        \"executed_quantity\": 10,\n        \"executed_price\": 100.0,\n        \"remaining_quantity\": 0,\n        \"order_status\": \"filled\",\n        \"liquidity_type\": \"maker\",\n        \"fees\": -0.20\n    }\n}\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#message-flow-details","title":"Message Flow Details","text":""},{"location":"technical/how-to/websocket-integration/#successful-order-flow","title":"Successful Order Flow","text":"<ol> <li>REST Submit -&gt; Synchronous response with order_id</li> <li>Validator -&gt; If accepted, continues to matching</li> <li>Matching Engine -&gt; Sends <code>new_order_ack</code> via WebSocket</li> <li>Exchange -&gt; If filled, sends <code>execution_report</code> via WebSocket</li> </ol>"},{"location":"technical/how-to/websocket-integration/#rejected-order-flow","title":"Rejected Order Flow","text":"<ol> <li>REST Submit -&gt; Synchronous response with order_id</li> <li>Validator -&gt; If rejected, sends <code>new_order_reject</code> via WebSocket</li> <li>REST Response -&gt; Returns rejected status</li> </ol>"},{"location":"technical/how-to/websocket-integration/#example-integration","title":"Example Integration","text":"<pre><code>import asyncio\nimport json\nimport requests\nimport websockets\n\nclass TradingBot:\n    def __init__(self, api_key):\n        self.api_key = api_key\n        self.base_url = \"http://localhost:8000\"\n        self.ws_uri = f\"ws://localhost:8000/ws?api_key={api_key}\"\n        self.pending_orders = {}\n\n    async def run(self):\n        # Connect WebSocket for notifications\n        async with websockets.connect(self.ws_uri) as websocket:\n            # Handle messages in background\n            ws_task = asyncio.create_task(self.handle_websocket(websocket))\n\n            # Submit order via REST\n            order_id = self.submit_order()\n\n            # Wait for execution via WebSocket\n            await self.wait_for_fill(order_id)\n\n    def submit_order(self):\n        \"\"\"Submit order via REST API.\"\"\"\n        response = requests.post(\n            f\"{self.base_url}/orders\",\n            headers={\"X-API-Key\": self.api_key},\n            json={\n                \"instrument_id\": \"SPX_4500_CALL\",\n                \"order_type\": \"limit\",\n                \"side\": \"buy\",\n                \"quantity\": 10,\n                \"price\": 100.0,\n                \"client_order_id\": f\"BOT_{time.time()}\"\n            }\n        )\n        data = response.json()\n        self.pending_orders[data[\"order_id\"]] = \"submitted\"\n        return data[\"order_id\"]\n\n    async def handle_websocket(self, websocket):\n        \"\"\"Process WebSocket messages.\"\"\"\n        async for message in websocket:\n            msg = json.loads(message)\n\n            if msg[\"type\"] == \"new_order_ack\":\n                order_id = msg[\"data\"][\"order_id\"]\n                if order_id in self.pending_orders:\n                    self.pending_orders[order_id] = \"acknowledged\"\n                    print(f\"Order {order_id} acknowledged by exchange\")\n\n            elif msg[\"type\"] == \"execution_report\":\n                order_id = msg[\"data\"][\"order_id\"]\n                if order_id in self.pending_orders:\n                    self.pending_orders[order_id] = \"filled\"\n                    print(f\"Order {order_id} filled: {msg['data']['executed_quantity']} @ {msg['data']['executed_price']}\")\n\n    async def wait_for_fill(self, order_id):\n        \"\"\"Wait for order to be filled.\"\"\"\n        while self.pending_orders.get(order_id) != \"filled\":\n            await asyncio.sleep(0.1)\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#threading-architecture","title":"Threading Architecture","text":"<p>The system uses dedicated threads for each stage:</p> <ol> <li>Thread 2: Validator - Validates orders, sends rejections</li> <li>Thread 3: Matching - Submits to exchange, sends acknowledgments</li> <li>Thread 4: Publisher - Updates positions, sends execution reports</li> <li>Thread 8: WebSocket - Handles all async WebSocket operations</li> </ol>"},{"location":"technical/how-to/websocket-integration/#key-design-decisions","title":"Key Design Decisions","text":""},{"location":"technical/how-to/websocket-integration/#why-separate-threads","title":"Why Separate Threads?","text":"<ul> <li>REST API remains synchronous and simple</li> <li>WebSocket operations are async and isolated</li> <li>No blocking between REST and WebSocket operations</li> <li>Clean separation of concerns</li> </ul>"},{"location":"technical/how-to/websocket-integration/#message-timing","title":"Message Timing","text":"<ul> <li>Acknowledgment sent AFTER exchange accepts (not just validation)</li> <li>Execution sent immediately when trade occurs</li> <li>Position updates included in execution reports</li> </ul>"},{"location":"technical/how-to/websocket-integration/#error-handling","title":"Error Handling","text":"<ul> <li>WebSocket failures don't affect REST operations</li> <li>Disconnected clients don't block the queue</li> <li>Messages for disconnected clients are dropped</li> </ul>"},{"location":"technical/how-to/websocket-integration/#best-practices","title":"Best Practices","text":"<ol> <li>Always connect WebSocket before trading - Ensures you don't miss notifications</li> <li>Track orders by client_order_id - Your reference stays consistent</li> <li>Handle reconnections - WebSocket may disconnect, plan for it</li> <li>Don't rely solely on WebSocket - REST responses are authoritative</li> <li>Process messages asynchronously - Don't block the message handler</li> </ol>"},{"location":"technical/how-to/websocket-integration/#common-patterns","title":"Common Patterns","text":""},{"location":"technical/how-to/websocket-integration/#pattern-1-fire-and-forget","title":"Pattern 1: Fire and Forget","text":"<pre><code># Submit order and move on\nresponse = submit_order()\nif response[\"status\"] != \"rejected\":\n    # Continue trading, handle fills via WebSocket\n    pass\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#pattern-2-wait-for-fill","title":"Pattern 2: Wait for Fill","text":"<pre><code># Submit and wait for execution\norder_id = submit_order()[\"order_id\"]\nexecution = await wait_for_websocket_message(\"execution_report\", order_id)\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#pattern-3-bulk-order-management","title":"Pattern 3: Bulk Order Management","text":"<pre><code># Track multiple orders\npending = {}\nfor signal in signals:\n    order = submit_order(signal)\n    pending[order[\"order_id\"]] = signal\n\n# Process executions as they arrive\nasync for msg in websocket:\n    if msg[\"type\"] == \"execution_report\":\n        signal = pending.pop(msg[\"data\"][\"order_id\"])\n        handle_fill(signal, msg[\"data\"])\n</code></pre>"},{"location":"technical/how-to/websocket-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"technical/how-to/websocket-integration/#missing-messages","title":"Missing Messages","text":"<ul> <li>Ensure WebSocket is connected before submitting orders</li> <li>Check sequence numbers for gaps</li> <li>Verify API key has correct permissions</li> </ul>"},{"location":"technical/how-to/websocket-integration/#delayed-messages","title":"Delayed Messages","text":"<ul> <li>Network latency can delay WebSocket delivery</li> <li>REST response arrives before WebSocket notification</li> <li>Use client_order_id to correlate across both channels</li> </ul>"},{"location":"technical/how-to/websocket-integration/#connection-issues","title":"Connection Issues","text":"<ul> <li>Implement exponential backoff for reconnections</li> <li>Always re-subscribe to position snapshot on reconnect</li> <li>Queue orders locally during disconnection</li> </ul>"},{"location":"technical/reference/","title":"API Reference","text":"<p>Complete API documentation for the Intern Trading Game. This section provides detailed specifications for all APIs, endpoints, and interfaces.</p>"},{"location":"technical/reference/#core-apis","title":"Core APIs","text":""},{"location":"technical/reference/#exchange-interface","title":"Exchange Interface","text":"<ul> <li>API Overview - High-level overview of the API architecture and design principles</li> <li>Exchange API - Core exchange interface for order management and market data</li> </ul>"},{"location":"technical/reference/#communication-protocols","title":"Communication Protocols","text":"<ul> <li>REST API - HTTP REST endpoints for order submission, account info, and historical data</li> <li>WebSocket API - Real-time streaming API for market data and order updates</li> </ul>"},{"location":"technical/reference/#validation-rules","title":"Validation &amp; Rules","text":"<ul> <li>Validation API - Order validation rules and error codes</li> <li>Math Examples - Mathematical formulas and calculations used in the system</li> </ul>"},{"location":"technical/reference/#api-quick-reference","title":"API Quick Reference","text":""},{"location":"technical/reference/#rest-endpoints","title":"REST Endpoints","text":"<ul> <li><code>POST /api/orders</code> - Submit new order</li> <li><code>GET /api/orders/{id}</code> - Get order status</li> <li><code>DELETE /api/orders/{id}</code> - Cancel order</li> <li><code>GET /api/market-data</code> - Get current market data</li> <li><code>GET /api/positions</code> - Get current positions</li> </ul> <p>Full REST API Documentation \u2192</p>"},{"location":"technical/reference/#websocket-channels","title":"WebSocket Channels","text":"<ul> <li><code>market-data</code> - Real-time price updates</li> <li><code>order-updates</code> - Order status changes</li> <li><code>trades</code> - Executed trades feed</li> <li><code>positions</code> - Position updates</li> </ul> <p>Full WebSocket API Documentation \u2192</p>"},{"location":"technical/reference/#generated-api-docs","title":"Generated API Docs","text":"<p>The following API documentation is auto-generated from source code:</p> <ul> <li>Order Book API</li> <li>Order API</li> <li>Trade API</li> <li>Venue API</li> <li>Instrument API</li> </ul>"},{"location":"technical/reference/#integration-examples","title":"Integration Examples","text":"<p>Looking for integration examples? Check out:</p> <ul> <li>How to Submit Orders - Practical order submission guide</li> <li>Market Maker Tutorial - Complete bot implementation</li> </ul>"},{"location":"technical/reference/#navigation","title":"Navigation","text":"<p>\u2190 Back to Technical Docs | How-To Guides \u2192</p>"},{"location":"technical/reference/api-overview/","title":"API Reference","text":""},{"location":"technical/reference/api-overview/#exchange-components","title":"Exchange Components","text":""},{"location":"technical/reference/api-overview/#exchangevenue","title":"ExchangeVenue","text":"<p>Main exchange venue that handles order submission and matching.</p> <p>Parameters:</p> <ul> <li>matching_engine : <code>MatchingEngine</code>, optional<ul> <li>The matching engine to use for order processing. Defaults to <code>ContinuousMatchingEngine</code> if not provided.</li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li>order_books : <code>Dict[str, OrderBook]</code><ul> <li>Map of instrument IDs to their order books</li> </ul> </li> <li>instruments : <code>Dict[str, Instrument]</code><ul> <li>Map of instrument IDs to their instrument objects</li> </ul> </li> <li>matching_engine : <code>MatchingEngine</code><ul> <li>The engine responsible for order matching logic</li> </ul> </li> </ul> <p>Examples:</p> <pre><code># Create exchange with continuous matching (default)\nexchange = ExchangeVenue()\n\n# Create exchange with batch matching\nfrom intern_trading_game.exchange import BatchMatchingEngine\nexchange = ExchangeVenue(matching_engine=BatchMatchingEngine())\n\n# List an instrument\ninstrument = Instrument(symbol=\"SPX_CALL_5000\", underlying=\"SPX\")\nexchange.list_instrument(instrument)\n\n# Submit an order\norder = Order(\n    instrument_id=\"SPX_CALL_5000\",\n    side=\"buy\",\n    quantity=10,\n    price=25.50,\n    trader_id=\"MM1\"\n)\nresult = exchange.submit_order(order)\n\n# Cancel an order\ncancelled = exchange.cancel_order(order.order_id, \"MM1\")\n</code></pre> <p>See Also:</p> <ul> <li><code>BatchMatchingEngine</code> : For batch order matching with randomization</li> <li><code>ContinuousMatchingEngine</code> : For immediate order matching</li> <li><code>Order</code> : Order data structure</li> <li><code>OrderBook</code> : Order book implementation</li> </ul>"},{"location":"technical/reference/api-overview/#batchmatchingengine","title":"BatchMatchingEngine","text":"<p>Implements batch order matching with fair randomization at same price levels.</p> <p>Description:</p> <p>This engine collects orders during a submission window and processes them all simultaneously at a designated time. Orders at the same price level are randomized to ensure fairness, preventing timing advantages.</p> <p>Mathematical Guarantees:</p> <p>For orders at the same price level:</p> <ul> <li>P(Order A fills before Order B) = 1/2</li> <li>P(Order i in position j) = 1/n for n orders</li> </ul> <p>Methods:</p> <ul> <li>submit_order(order, order_book) : Collect order for batch processing</li> <li>execute_batch(order_books) : Process all pending orders with randomization</li> <li>get_pending_count(instrument_id) : Get count of pending orders</li> </ul> <p>Examples:</p> <pre><code># Create batch matching engine\nengine = BatchMatchingEngine()\n\n# Orders are collected, not matched immediately\norder1 = Order(instrument_id=\"SPX_CALL\", side=\"buy\",\n               quantity=10, price=25.50, trader_id=\"MM1\")\nresult1 = engine.submit_order(order1, order_book)\nassert result1.status == \"pending_new\"\n\n# Execute batch to process all orders\nresults = engine.execute_batch({\"SPX_CALL\": order_book})\n</code></pre> <p>Notes:</p> <p>Batch matching is ideal for game environments where fairness is paramount. It eliminates speed advantages and ensures all participants have equal opportunity to trade at each price level.</p>"},{"location":"technical/reference/api-overview/#core-models","title":"Core Models","text":""},{"location":"technical/reference/api-overview/#order","title":"Order","text":"<p>Represents a trading order with all necessary attributes.</p> <p>Parameters:</p> <ul> <li>instrument_id : <code>str</code><ul> <li>The ID of the instrument being traded</li> </ul> </li> <li>side : <code>str</code><ul> <li>Either \"buy\" or \"sell\"</li> </ul> </li> <li>quantity : <code>int</code><ul> <li>Number of contracts to trade</li> </ul> </li> <li>price : <code>float</code>, optional<ul> <li>Limit price (None for market orders)</li> </ul> </li> <li>trader_id : <code>str</code><ul> <li>ID of the trader submitting the order</li> </ul> </li> <li>order_id : <code>str</code>, optional<ul> <li>Unique order identifier (auto-generated if not provided)</li> </ul> </li> <li>client_order_id : <code>str</code>, optional<ul> <li>Client's reference ID for order tracking</li> </ul> </li> </ul> <p>Attributes:</p> <ul> <li>remaining_quantity : <code>int</code><ul> <li>Unfilled portion of the order</li> </ul> </li> <li>is_filled : <code>bool</code><ul> <li>Whether the order is completely filled</li> </ul> </li> <li>timestamp : <code>datetime</code><ul> <li>When the order was created</li> </ul> </li> </ul> <p>Examples:</p> <pre><code># Create a limit order\norder = Order(\n    instrument_id=\"SPX_PUT_4900\",\n    side=\"sell\",\n    quantity=5,\n    price=15.25,\n    trader_id=\"HF1\"\n)\n\n# Create a market order\nmarket_order = Order(\n    instrument_id=\"SPY_CALL_490\",\n    side=\"buy\",\n    quantity=20,\n    price=None,  # Market order\n    trader_id=\"RT1\"\n)\n</code></pre>"},{"location":"technical/reference/api-overview/#trade","title":"Trade","text":"<p>Represents an executed trade between two orders.</p> <p>Attributes:</p> <ul> <li>instrument_id : <code>str</code><ul> <li>The instrument that was traded</li> </ul> </li> <li>buyer_order_id : <code>str</code><ul> <li>ID of the buy order</li> </ul> </li> <li>seller_order_id : <code>str</code><ul> <li>ID of the sell order</li> </ul> </li> <li>buyer_id : <code>str</code><ul> <li>ID of the buying trader</li> </ul> </li> <li>seller_id : <code>str</code><ul> <li>ID of the selling trader</li> </ul> </li> <li>price : <code>float</code><ul> <li>Execution price</li> </ul> </li> <li>quantity : <code>int</code><ul> <li>Number of contracts traded</li> </ul> </li> <li>timestamp : <code>datetime</code><ul> <li>When the trade occurred</li> </ul> </li> <li>aggressor_side : <code>str</code><ul> <li>Which side initiated the trade ('buy' or 'sell')</li> </ul> </li> </ul> <p>Examples:</p> <pre><code># Trades are typically created by the matching engine\n# This example shows the structure:\ntrade = Trade(\n    instrument_id=\"SPX_CALL_5000\",\n    buyer_order_id=\"BUY-001\",\n    seller_order_id=\"SELL-001\",\n    buyer_id=\"MM1\",\n    seller_id=\"HF1\",\n    price=25.50,\n    quantity=10\n)\n</code></pre>"},{"location":"technical/reference/api-overview/#game-components","title":"Game Components","text":""},{"location":"technical/reference/api-overview/#gameloop","title":"GameLoop","text":"<p>Main game controller that orchestrates the 5-minute tick cycles.</p> <p>Parameters:</p> <ul> <li>config : <code>GameConfig</code><ul> <li>Configuration for the game session</li> </ul> </li> <li>exchange : <code>ExchangeVenue</code><ul> <li>The exchange for order matching</li> </ul> </li> <li>price_model : <code>PriceModel</code>, optional<ul> <li>Model for generating underlying prices</li> </ul> </li> </ul> <p>Methods:</p> <ul> <li>run_tick() : Execute one complete 5-minute tick cycle</li> <li>start_game() : Begin the game session</li> <li>stop_game() : End the game session gracefully</li> </ul> <p>Tick Phases:</p> <ol> <li>T+0:00 : New prices published</li> <li>T+0:30 to T+3:00 : Order submission window</li> <li>T+3:30 : Batch matching execution</li> <li>T+4:00 : Position updates and P&amp;L calculation</li> <li>T+5:00 : Tick complete, prepare for next</li> </ol> <p>Examples:</p> <pre><code># Create and configure game loop\nconfig = GameConfig(\n    duration_hours=2,\n    tick_interval_minutes=5,\n    matching_mode=\"batch\"\n)\n\ngame = GameLoop(\n    config=config,\n    exchange=ExchangeVenue(BatchMatchingEngine())\n)\n\n# Run one tick\ngame.run_tick()\n</code></pre>"},{"location":"technical/reference/exchange-api/","title":"Exchange API Reference","text":"<p>This document provides a comprehensive reference for the Intern Trading Game exchange API.</p>"},{"location":"technical/reference/exchange-api/#core-components","title":"Core Components","text":"<p>The exchange system consists of the following core components:</p> Component Description <code>ExchangeVenue</code> The main exchange venue that handles order submission and matching <code>OrderBook</code> Maintains the order book for a single instrument <code>Order</code> Represents a trading order (buy or sell) <code>Trade</code> Represents an executed trade between two orders <code>Instrument</code> Represents a tradeable instrument (stock or option)"},{"location":"technical/reference/exchange-api/#exchangevenue","title":"ExchangeVenue","text":"<p>The <code>ExchangeVenue</code> class is the main entry point for interacting with the exchange.</p>"},{"location":"technical/reference/exchange-api/#methods","title":"Methods","text":""},{"location":"technical/reference/exchange-api/#list_instrumentinstrument-instrument-none","title":"<code>list_instrument(instrument: Instrument) -&gt; None</code>","text":"<p>Register an instrument with the exchange.</p> <p>Parameters: - <code>instrument</code> (Instrument): The instrument to register.</p> <p>Raises: - <code>ValueError</code>: If an instrument with the same ID already exists.</p>"},{"location":"technical/reference/exchange-api/#submit_orderorder-order-orderresult","title":"<code>submit_order(order: Order) -&gt; OrderResult</code>","text":"<p>Submit an order to the exchange.</p> <p>Parameters: - <code>order</code> (Order): The order to submit.</p> <p>Returns: - <code>OrderResult</code>: The result of the order submission.</p> <p>Raises: - <code>ValueError</code>: If the instrument doesn't exist or the order ID is already in use.</p>"},{"location":"technical/reference/exchange-api/#cancel_orderorder_id-str-trader_id-str-bool","title":"<code>cancel_order(order_id: str, trader_id: str) -&gt; bool</code>","text":"<p>Cancel an order.</p> <p>Parameters: - <code>order_id</code> (str): The ID of the order to cancel. - <code>trader_id</code> (str): The ID of the trader who owns the order.</p> <p>Returns: - <code>bool</code>: True if the order was cancelled, False otherwise.</p> <p>Raises: - <code>ValueError</code>: If the trader doesn't own the order.</p>"},{"location":"technical/reference/exchange-api/#get_order_bookinstrument_id-str-optionalorderbook","title":"<code>get_order_book(instrument_id: str) -&gt; Optional[OrderBook]</code>","text":"<p>Get the order book for an instrument.</p> <p>Parameters: - <code>instrument_id</code> (str): The ID of the instrument.</p> <p>Returns: - <code>Optional[OrderBook]</code>: The order book, or None if the instrument doesn't exist.</p>"},{"location":"technical/reference/exchange-api/#get_trade_historyinstrument_id-str-limit-int-10-listtrade","title":"<code>get_trade_history(instrument_id: str, limit: int = 10) -&gt; List[Trade]</code>","text":"<p>Get the trade history for an instrument.</p> <p>Parameters: - <code>instrument_id</code> (str): The ID of the instrument. - <code>limit</code> (int, optional): The maximum number of trades to return. Defaults to 10.</p> <p>Returns: - <code>List[Trade]</code>: The most recent trades, newest first.</p> <p>Raises: - <code>ValueError</code>: If the instrument doesn't exist.</p>"},{"location":"technical/reference/exchange-api/#get_market_summaryinstrument_id-str-dictstr-object","title":"<code>get_market_summary(instrument_id: str) -&gt; Dict[str, object]</code>","text":"<p>Get a summary of the current market state for an instrument.</p> <p>Parameters: - <code>instrument_id</code> (str): The ID of the instrument.</p> <p>Returns: - <code>Dict</code>: A dictionary containing the best bid/ask and recent trades.</p> <p>Raises: - <code>ValueError</code>: If the instrument doesn't exist.</p>"},{"location":"technical/reference/exchange-api/#get_all_instruments-listinstrument","title":"<code>get_all_instruments() -&gt; List[Instrument]</code>","text":"<p>Get all instruments listed on the exchange.</p> <p>Returns: - <code>List[Instrument]</code>: All registered instruments.</p>"},{"location":"technical/reference/exchange-api/#order","title":"Order","text":"<p>The <code>Order</code> class represents a trading order.</p>"},{"location":"technical/reference/exchange-api/#attributes","title":"Attributes","text":"<ul> <li><code>instrument_id</code> (str): The ID of the instrument being traded.</li> <li><code>side</code> (OrderSide): Whether this is a buy or sell order.</li> <li><code>quantity</code> (float): The quantity to be traded.</li> <li><code>price</code> (Optional[float]): The limit price (None for market orders).</li> <li><code>trader_id</code> (str): The ID of the trader submitting the order.</li> <li><code>order_id</code> (str): A unique identifier for this order.</li> <li><code>timestamp</code> (datetime): When the order was created.</li> <li><code>order_type</code> (OrderType): The type of order (limit or market).</li> <li><code>client_order_id</code> (Optional[str]): Client's reference ID for order tracking.</li> <li><code>remaining_quantity</code> (float): The unfilled quantity of the order.</li> </ul>"},{"location":"technical/reference/exchange-api/#methods_1","title":"Methods","text":""},{"location":"technical/reference/exchange-api/#fillquantity-float-none","title":"<code>fill(quantity: float) -&gt; None</code>","text":"<p>Mark a quantity of this order as filled.</p> <p>Parameters: - <code>quantity</code> (float): The quantity that was filled.</p> <p>Raises: - <code>ValueError</code>: If the quantity is invalid or exceeds the remaining quantity.</p>"},{"location":"technical/reference/exchange-api/#properties","title":"Properties","text":"<ul> <li><code>is_buy</code> (bool): True if this is a buy order.</li> <li><code>is_sell</code> (bool): True if this is a sell order.</li> <li><code>is_market_order</code> (bool): True if this is a market order.</li> <li><code>is_limit_order</code> (bool): True if this is a limit order.</li> <li><code>is_filled</code> (bool): True if this order is completely filled.</li> </ul>"},{"location":"technical/reference/exchange-api/#orderbook","title":"OrderBook","text":"<p>The <code>OrderBook</code> class maintains the order book for a single instrument.</p>"},{"location":"technical/reference/exchange-api/#methods_2","title":"Methods","text":""},{"location":"technical/reference/exchange-api/#add_orderorder-order-listtrade","title":"<code>add_order(order: Order) -&gt; List[Trade]</code>","text":"<p>Add an order to the book and attempt to match it.</p> <p>Parameters: - <code>order</code> (Order): The order to add.</p> <p>Returns: - <code>List[Trade]</code>: Any trades that were generated.</p>"},{"location":"technical/reference/exchange-api/#cancel_orderorder_id-str-optionalorder","title":"<code>cancel_order(order_id: str) -&gt; Optional[Order]</code>","text":"<p>Cancel and remove an order from the book.</p> <p>Parameters: - <code>order_id</code> (str): The ID of the order to cancel.</p> <p>Returns: - <code>Optional[Order]</code>: The cancelled order, or None if not found.</p>"},{"location":"technical/reference/exchange-api/#best_bid-optionaltuplefloat-float","title":"<code>best_bid() -&gt; Optional[Tuple[float, float]]</code>","text":"<p>Get the best (highest) bid price and quantity.</p> <p>Returns: - <code>Optional[Tuple[float, float]]</code>: (price, quantity) or None if no bids.</p>"},{"location":"technical/reference/exchange-api/#best_ask-optionaltuplefloat-float","title":"<code>best_ask() -&gt; Optional[Tuple[float, float]]</code>","text":"<p>Get the best (lowest) ask price and quantity.</p> <p>Returns: - <code>Optional[Tuple[float, float]]</code>: (price, quantity) or None if no asks.</p>"},{"location":"technical/reference/exchange-api/#depth_snapshotlevels-int-5-dictstr-listtuplefloat-float","title":"<code>depth_snapshot(levels: int = 5) -&gt; Dict[str, List[Tuple[float, float]]]</code>","text":"<p>Get a snapshot of the order book depth.</p> <p>Parameters: - <code>levels</code> (int, optional): The number of price levels to include. Defaults to 5.</p> <p>Returns: - <code>Dict[str, List[Tuple[float, float]]]</code>: A dictionary with 'bids' and 'asks' keys, each with a list of (price, quantity) tuples.</p>"},{"location":"technical/reference/exchange-api/#get_orderorder_id-str-optionalorder","title":"<code>get_order(order_id: str) -&gt; Optional[Order]</code>","text":"<p>Get an order from the book by its ID.</p> <p>Parameters: - <code>order_id</code> (str): The ID of the order to get.</p> <p>Returns: - <code>Optional[Order]</code>: The order, or None if not found.</p>"},{"location":"technical/reference/exchange-api/#get_recent_tradeslimit-int-10-listtrade","title":"<code>get_recent_trades(limit: int = 10) -&gt; List[Trade]</code>","text":"<p>Get the most recent trades.</p> <p>Parameters: - <code>limit</code> (int, optional): The maximum number of trades to return. Defaults to 10.</p> <p>Returns: - <code>List[Trade]</code>: The most recent trades, newest first.</p>"},{"location":"technical/reference/exchange-api/#instrument","title":"Instrument","text":"<p>The <code>Instrument</code> class represents a tradeable instrument.</p>"},{"location":"technical/reference/exchange-api/#attributes_1","title":"Attributes","text":"<ul> <li><code>symbol</code> (str): The unique identifier for the instrument.</li> <li><code>strike</code> (Optional[float]): The strike price for options, None for other instruments.</li> <li><code>expiry</code> (Optional[str]): The expiration date for options in ISO format (YYYY-MM-DD).</li> <li><code>option_type</code> (Optional[str]): The type of option ('call' or 'put'), None for other instruments.</li> <li><code>underlying</code> (Optional[str]): The underlying asset symbol for derivatives.</li> </ul>"},{"location":"technical/reference/exchange-api/#properties_1","title":"Properties","text":"<ul> <li><code>id</code> (str): The unique identifier for this instrument (same as symbol).</li> </ul>"},{"location":"technical/reference/exchange-api/#trade","title":"Trade","text":"<p>The <code>Trade</code> class represents an executed trade.</p>"},{"location":"technical/reference/exchange-api/#attributes_2","title":"Attributes","text":"<ul> <li><code>instrument_id</code> (str): The ID of the instrument that was traded.</li> <li><code>buyer_id</code> (str): The ID of the trader who bought.</li> <li><code>seller_id</code> (str): The ID of the trader who sold.</li> <li><code>price</code> (float): The execution price of the trade.</li> <li><code>quantity</code> (float): The quantity that was traded.</li> <li><code>timestamp</code> (datetime): When the trade occurred.</li> <li><code>trade_id</code> (str): A unique identifier for this trade.</li> <li><code>buyer_order_id</code> (str): The ID of the buy order.</li> <li><code>seller_order_id</code> (str): The ID of the sell order.</li> <li><code>aggressor_side</code> (str): Which side initiated the trade ('buy' or 'sell').</li> </ul> <p>The <code>aggressor_side</code> indicates which order crossed the spread to create the trade. This determines maker/taker status for fee calculations - the aggressor is always the taker.</p>"},{"location":"technical/reference/exchange-api/#properties_2","title":"Properties","text":"<ul> <li><code>value</code> (float): The total value of this trade (price * quantity).</li> </ul>"},{"location":"technical/reference/exchange-api/#methods_3","title":"Methods","text":""},{"location":"technical/reference/exchange-api/#to_dict-dict","title":"<code>to_dict() -&gt; dict</code>","text":"<p>Convert the trade to a dictionary representation.</p> <p>Returns: - <code>dict</code>: A dictionary containing the trade details.</p>"},{"location":"technical/reference/exchange-api/#orderresult","title":"OrderResult","text":"<p>The <code>OrderResult</code> class represents the result of submitting an order.</p>"},{"location":"technical/reference/exchange-api/#attributes_3","title":"Attributes","text":"<ul> <li><code>order_id</code> (str): The ID of the submitted order.</li> <li><code>status</code> (str): The status of the order ('accepted' or 'filled').</li> <li><code>fills</code> (List[Trade]): Any trades that were generated.</li> <li><code>remaining_quantity</code> (float): The unfilled quantity of the order.</li> </ul>"},{"location":"technical/reference/math-examples/","title":"Mathematical Formula Examples","text":"<p>This reference document provides examples of common mathematical formulas used in the Intern Trading Game project. You can copy these examples and adapt them for your own documentation needs.</p>"},{"location":"technical/reference/math-examples/#basic-formulas","title":"Basic Formulas","text":""},{"location":"technical/reference/math-examples/#price-time-priority","title":"Price-Time Priority","text":"<pre><code>$$\\text{Priority} = (\\text{Price}, \\text{Time})$$\n</code></pre> <p>Renders as:</p> \\[\\text{Priority} = (\\text{Price}, \\text{Time})\\]"},{"location":"technical/reference/math-examples/#simple-interest","title":"Simple Interest","text":"<pre><code>$$\\text{Interest} = \\text{Principal} \\times \\text{Rate} \\times \\text{Time}$$\n</code></pre> <p>Renders as:</p> \\[\\text{Interest} = \\text{Principal} \\times \\text{Rate} \\times \\text{Time}\\]"},{"location":"technical/reference/math-examples/#financial-formulas","title":"Financial Formulas","text":""},{"location":"technical/reference/math-examples/#black-scholes-option-pricing","title":"Black-Scholes Option Pricing","text":"<pre><code>$$C = S_0 e^{-qT} N(d_1) - K e^{-rT} N(d_2)$$\n\n$$d_1 = \\frac{\\ln(S_0/K) + (r - q + \\sigma^2/2)T}{\\sigma\\sqrt{T}}$$\n\n$$d_2 = d_1 - \\sigma\\sqrt{T}$$\n</code></pre> <p>Renders as:</p> \\[C = S_0 e^{-qT} N(d_1) - K e^{-rT} N(d_2)\\] \\[d_1 = \\frac{\\ln(S_0/K) + (r - q + \\sigma^2/2)T}{\\sigma\\sqrt{T}}\\] \\[d_2 = d_1 - \\sigma\\sqrt{T}\\]"},{"location":"technical/reference/math-examples/#put-call-parity","title":"Put-Call Parity","text":"<pre><code>$$C - P = S_0 e^{-qT} - K e^{-rT}$$\n</code></pre> <p>Renders as:</p> \\[C - P = S_0 e^{-qT} - K e^{-rT}\\]"},{"location":"technical/reference/math-examples/#implied-volatility","title":"Implied Volatility","text":"<pre><code>$$\\text{Market Price} = f(S, K, r, q, T, \\sigma_{\\text{implied}})$$\n</code></pre> <p>Renders as:</p> \\[\\text{Market Price} = f(S, K, r, q, T, \\sigma_{\\text{implied}})\\]"},{"location":"technical/reference/math-examples/#risk-metrics","title":"Risk Metrics","text":""},{"location":"technical/reference/math-examples/#delta","title":"Delta","text":"<pre><code>$$\\Delta = \\frac{\\partial V}{\\partial S}$$\n</code></pre> <p>Renders as:</p> \\[\\Delta = \\frac{\\partial V}{\\partial S}\\]"},{"location":"technical/reference/math-examples/#gamma","title":"Gamma","text":"<pre><code>$$\\Gamma = \\frac{\\partial^2 V}{\\partial S^2}$$\n</code></pre> <p>Renders as:</p> \\[\\Gamma = \\frac{\\partial^2 V}{\\partial S^2}\\]"},{"location":"technical/reference/math-examples/#theta","title":"Theta","text":"<pre><code>$$\\Theta = \\frac{\\partial V}{\\partial T}$$\n</code></pre> <p>Renders as:</p> \\[\\Theta = \\frac{\\partial V}{\\partial T}\\]"},{"location":"technical/reference/math-examples/#vega","title":"Vega","text":"<pre><code>$$\\text{Vega} = \\frac{\\partial V}{\\partial \\sigma}$$\n</code></pre> <p>Renders as:</p> \\[\\text{Vega} = \\frac{\\partial V}{\\partial \\sigma}\\]"},{"location":"technical/reference/math-examples/#statistical-formulas","title":"Statistical Formulas","text":""},{"location":"technical/reference/math-examples/#standard-deviation","title":"Standard Deviation","text":"<pre><code>$$\\sigma = \\sqrt{\\frac{1}{N} \\sum_{i=1}^{N} (x_i - \\mu)^2}$$\n</code></pre> <p>Renders as:</p> \\[\\sigma = \\sqrt{\\frac{1}{N} \\sum_{i=1}^{N} (x_i - \\mu)^2}\\]"},{"location":"technical/reference/math-examples/#correlation","title":"Correlation","text":"<pre><code>$$\\rho_{xy} = \\frac{\\text{Cov}(X,Y)}{\\sigma_X \\sigma_Y}$$\n</code></pre> <p>Renders as:</p> \\[\\rho_{xy} = \\frac{\\text{Cov}(X,Y)}{\\sigma_X \\sigma_Y}\\]"},{"location":"technical/reference/math-examples/#matrix-notation","title":"Matrix Notation","text":""},{"location":"technical/reference/math-examples/#covariance-matrix","title":"Covariance Matrix","text":"<pre><code>$$\\Sigma =\n\\begin{pmatrix}\n\\sigma_1^2 &amp; \\sigma_{12} &amp; \\cdots &amp; \\sigma_{1n} \\\\\n\\sigma_{21} &amp; \\sigma_2^2 &amp; \\cdots &amp; \\sigma_{2n} \\\\\n\\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\\n\\sigma_{n1} &amp; \\sigma_{n2} &amp; \\cdots &amp; \\sigma_n^2\n\\end{pmatrix}$$\n</code></pre> <p>Renders as:</p> \\[\\Sigma = \\begin{pmatrix} \\sigma_1^2 &amp; \\sigma_{12} &amp; \\cdots &amp; \\sigma_{1n} \\\\ \\sigma_{21} &amp; \\sigma_2^2 &amp; \\cdots &amp; \\sigma_{2n} \\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ \\sigma_{n1} &amp; \\sigma_{n2} &amp; \\cdots &amp; \\sigma_n^2 \\end{pmatrix}\\]"},{"location":"technical/reference/math-examples/#inline-math-examples","title":"Inline Math Examples","text":"<p>When you need to include math within a paragraph, use the inline syntax:</p> <pre><code>The delta of an option \\(\\Delta\\) measures the rate of change of the option price with respect to the price of the underlying asset.\n</code></pre> <p>Renders as:</p> <p>The delta of an option \\(\\Delta\\) measures the rate of change of the option price with respect to the price of the underlying asset.</p>"},{"location":"technical/reference/math-examples/#using-math-in-docstrings","title":"Using Math in Docstrings","text":"<p>When adding math to Python docstrings, always use raw strings (prefixed with <code>r</code>) and maintain proper indentation:</p> <pre><code>def calculate_option_price(S, K, r, q, T, sigma):\n    r\"\"\"\n    Calculate the price of a European call option using the Black-Scholes formula.\n\n    The Black-Scholes formula is:\n\n    $$C = S e^{-qT} N(d_1) - K e^{-rT} N(d_2)$$\n\n    where:\n\n    $$d_1 = \\frac{\\ln(S/K) + (r - q + \\sigma^2/2)T}{\\sigma\\sqrt{T}}$$\n\n    $$d_2 = d_1 - \\sigma\\sqrt{T}$$\n\n    Parameters\n    ----------\n    S : float\n        Current price of the underlying asset\n    K : float\n        Strike price\n    r : float\n        Risk-free interest rate (annualized)\n    q : float\n        Dividend yield (annualized)\n    T : float\n        Time to expiration (in years)\n    sigma : float\n        Volatility of the underlying asset (annualized)\n\n    Returns\n    -------\n    float\n        Price of the European call option\n    \"\"\"\n</code></pre>"},{"location":"technical/reference/math-examples/#why-raw-strings-are-required","title":"Why Raw Strings Are Required","text":"<p>Without the <code>r</code> prefix, Python interprets backslashes as escape sequences:</p> <ul> <li><code>\\t</code> becomes a tab character</li> <li><code>\\f</code> becomes a form feed character</li> <li><code>\\n</code> becomes a newline</li> </ul> <p>This breaks LaTeX commands like <code>\\text</code>, <code>\\frac</code>, and <code>\\sqrt</code>, causing formulas to render incorrectly.</p> <p>For example, without a raw string: <pre><code>\"\"\"\n$$\\text{Value} = \\text{Price} \\times \\text{Quantity}$$\n\"\"\"  # Will render as \"extValue = extPrice \u00d7 extQuantity\"\n</code></pre></p> <p>With a raw string: <pre><code>r\"\"\"\n$$\\text{Value} = \\text{Price} \\times \\text{Quantity}$$\n\"\"\"  # Will render correctly\n</code></pre></p>"},{"location":"technical/reference/math-examples/#resources","title":"Resources","text":"<p>For more information on using math in documentation:</p> <ul> <li>MathJax Documentation</li> <li>LaTeX Math Symbols Cheat Sheet</li> <li>Detexify - Draw a symbol to find its LaTeX command</li> </ul>"},{"location":"technical/reference/rest-api/","title":"REST API Reference","text":"<p>Complete reference for the Intern Trading Game REST API.</p>"},{"location":"technical/reference/rest-api/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre>"},{"location":"technical/reference/rest-api/#authentication","title":"Authentication","text":"<p>All endpoints except <code>/</code> and <code>/auth/register</code> require authentication via API key.</p> <p>Include your API key in the <code>X-API-Key</code> header:</p> <pre><code>X-API-Key: itg_your_api_key_here\n</code></pre>"},{"location":"technical/reference/rest-api/#endpoints","title":"Endpoints","text":""},{"location":"technical/reference/rest-api/#system","title":"System","text":""},{"location":"technical/reference/rest-api/#get","title":"GET /","text":"<p>Health check endpoint.</p> <p>Response: <pre><code>{\n  \"status\": \"ok\",\n  \"service\": \"Intern Trading Game API\",\n  \"threads\": {\n    \"validator\": true,\n    \"matching\": true,\n    \"publisher\": true\n  }\n}\n</code></pre></p>"},{"location":"technical/reference/rest-api/#authentication_1","title":"Authentication","text":""},{"location":"technical/reference/rest-api/#post-authregister","title":"POST /auth/register","text":"<p>Register a new trading team.</p> <p>Request Body:</p> Field Type Required Description team_name string Yes Display name (1-50 chars) role string Yes Trading role (currently only \"market_maker\") <p>Response: <code>TeamInfo</code> <pre><code>{\n  \"team_id\": \"TEAM_001\",\n  \"team_name\": \"AlphaBot\",\n  \"role\": \"market_maker\",\n  \"api_key\": \"itg_AbCdEfGhIjKlMnOpQrStUvWxYz...\",\n  \"created_at\": \"2024-01-15T10:00:00Z\"\n}\n</code></pre></p> <p>Errors: - <code>400</code>: Invalid role specified</p>"},{"location":"technical/reference/rest-api/#websocket","title":"WebSocket","text":""},{"location":"technical/reference/rest-api/#ws-ws","title":"WS /ws","text":"<p>Real-time updates for order status, executions, and market data.</p> <p>Connection URL: <pre><code>ws://localhost:8000/ws?api_key=YOUR_API_KEY\n</code></pre></p> <p>Authentication: Pass API key as query parameter.</p> <p>Message Flow:</p> <ol> <li>Connect with valid API key</li> <li>Receive position snapshot immediately</li> <li>Receive real-time updates for:</li> <li>Order acknowledgments</li> <li>Order rejections</li> <li>Trade executions</li> <li>Market data updates</li> </ol> <p>Example Messages:</p> <p>Position Snapshot (on connect): <pre><code>{\n  \"seq\": 1,\n  \"type\": \"position_snapshot\",\n  \"timestamp\": \"2024-01-15T10:00:00.123456Z\",\n  \"data\": {\n    \"positions\": {\n      \"SPX_4500_CALL\": 10,\n      \"SPX_4500_PUT\": -5\n    }\n  }\n}\n</code></pre></p> <p>Order Acknowledgment: <pre><code>{\n  \"seq\": 2,\n  \"type\": \"new_order_ack\",\n  \"timestamp\": \"2024-01-15T10:00:01.234567Z\",\n  \"data\": {\n    \"order_id\": \"ORD_123456\",\n    \"client_order_id\": \"MY_ORDER_001\",\n    \"instrument_id\": \"SPX_4500_CALL\",\n    \"side\": \"buy\",\n    \"quantity\": 10,\n    \"price\": 100.0,\n    \"status\": \"new\"\n  }\n}\n</code></pre></p> <p>See WebSocket API Reference for complete message documentation.</p>"},{"location":"technical/reference/rest-api/#trading","title":"Trading","text":""},{"location":"technical/reference/rest-api/#post-orders","title":"POST /orders","text":"<p>Submit a new order to the exchange.</p> <p>Headers:</p> <ul> <li><code>X-API-Key</code>: Required</li> </ul> <p>Request Body:</p> Field Type Required Description instrument_id string Yes Instrument to trade order_type string Yes \"limit\" or \"market\" side string Yes \"buy\" or \"sell\" quantity integer Yes Number of contracts (&gt; 0) price number Conditional Required for limit orders <p>Response: <code>OrderResponse</code></p> <pre><code>{\n  \"order_id\": \"ORD_123456\",\n  \"status\": \"accepted\",\n  \"timestamp\": \"2024-01-15T10:00:01Z\",\n  \"filled_quantity\": 10,\n  \"average_price\": 25.50,\n  \"fees\": -0.20,\n  \"liquidity_type\": \"maker\",\n  \"error_code\": null,\n  \"error_message\": null\n}\n</code></pre> <p>Note: Real-time updates for this order will be sent via WebSocket if connected.</p> <p>Status Values:</p> <ul> <li><code>accepted</code>: Order accepted, may be resting in book</li> <li><code>filled</code>: Order completely filled</li> <li><code>rejected</code>: Order rejected by validator</li> <li><code>error</code>: Exchange error</li> </ul> <p>Errors:</p> <ul> <li><code>400</code>: Invalid parameters</li> <li><code>401</code>: Missing/invalid API key</li> <li><code>504</code>: Processing timeout</li> </ul>"},{"location":"technical/reference/rest-api/#delete-ordersorder_id","title":"DELETE /orders/{order_id}","text":"<p>Cancel an existing order.</p> <p>Headers:</p> <ul> <li><code>X-API-Key</code>: Required</li> </ul> <p>Path Parameters:</p> <ul> <li><code>order_id</code>: Exchange-assigned order ID (e.g., \"ORD_123456\")</li> </ul> <p>Response: <code>OrderResponse</code></p> <pre><code>{\n  \"order_id\": \"ORD_123456\",\n  \"status\": \"cancelled\",\n  \"timestamp\": \"2024-01-15T10:00:02Z\",\n  \"filled_quantity\": 0,\n  \"error_code\": null,\n  \"error_message\": null\n}\n</code></pre> <p>Status Values:</p> <ul> <li><code>cancelled</code>: Order successfully cancelled</li> <li><code>rejected</code>: Cancellation failed (with error details)</li> </ul> <p>Errors:</p> <ul> <li><code>401</code>: Missing/invalid API key</li> <li><code>504</code>: Processing timeout</li> </ul> <p>Common rejection reasons:</p> <ul> <li>Order not found</li> <li>Order already filled</li> <li>Unauthorized (not your order)</li> </ul>"},{"location":"technical/reference/rest-api/#market-data","title":"Market Data","text":""},{"location":"technical/reference/rest-api/#get-positionsteam_id","title":"GET /positions/{team_id}","text":"<p>Get current positions for a team.</p> <p>Headers:</p> <ul> <li><code>X-API-Key</code>: Required</li> </ul> <p>Path Parameters:</p> <ul> <li><code>team_id</code>: Your team ID (e.g., \"TEAM_001\")</li> </ul> <p>Response: <code>PositionResponse</code></p> <pre><code>{\n  \"team_id\": \"TEAM_001\",\n  \"positions\": {\n    \"SPX_4500_CALL\": 10,\n    \"SPX_4500_PUT\": -5\n  },\n  \"last_updated\": \"2024-01-15T10:00:00Z\"\n}\n</code></pre> <p>Errors:</p> <ul> <li><code>401</code>: Missing/invalid API key</li> <li><code>403</code>: Cannot query other teams' positions</li> </ul>"},{"location":"technical/reference/rest-api/#data-models","title":"Data Models","text":""},{"location":"technical/reference/rest-api/#orderrequest","title":"OrderRequest","text":"<pre><code>{\n  instrument_id: string     // e.g., \"SPX_4500_CALL\"\n  order_type: string        // \"limit\" | \"market\"\n  side: string              // \"buy\" | \"sell\"\n  quantity: number          // &gt; 0\n  price?: number            // Required for limit orders\n  client_order_id?: string  // Optional client reference ID\n}\n</code></pre>"},{"location":"technical/reference/rest-api/#orderresponse","title":"OrderResponse","text":"<pre><code>{\n  order_id: string\n  status: string            // \"accepted\" | \"filled\" | \"rejected\" | \"error\"\n  timestamp: datetime\n  filled_quantity: number   // Default: 0\n  average_price?: number    // Present if filled &gt; 0\n  fees: number              // Transaction fees (default: 0.0)\n  liquidity_type?: string   // \"maker\" | \"taker\" (present if filled)\n  error_code?: string       // Present if rejected\n  error_message?: string    // Present if rejected\n}\n</code></pre>"},{"location":"technical/reference/rest-api/#teaminfo","title":"TeamInfo","text":"<pre><code>{\n  team_id: string           // e.g., \"TEAM_001\"\n  team_name: string\n  role: string              // \"market_maker\"\n  api_key: string           // \"itg_...\"\n  created_at: datetime\n}\n</code></pre>"},{"location":"technical/reference/rest-api/#positionresponse","title":"PositionResponse","text":"<pre><code>{\n  team_id: string\n  positions: {\n    [instrument_id: string]: number  // Positive = long, negative = short\n  }\n  last_updated: datetime\n}\n</code></pre>"},{"location":"technical/reference/rest-api/#errorresponse","title":"ErrorResponse","text":"<pre><code>{\n  error: string\n  detail?: string\n  timestamp: datetime\n}\n</code></pre>"},{"location":"technical/reference/rest-api/#queue-architecture","title":"Queue Architecture","text":"<p>The API uses a multi-threaded queue architecture:</p> <ol> <li>Order Queue: API -&gt; Validator thread (handles both new orders and cancellations)</li> <li>Validation Queue: Validator -&gt; Matching thread</li> <li>Match Queue: For matching engine</li> <li>Trade Queue: Matching -&gt; Publisher thread</li> </ol> <p>This ensures:</p> <ul> <li>Non-blocking order submission</li> <li>Thread-safe processing</li> <li>Consistent state updates</li> <li>FIFO processing (cancellations don't jump ahead of orders)</li> </ul>"},{"location":"technical/reference/rest-api/#constraints","title":"Constraints","text":""},{"location":"technical/reference/rest-api/#market-maker-role","title":"Market Maker Role","text":"<p>Current constraints for market makers: - Position Limit: \u00b150 contracts per instrument - Order Types: limit, market - Instruments: SPX_4500_CALL, SPX_4500_PUT</p>"},{"location":"technical/reference/rest-api/#examples","title":"Examples","text":""},{"location":"technical/reference/rest-api/#curl","title":"cURL","text":"<pre><code># Register team\ncurl -X POST http://localhost:8000/auth/register \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"team_name\": \"TestBot\", \"role\": \"market_maker\"}'\n\n# Submit order\ncurl -X POST http://localhost:8000/orders \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-API-Key: itg_your_key\" \\\n  -d '{\n    \"instrument_id\": \"SPX_4500_CALL\",\n    \"order_type\": \"limit\",\n    \"side\": \"buy\",\n    \"quantity\": 10,\n    \"price\": 25.50\n  }'\n\n# Get positions\ncurl http://localhost:8000/positions/TEAM_001 \\\n  -H \"X-API-Key: itg_your_key\"\n\n# Cancel order\ncurl -X DELETE http://localhost:8000/orders/ORD_123456 \\\n  -H \"X-API-Key: itg_your_key\"\n</code></pre>"},{"location":"technical/reference/rest-api/#python","title":"Python","text":"<pre><code>import requests\n\n# Register\nresp = requests.post(\n    \"http://localhost:8000/auth/register\",\n    json={\"team_name\": \"PyBot\", \"role\": \"market_maker\"}\n)\nteam = resp.json()\n\n# Submit order\nheaders = {\"X-API-Key\": team[\"api_key\"]}\nresp = requests.post(\n    \"http://localhost:8000/orders\",\n    headers=headers,\n    json={\n        \"instrument_id\": \"SPX_4500_CALL\",\n        \"order_type\": \"limit\",\n        \"side\": \"buy\",\n        \"quantity\": 10,\n        \"price\": 25.50\n    }\n)\norder = resp.json()\nprint(order)\n\n# Cancel order\nresp = requests.delete(\n    f\"http://localhost:8000/orders/{order['order_id']}\",\n    headers=headers\n)\nprint(resp.json())\n</code></pre>"},{"location":"technical/reference/validation-api/","title":"Order Validation API Reference","text":""},{"location":"technical/reference/validation-api/#overview","title":"Overview","text":"<p>The Order Validation system provides constraint-based validation for all orders before they reach the exchange. It's designed to be role-agnostic, with all role-specific rules defined in configuration.</p>"},{"location":"technical/reference/validation-api/#core-components","title":"Core Components","text":""},{"location":"technical/reference/validation-api/#validationcontext","title":"ValidationContext","text":"<p>Contains all information needed to validate an order:</p> <pre><code>@dataclass\nclass ValidationContext:\n    order: Order                          # The order being validated\n    trader_id: str                        # ID of the trader\n    trader_role: str                      # Role (for loading constraints)\n    tick_phase: TickPhase                 # Current market phase\n    current_positions: Dict[str, int]     # Current positions by instrument\n    orders_this_tick: int                 # Orders already submitted\n    metadata: Dict[str, Any]              # Additional context\n</code></pre>"},{"location":"technical/reference/validation-api/#constraintconfig","title":"ConstraintConfig","text":"<p>Defines a single validation constraint:</p> <pre><code>@dataclass\nclass ConstraintConfig:\n    constraint_type: ConstraintType       # Type of constraint\n    parameters: Dict[str, Any]            # Constraint-specific parameters\n    error_code: str                       # Error code if violated\n    error_message: str                    # Human-readable error message\n</code></pre>"},{"location":"technical/reference/validation-api/#constraint-types","title":"Constraint Types","text":""},{"location":"technical/reference/validation-api/#position_limit","title":"POSITION_LIMIT","text":"<p>Validates position limits per instrument.</p> <p>Parameters: - <code>max_position</code>: Maximum absolute position allowed - <code>symmetric</code>: If true, enforces \u00b1max_position</p>"},{"location":"technical/reference/validation-api/#portfolio_limit","title":"PORTFOLIO_LIMIT","text":"<p>Validates total portfolio position across all instruments.</p> <p>Parameters: - <code>max_total_position</code>: Maximum total absolute position</p>"},{"location":"technical/reference/validation-api/#order_size","title":"ORDER_SIZE","text":"<p>Validates order size is within bounds.</p> <p>Parameters: - <code>min_size</code>: Minimum order size (default: 0) - <code>max_size</code>: Maximum order size (default: infinity)</p>"},{"location":"technical/reference/validation-api/#order_rate","title":"ORDER_RATE","text":"<p>Validates order submission rate.</p> <p>Parameters: - <code>max_orders_per_tick</code>: Maximum orders allowed per tick</p>"},{"location":"technical/reference/validation-api/#order_type_allowed","title":"ORDER_TYPE_ALLOWED","text":"<p>Validates order type is permitted for the role.</p> <p>Parameters:</p> <ul> <li><code>allowed_types</code>: List of allowed order types (e.g., [\"limit\", \"market\", \"quote\"])</li> </ul>"},{"location":"technical/reference/validation-api/#trading_window","title":"TRADING_WINDOW","text":"<p>Validates orders are submitted during allowed phases.</p> <p>Parameters:</p> <ul> <li><code>allowed_phases</code>: List of phase names (e.g., [\"PRE_OPEN\"])</li> </ul>"},{"location":"technical/reference/validation-api/#configuration-format","title":"Configuration Format","text":"<p>Constraints are configured per role in YAML:</p> <pre><code>roles:\n  market_maker:\n    constraints:\n      - type: position_limit\n        max_position: 50\n        symmetric: true\n        error_code: \"MM_POS_LIMIT\"\n        error_message: \"Position exceeds \u00b150\"\n\n      - type: order_size\n        min_size: 1\n        max_size: 1000\n        error_code: \"MM_SIZE\"\n        error_message: \"Order size must be between 1 and 1000\"\n</code></pre>"},{"location":"technical/reference/validation-api/#usage-example","title":"Usage Example","text":"<pre><code># Create validator\nvalidator = ConstraintBasedOrderValidator()\n\n# Load constraints from config\nrole_constraints = load_constraints_from_dict(config)\nfor role, constraints in role_constraints.items():\n    validator.load_constraints(role, constraints)\n\n# Validate an order\ncontext = ValidationContext(\n    order=order,\n    trader_id=\"TRADER1\",\n    trader_role=\"market_maker\",\n    tick_phase=TickPhase.PRE_OPEN,\n    current_positions={\"SPX_CALL_4500\": 40},\n    orders_this_tick=5\n)\n\nresult = validator.validate_order(context)\n\nif result.status == \"rejected\":\n    print(f\"Order rejected: {result.error_code} - {result.error_message}\")\n</code></pre>"},{"location":"technical/reference/validation-api/#error-handling","title":"Error Handling","text":"<p>Rejected orders include: - <code>error_code</code>: Machine-readable error identifier - <code>error_message</code>: Human-readable explanation</p> <p>The validator uses a fail-fast approach, returning the first constraint violation encountered.</p>"},{"location":"technical/reference/validation-api/#universal-constraints","title":"Universal Constraints","text":"<p>Some constraints apply to all roles automatically: - Trading window enforcement (orders only during PRE_OPEN phase)</p> <p>Additional universal constraints can be defined in the configuration.</p>"},{"location":"technical/reference/websocket-api/","title":"WebSocket API Reference","text":""},{"location":"technical/reference/websocket-api/#overview","title":"Overview","text":"<p>The Intern Trading Game provides WebSocket endpoints for real-time data streaming, enabling bots to receive immediate updates on trades, market data, and game events without polling the REST API.</p>"},{"location":"technical/reference/websocket-api/#connection-details","title":"Connection Details","text":""},{"location":"technical/reference/websocket-api/#endpoint","title":"Endpoint","text":"<pre><code>ws://localhost:8000/ws\n</code></pre>"},{"location":"technical/reference/websocket-api/#authentication","title":"Authentication","text":"<p>WebSocket connections require authentication via API key:</p> <pre><code>import websockets\nimport json\n\nasync def connect():\n    uri = \"ws://localhost:8000/ws?api_key=YOUR_API_KEY\"\n    async with websockets.connect(uri) as websocket:\n        # Connection established\n        await process_messages(websocket)\n</code></pre>"},{"location":"technical/reference/websocket-api/#connection-lifecycle","title":"Connection Lifecycle","text":"<ol> <li>Connection - Establish WebSocket connection with API key</li> <li>Authentication - Server validates API key</li> <li>Position Snapshot - Initial position state sent to client</li> <li>Ready - Connection ready for real-time updates</li> <li>Disconnection - Graceful close or timeout</li> </ol>"},{"location":"technical/reference/websocket-api/#message-format","title":"Message Format","text":"<p>All messages follow a consistent JSON structure:</p> <pre><code>{\n    \"seq\": 123,                    // Sequence number (incrementing)\n    \"type\": \"message_type\",        // Message type identifier\n    \"timestamp\": \"2024-01-15T10:30:45.123456Z\",  // ISO 8601 timestamp\n    \"data\": {                      // Message-specific payload\n        // ... fields vary by message type\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#message-types","title":"Message Types","text":""},{"location":"technical/reference/websocket-api/#order-messages","title":"Order Messages","text":""},{"location":"technical/reference/websocket-api/#new_order_ack","title":"new_order_ack","text":"<p>Sent when an order is accepted by the exchange.</p> <pre><code>{\n    \"seq\": 1,\n    \"type\": \"new_order_ack\",\n    \"timestamp\": \"2024-01-15T10:30:45.123456Z\",\n    \"data\": {\n        \"order_id\": \"ORD-123456\",\n        \"client_order_id\": \"MY-ORDER-001\",  // If provided\n        \"instrument_id\": \"SPX_4500_CALL\",\n        \"side\": \"buy\",\n        \"quantity\": 10,\n        \"order_type\": \"limit\",\n        \"price\": 128.50,\n        \"status\": \"new\"\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#new_order_reject","title":"new_order_reject","text":"<p>Sent when an order fails validation.</p> <pre><code>{\n    \"seq\": 2,\n    \"type\": \"new_order_reject\",\n    \"timestamp\": \"2024-01-15T10:30:45.234567Z\",\n    \"data\": {\n        \"order_id\": \"ORD-123457\",\n        \"client_order_id\": \"MY-ORDER-002\",\n        \"status\": \"rejected\",\n        \"reason\": \"Position limit exceeded\",\n        \"error_code\": \"POS_LIMIT\"\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#execution_report","title":"execution_report","text":"<p>Sent when an order is filled (partially or completely).</p> <pre><code>{\n    \"seq\": 3,\n    \"type\": \"execution_report\",\n    \"timestamp\": \"2024-01-15T10:30:46.345678Z\",\n    \"data\": {\n        \"order_id\": \"ORD-123456\",\n        \"client_order_id\": \"MY-ORDER-001\",\n        \"trade_id\": \"TRD-789012\",\n        \"instrument_id\": \"SPX_4500_CALL\",\n        \"side\": \"buy\",\n        \"executed_quantity\": 5,\n        \"executed_price\": 128.45,\n        \"remaining_quantity\": 5,\n        \"order_status\": \"partially_filled\",\n        \"liquidity_type\": \"taker\",\n        \"fees\": 0.10\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#cancel_ack","title":"cancel_ack","text":"<p>Sent when an order cancellation succeeds.</p> <pre><code>{\n    \"seq\": 4,\n    \"type\": \"cancel_ack\",\n    \"timestamp\": \"2024-01-15T10:30:47.456789Z\",\n    \"data\": {\n        \"order_id\": \"ORD-123456\",\n        \"client_order_id\": \"MY-ORDER-001\",\n        \"status\": \"cancelled\",\n        \"cancelled_quantity\": 5,\n        \"reason\": \"user_requested\"\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#cancel_reject","title":"cancel_reject","text":"<p>Sent when an order cancellation fails.</p> <pre><code>{\n    \"seq\": 5,\n    \"type\": \"cancel_reject\",\n    \"timestamp\": \"2024-01-15T10:30:47.567890Z\",\n    \"data\": {\n        \"order_id\": \"ORD-123458\",\n        \"client_order_id\": \"MY-ORDER-003\",\n        \"reason\": \"Order already filled\"\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#market-data-messages","title":"Market Data Messages","text":""},{"location":"technical/reference/websocket-api/#market_data","title":"market_data","text":"<p>Sent when market prices update.</p> <pre><code>{\n    \"seq\": 6,\n    \"type\": \"market_data\",\n    \"timestamp\": \"2024-01-15T10:30:48.678901Z\",\n    \"data\": {\n        \"instrument_id\": \"SPX_4500_CALL\",\n        \"bid\": 128.25,\n        \"ask\": 128.75,\n        \"last\": 128.50,\n        \"bid_size\": 50,\n        \"ask_size\": 75\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#game-state-messages","title":"Game State Messages","text":""},{"location":"technical/reference/websocket-api/#tick_start","title":"tick_start","text":"<p>Sent at the beginning of each 5-minute tick.</p> <pre><code>{\n    \"seq\": 7,\n    \"type\": \"tick_start\",\n    \"timestamp\": \"2024-01-15T10:35:00.000000Z\",\n    \"data\": {\n        \"tick_number\": 42,\n        \"tick_duration_seconds\": 300,\n        \"order_window_open\": \"2024-01-15T10:35:30.000000Z\",\n        \"order_window_close\": \"2024-01-15T10:38:00.000000Z\"\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#tick_phase","title":"tick_phase","text":"<p>Sent when the tick phase changes.</p> <pre><code>{\n    \"seq\": 8,\n    \"type\": \"tick_phase\",\n    \"timestamp\": \"2024-01-15T10:35:30.000000Z\",\n    \"data\": {\n        \"phase\": \"pre_open\",\n        \"tick_number\": 42\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#position_snapshot","title":"position_snapshot","text":"<p>Sent immediately after connection establishment.</p> <pre><code>{\n    \"seq\": 1,\n    \"type\": \"position_snapshot\",\n    \"timestamp\": \"2024-01-15T10:30:00.000000Z\",\n    \"data\": {\n        \"positions\": {\n            \"SPX_4500_CALL\": 10,\n            \"SPX_4500_PUT\": -5\n        }\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#signal-messages-role-specific","title":"Signal Messages (Role-Specific)","text":""},{"location":"technical/reference/websocket-api/#signal","title":"signal","text":"<p>Sent to teams with appropriate role permissions.</p> <pre><code>{\n    \"seq\": 9,\n    \"type\": \"signal\",\n    \"timestamp\": \"2024-01-15T10:35:15.123456Z\",\n    \"data\": {\n        \"signal_type\": \"volatility_forecast\",\n        \"forecast\": \"high\",\n        \"confidence\": 0.75,\n        \"horizon_ticks\": 3\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#system-messages","title":"System Messages","text":""},{"location":"technical/reference/websocket-api/#connection_status","title":"connection_status","text":"<p>Sent for connection lifecycle events.</p> <pre><code>{\n    \"seq\": 1,\n    \"type\": \"connection_status\",\n    \"timestamp\": \"2024-01-15T10:30:00.123456Z\",\n    \"data\": {\n        \"status\": \"authenticated\",\n        \"message\": \"Connection authenticated for team TEAM-001\"\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#event","title":"event","text":"<p>Sent for market events and news.</p> <pre><code>{\n    \"seq\": 10,\n    \"type\": \"event\",\n    \"timestamp\": \"2024-01-15T10:36:00.000000Z\",\n    \"data\": {\n        \"event_type\": \"news\",\n        \"headline\": \"Fed announces rate decision\",\n        \"impact\": \"high\"\n    }\n}\n</code></pre>"},{"location":"technical/reference/websocket-api/#error-handling","title":"Error Handling","text":""},{"location":"technical/reference/websocket-api/#connection-errors","title":"Connection Errors","text":"<ul> <li><code>1000</code> - Normal closure</li> <li><code>1001</code> - Going away (server shutdown)</li> <li><code>1002</code> - Protocol error</li> <li><code>1003</code> - Unsupported data</li> <li><code>1008</code> - Policy violation (auth failure)</li> <li><code>1011</code> - Internal server error</li> </ul>"},{"location":"technical/reference/websocket-api/#message-sequence-numbers","title":"Message Sequence Numbers","text":"<p>Clients should track sequence numbers to detect missed messages:</p> <pre><code>last_seq = 0\n\nasync def process_message(msg):\n    global last_seq\n\n    if msg['seq'] != last_seq + 1:\n        print(f\"Missed messages! Expected {last_seq + 1}, got {msg['seq']}\")\n\n    last_seq = msg['seq']\n    # Process message...\n</code></pre>"},{"location":"technical/reference/websocket-api/#rate-limits","title":"Rate Limits","text":"<ul> <li>Maximum 1 connection per team</li> <li>No rate limits on received messages</li> <li>Slow clients may be disconnected if unable to keep up</li> </ul>"},{"location":"technical/reference/websocket-api/#example-client","title":"Example Client","text":"<pre><code>import asyncio\nimport websockets\nimport json\n\nasync def trading_bot():\n    uri = \"ws://localhost:8000/ws?api_key=YOUR_API_KEY\"\n\n    async with websockets.connect(uri) as websocket:\n        async for message in websocket:\n            msg = json.loads(message)\n\n            # Process different message types\n            if msg['type'] == 'position_snapshot':\n                print(f\"Current positions: {msg['data']['positions']}\")\n\n            elif msg['type'] == 'execution_report':\n                data = msg['data']\n                print(f\"Trade executed: {data['executed_quantity']} @ {data['executed_price']}\")\n                print(f\"Remaining: {data['remaining_quantity']}, Fees: {data['fees']}\")\n\n            elif msg['type'] == 'tick_start':\n                print(f\"New tick {msg['data']['tick_number']} started\")\n\n# Run the bot\nasyncio.run(trading_bot())\n</code></pre>"},{"location":"technical/reference/websocket-api/#best-practices","title":"Best Practices","text":"<ol> <li>Reconnection Logic - Implement automatic reconnection with exponential backoff</li> <li>Message Handling - Process messages asynchronously to avoid blocking</li> <li>Error Recovery - Handle partial messages and connection drops gracefully</li> <li>State Synchronization - Use position snapshot to verify local state</li> <li>Sequence Tracking - Monitor sequence numbers to detect missed messages</li> </ol>"},{"location":"technical/reference/websocket-api/#see-also","title":"See Also","text":"<ul> <li>REST API Reference - For order submission and queries</li> <li>How to Use WebSockets - Integration guide</li> <li>Order Types - Order type details</li> </ul>"},{"location":"technical/tutorials/market-maker-tutorial/","title":"Market Maker Tutorial","text":"<p>This tutorial guides new interns through setting up and running a market making strategy in the Intern Trading Game.</p>"},{"location":"technical/tutorials/market-maker-tutorial/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Basic understanding of options trading concepts</li> <li>Familiarity with Jupyter notebooks</li> </ul>"},{"location":"technical/tutorials/market-maker-tutorial/#getting-started","title":"Getting Started","text":""},{"location":"technical/tutorials/market-maker-tutorial/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/your-org/Intern-Trading-Game.git\ncd Intern-Trading-Game\n</code></pre>"},{"location":"technical/tutorials/market-maker-tutorial/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>pip install -e .\npip install -e \".[dev]\"  # For development dependencies\n</code></pre>"},{"location":"technical/tutorials/market-maker-tutorial/#3-launch-the-jupyter-notebook","title":"3. Launch the Jupyter Notebook","text":"<pre><code>jupyter notebook notebooks/market_maker_starter.ipynb\n</code></pre>"},{"location":"technical/tutorials/market-maker-tutorial/#market-maker-role-overview","title":"Market Maker Role Overview","text":"<p>As a market maker, your objective is to:</p> <ol> <li>Quote fair prices for options</li> <li>Manage inventory risk</li> <li>Profit from the bid-ask spread</li> <li>Maintain quotes in changing market conditions</li> </ol>"},{"location":"technical/tutorials/market-maker-tutorial/#basic-strategy-implementation","title":"Basic Strategy Implementation","text":"<p>Here's a simple market making strategy to get you started:</p> <pre><code>from intern_trading_game.exchange.order import Order\n\ndef simple_market_maker(exchange, instrument_id, spread_percentage=0.02):\n    \"\"\"\n    A simple market making strategy that quotes around a theoretical price.\n\n    Parameters\n    ----------\n    exchange : ExchangeVenue\n        The exchange venue to place orders\n    instrument_id : str\n        The ID of the instrument to make markets for\n    spread_percentage : float, default=0.02\n        The percentage spread to quote (e.g., 0.02 for 2%)\n    \"\"\"\n    # Get current market data\n    market_data = exchange.get_market_summary(instrument_id)\n\n    # Calculate theoretical price (simplified)\n    theo_price = calculate_theoretical_price(instrument_id)\n\n    # Calculate bid and ask prices\n    bid_price = theo_price * (1 - spread_percentage/2)\n    ask_price = theo_price * (1 + spread_percentage/2)\n\n    # Submit orders\n    bid_order = Order(\n        instrument_id=instrument_id,\n        side=\"buy\",\n        quantity=10,\n        price=bid_price,\n        trader_id=\"market_maker_1\"\n    )\n\n    ask_order = Order(\n        instrument_id=instrument_id,\n        side=\"sell\",\n        quantity=10,\n        price=ask_price,\n        trader_id=\"market_maker_1\"\n    )\n\n    exchange.submit_order(bid_order)\n    exchange.submit_order(ask_order)\n\n    return bid_order, ask_order\n</code></pre>"},{"location":"technical/tutorials/market-maker-tutorial/#next-steps","title":"Next Steps","text":"<ol> <li>Implement delta hedging to manage directional risk</li> <li>Adjust quotes based on inventory</li> <li>Respond to volatility regime changes</li> <li>Optimize spread width based on market conditions</li> </ol>"},{"location":"technical/tutorials/market-maker-tutorial/#performance-evaluation","title":"Performance Evaluation","text":"<p>Your market making strategy will be evaluated on:</p> <ul> <li>P&amp;L</li> <li>Quote width and uptime</li> <li>Risk management effectiveness</li> <li>Adaptability to changing market conditions</li> </ul>"}]}